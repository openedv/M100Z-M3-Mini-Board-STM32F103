
05_iwdg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000300c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800326c  0800326c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800326c  0800326c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800326c  0800326c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000006c  080032e0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080032e0  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f11  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001daf  00000000  00000000  00027fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  00029d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f2  00000000  00000000  0002a590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a3e5  00000000  00000000  0002ab82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c615  00000000  00000000  00044f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092aae  00000000  00000000  0005157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023f0  00000000  00000000  000e402c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e641c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	00000000 	.word	0x00000000
 8000204:	080031d8 	.word	0x080031d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000070 	.word	0x20000070
 8000220:	080031d8 	.word	0x080031d8

08000224 <key_scan>:
 * @retval      key,defined as follows:
 *              KEY0_PRES, 1,KEY0 pressed
 *              WKUP_PRES, 2,WKUP is pressed
 */
uint8_t key_scan(uint8_t mode)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up = 1;                /* Press the button to release the flag */
    uint8_t keyval = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	73fb      	strb	r3, [r7, #15]

    if (mode == 1)
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d102      	bne.n	800023e <key_scan+0x1a>
    {
    	key_up = 1;                           /* support for linking */
 8000238:	4b23      	ldr	r3, [pc, #140]	; (80002c8 <key_scan+0xa4>)
 800023a:	2201      	movs	r2, #1
 800023c:	701a      	strb	r2, [r3, #0]
    }

    if (key_up && (KEY0 == 1 || WK_UP == 1))  /* The key release flag is 1, and any key is pressed */
 800023e:	4b22      	ldr	r3, [pc, #136]	; (80002c8 <key_scan+0xa4>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d028      	beq.n	8000298 <key_scan+0x74>
 8000246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800024a:	4820      	ldr	r0, [pc, #128]	; (80002cc <key_scan+0xa8>)
 800024c:	f000 ffdc 	bl	8001208 <HAL_GPIO_ReadPin>
 8000250:	4603      	mov	r3, r0
 8000252:	2b01      	cmp	r3, #1
 8000254:	d006      	beq.n	8000264 <key_scan+0x40>
 8000256:	2101      	movs	r1, #1
 8000258:	481c      	ldr	r0, [pc, #112]	; (80002cc <key_scan+0xa8>)
 800025a:	f000 ffd5 	bl	8001208 <HAL_GPIO_ReadPin>
 800025e:	4603      	mov	r3, r0
 8000260:	2b01      	cmp	r3, #1
 8000262:	d119      	bne.n	8000298 <key_scan+0x74>
    {
    	HAL_Delay(10);                        /* delay 10ms */
 8000264:	200a      	movs	r0, #10
 8000266:	f000 fbc7 	bl	80009f8 <HAL_Delay>
        key_up = 0;
 800026a:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <key_scan+0xa4>)
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]

        if (KEY0 == 1)
 8000270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000274:	4815      	ldr	r0, [pc, #84]	; (80002cc <key_scan+0xa8>)
 8000276:	f000 ffc7 	bl	8001208 <HAL_GPIO_ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	2b01      	cmp	r3, #1
 800027e:	d101      	bne.n	8000284 <key_scan+0x60>
        {
        	keyval = KEY0_PRES;
 8000280:	2301      	movs	r3, #1
 8000282:	73fb      	strb	r3, [r7, #15]
        }

        if (WK_UP == 1)
 8000284:	2101      	movs	r1, #1
 8000286:	4811      	ldr	r0, [pc, #68]	; (80002cc <key_scan+0xa8>)
 8000288:	f000 ffbe 	bl	8001208 <HAL_GPIO_ReadPin>
 800028c:	4603      	mov	r3, r0
 800028e:	2b01      	cmp	r3, #1
 8000290:	d114      	bne.n	80002bc <key_scan+0x98>
        {
        	keyval = WKUP_PRES;
 8000292:	2302      	movs	r3, #2
 8000294:	73fb      	strb	r3, [r7, #15]
        if (WK_UP == 1)
 8000296:	e011      	b.n	80002bc <key_scan+0x98>
        }
    }
    else if (KEY0 == 0 && WK_UP == 0)         /* Without any key pressed, the marker key is released */
 8000298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800029c:	480b      	ldr	r0, [pc, #44]	; (80002cc <key_scan+0xa8>)
 800029e:	f000 ffb3 	bl	8001208 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d109      	bne.n	80002bc <key_scan+0x98>
 80002a8:	2101      	movs	r1, #1
 80002aa:	4808      	ldr	r0, [pc, #32]	; (80002cc <key_scan+0xa8>)
 80002ac:	f000 ffac 	bl	8001208 <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d102      	bne.n	80002bc <key_scan+0x98>
    {
        key_up = 1;
 80002b6:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <key_scan+0xa4>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	701a      	strb	r2, [r3, #0]
    }

    return keyval;                            /* return key value */
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000000 	.word	0x20000000
 80002cc:	40010800 	.word	0x40010800

080002d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002e4:	4b23      	ldr	r3, [pc, #140]	; (8000374 <MX_GPIO_Init+0xa4>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a22      	ldr	r2, [pc, #136]	; (8000374 <MX_GPIO_Init+0xa4>)
 80002ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b20      	ldr	r3, [pc, #128]	; (8000374 <MX_GPIO_Init+0xa4>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	4b1d      	ldr	r3, [pc, #116]	; (8000374 <MX_GPIO_Init+0xa4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a1c      	ldr	r2, [pc, #112]	; (8000374 <MX_GPIO_Init+0xa4>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <MX_GPIO_Init+0xa4>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000314:	4b17      	ldr	r3, [pc, #92]	; (8000374 <MX_GPIO_Init+0xa4>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a16      	ldr	r2, [pc, #88]	; (8000374 <MX_GPIO_Init+0xa4>)
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <MX_GPIO_Init+0xa4>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0304 	and.w	r3, r3, #4
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2160      	movs	r1, #96	; 0x60
 8000330:	4811      	ldr	r0, [pc, #68]	; (8000378 <MX_GPIO_Init+0xa8>)
 8000332:	f000 ff80 	bl	8001236 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000336:	2360      	movs	r3, #96	; 0x60
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800033e:	2301      	movs	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000342:	2303      	movs	r3, #3
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	480a      	ldr	r0, [pc, #40]	; (8000378 <MX_GPIO_Init+0xa8>)
 800034e:	f000 fdc7 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WK_UP_Pin|KEY0_Pin;
 8000352:	f248 0301 	movw	r3, #32769	; 0x8001
 8000356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800035c:	2302      	movs	r3, #2
 800035e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	4619      	mov	r1, r3
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_GPIO_Init+0xac>)
 8000368:	f000 fdba 	bl	8000ee0 <HAL_GPIO_Init>

}
 800036c:	bf00      	nop
 800036e:	3720      	adds	r7, #32
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40021000 	.word	0x40021000
 8000378:	40011800 	.word	0x40011800
 800037c:	40010800 	.word	0x40010800

08000380 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_IWDG_Init+0x2c>)
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <MX_IWDG_Init+0x30>)
 8000388:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <MX_IWDG_Init+0x2c>)
 800038c:	2204      	movs	r2, #4
 800038e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 625;
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_IWDG_Init+0x2c>)
 8000392:	f240 2271 	movw	r2, #625	; 0x271
 8000396:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000398:	4804      	ldr	r0, [pc, #16]	; (80003ac <MX_IWDG_Init+0x2c>)
 800039a:	f000 ff64 	bl	8001266 <HAL_IWDG_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80003a4:	f000 f89f 	bl	80004e6 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000088 	.word	0x20000088
 80003b0:	40003000 	.word	0x40003000

080003b4 <iwdg_feed>:
  * @brief  Refresh the IWDG.
  * @param  None.
  * @retval None.
  */
void iwdg_feed(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);   /* Reload the counter */
 80003b8:	4802      	ldr	r0, [pc, #8]	; (80003c4 <iwdg_feed+0x10>)
 80003ba:	f000 ff96 	bl	80012ea <HAL_IWDG_Refresh>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000088 	.word	0x20000088

080003c8 <stm32f103ve_show_mesg>:
 * @brief   Displays information about the experiment
 * @param   None
 * @retval  None
 */
void stm32f103ve_show_mesg(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	/* The serial port outputs the experimental information */
	printf("\n");
 80003cc:	200a      	movs	r0, #10
 80003ce:	f002 fae5 	bl	800299c <putchar>
	printf("********************************\r\n");
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <stm32f103ve_show_mesg+0x34>)
 80003d4:	f002 fb3e 	bl	8002a54 <puts>
	printf("STM32F103\r\n");
 80003d8:	4809      	ldr	r0, [pc, #36]	; (8000400 <stm32f103ve_show_mesg+0x38>)
 80003da:	f002 fb3b 	bl	8002a54 <puts>
	printf("IWDG Test\r\n");
 80003de:	4809      	ldr	r0, [pc, #36]	; (8000404 <stm32f103ve_show_mesg+0x3c>)
 80003e0:	f002 fb38 	bl	8002a54 <puts>
	printf("ATOM@ALIENTEK\r\n");
 80003e4:	4808      	ldr	r0, [pc, #32]	; (8000408 <stm32f103ve_show_mesg+0x40>)
 80003e6:	f002 fb35 	bl	8002a54 <puts>
	printf("********************************\r\n");
 80003ea:	4804      	ldr	r0, [pc, #16]	; (80003fc <stm32f103ve_show_mesg+0x34>)
 80003ec:	f002 fb32 	bl	8002a54 <puts>
	printf("\r\n");
 80003f0:	4806      	ldr	r0, [pc, #24]	; (800040c <stm32f103ve_show_mesg+0x44>)
 80003f2:	f002 fb2f 	bl	8002a54 <puts>
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	080031f0 	.word	0x080031f0
 8000400:	08003214 	.word	0x08003214
 8000404:	08003220 	.word	0x08003220
 8000408:	0800322c 	.word	0x0800322c
 800040c:	0800323c 	.word	0x0800323c

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000414:	f000 fa8e 	bl	8000934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000418:	f000 f81e 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041c:	f7ff ff58 	bl	80002d0 <MX_GPIO_Init>
  MX_IWDG_Init();
 8000420:	f7ff ffae 	bl	8000380 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 8000424:	f000 f982 	bl	800072c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);   		  /* delay 100ms */
 8000428:	2064      	movs	r0, #100	; 0x64
 800042a:	f000 fae5 	bl	80009f8 <HAL_Delay>
  LED0(0);                    /* turn on LED0 */
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <main+0x44>)
 8000434:	f000 feff 	bl	8001236 <HAL_GPIO_WritePin>
  stm32f103ve_show_mesg();
 8000438:	f7ff ffc6 	bl	80003c8 <stm32f103ve_show_mesg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (key_scan(0) == WKUP_PRES)        /* If WK_UP is pressed, the dog is fed. */
 800043c:	2000      	movs	r0, #0
 800043e:	f7ff fef1 	bl	8000224 <key_scan>
 8000442:	4603      	mov	r3, r0
 8000444:	2b02      	cmp	r3, #2
 8000446:	d101      	bne.n	800044c <main+0x3c>
	  {
		  iwdg_feed();                     /* feed the dog */
 8000448:	f7ff ffb4 	bl	80003b4 <iwdg_feed>
	  }

	  HAL_Delay(10);   		               /* delay 10ms */
 800044c:	200a      	movs	r0, #10
 800044e:	f000 fad3 	bl	80009f8 <HAL_Delay>
	  if (key_scan(0) == WKUP_PRES)        /* If WK_UP is pressed, the dog is fed. */
 8000452:	e7f3      	b.n	800043c <main+0x2c>
 8000454:	40011800 	.word	0x40011800

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b090      	sub	sp, #64	; 0x40
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	2228      	movs	r2, #40	; 0x28
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f002 fbd4 	bl	8002c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800047a:	2309      	movs	r3, #9
 800047c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000482:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	2301      	movs	r3, #1
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800048c:	2301      	movs	r3, #1
 800048e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2302      	movs	r3, #2
 8000492:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800049a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800049e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a0:	f107 0318 	add.w	r3, r7, #24
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 ff2f 	bl	8001308 <HAL_RCC_OscConfig>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004b0:	f000 f819 	bl	80004e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2302      	movs	r3, #2
 80004ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2102      	movs	r1, #2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 f99c 	bl	800180c <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x86>
  {
    Error_Handler();
 80004da:	f000 f804 	bl	80004e6 <Error_Handler>
  }
}
 80004de:	bf00      	nop
 80004e0:	3740      	adds	r7, #64	; 0x40
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ea:	b672      	cpsid	i
}
 80004ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ee:	e7fe      	b.n	80004ee <Error_Handler+0x8>

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <HAL_MspInit+0x60>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a15      	ldr	r2, [pc, #84]	; (8000550 <HAL_MspInit+0x60>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <HAL_MspInit+0x60>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <HAL_MspInit+0x60>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <HAL_MspInit+0x60>)
 8000514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <HAL_MspInit+0x60>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000526:	2005      	movs	r0, #5
 8000528:	f000 fb56 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_MspInit+0x64>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_MspInit+0x64>)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	40010000 	.word	0x40010000

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler+0x4>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler+0x4>

08000576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059e:	f000 fa0f 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <USART1_IRQHandler+0x10>)
 80005ae:	f001 fbb3 	bl	8001d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000168 	.word	0x20000168

080005bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00a      	b.n	80005e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005ce:	f3af 8000 	nop.w
 80005d2:	4601      	mov	r1, r0
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	60ba      	str	r2, [r7, #8]
 80005da:	b2ca      	uxtb	r2, r1
 80005dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	dbf0      	blt.n	80005ce <_read+0x12>
  }

  return len;
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	e009      	b.n	800061c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f879 	bl	8000708 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf1      	blt.n	8000608 <_write+0x12>
  }
  return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_close>:

int _close(int file)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000654:	605a      	str	r2, [r3, #4]
  return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <_isatty>:

int _isatty(int file)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000676:	b480      	push	{r7}
 8000678:	b085      	sub	sp, #20
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
	...

08000690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <_sbrk+0x5c>)
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <_sbrk+0x60>)
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <_sbrk+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d102      	bne.n	80006b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <_sbrk+0x64>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <_sbrk+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <_sbrk+0x64>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d207      	bcs.n	80006d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c0:	f002 faf6 	bl	8002cb0 <__errno>
 80006c4:	4603      	mov	r3, r0
 80006c6:	220c      	movs	r2, #12
 80006c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	e009      	b.n	80006e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <_sbrk+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <_sbrk+0x64>)
 80006e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006e2:	68fb      	ldr	r3, [r7, #12]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20010000 	.word	0x20010000
 80006f0:	00000400 	.word	0x00000400
 80006f4:	20000094 	.word	0x20000094
 80006f8:	20000300 	.word	0x20000300

080006fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000710:	1d39      	adds	r1, r7, #4
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2201      	movs	r2, #1
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <__io_putchar+0x20>)
 800071a:	f001 fa55 	bl	8001bc8 <HAL_UART_Transmit>
	return ch;
 800071e:	687b      	ldr	r3, [r7, #4]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000168 	.word	0x20000168

0800072c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_USART1_UART_Init+0x54>)
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <MX_USART1_UART_Init+0x58>)
 8000734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_USART1_UART_Init+0x54>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART1_UART_Init+0x54>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART1_UART_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_USART1_UART_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART1_UART_Init+0x54>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_USART1_UART_Init+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <MX_USART1_UART_Init+0x54>)
 8000764:	f001 f9e0 	bl	8001b28 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f7ff feba 	bl	80004e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* This function enables the receive interrupt: flag UART_IT_RXNE and sets
   * the receive buffer and the maximum amount of data the receive buffer can receive */
   HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8000772:	2201      	movs	r2, #1
 8000774:	4904      	ldr	r1, [pc, #16]	; (8000788 <MX_USART1_UART_Init+0x5c>)
 8000776:	4802      	ldr	r0, [pc, #8]	; (8000780 <MX_USART1_UART_Init+0x54>)
 8000778:	f001 faa9 	bl	8001cce <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000168 	.word	0x20000168
 8000784:	40013800 	.word	0x40013800
 8000788:	20000164 	.word	0x20000164

0800078c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a20      	ldr	r2, [pc, #128]	; (8000828 <HAL_UART_MspInit+0x9c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d139      	bne.n	8000820 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <HAL_UART_MspInit+0xa0>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a1e      	ldr	r2, [pc, #120]	; (800082c <HAL_UART_MspInit+0xa0>)
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <HAL_UART_MspInit+0xa0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_UART_MspInit+0xa0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a18      	ldr	r2, [pc, #96]	; (800082c <HAL_UART_MspInit+0xa0>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <HAL_UART_MspInit+0xa0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	4619      	mov	r1, r3
 80007f0:	480f      	ldr	r0, [pc, #60]	; (8000830 <HAL_UART_MspInit+0xa4>)
 80007f2:	f000 fb75 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4619      	mov	r1, r3
 800080a:	4809      	ldr	r0, [pc, #36]	; (8000830 <HAL_UART_MspInit+0xa4>)
 800080c:	f000 fb68 	bl	8000ee0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 2);
 8000810:	2202      	movs	r2, #2
 8000812:	2102      	movs	r1, #2
 8000814:	2025      	movs	r0, #37	; 0x25
 8000816:	f000 f9ea 	bl	8000bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800081a:	2025      	movs	r0, #37	; 0x25
 800081c:	f000 fa03 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40013800 	.word	0x40013800
 800082c:	40021000 	.word	0x40021000
 8000830:	40010800 	.word	0x40010800

08000834 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)                      /* if it is serial port USART1 */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <HAL_UART_RxCpltCallback+0xa0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d142      	bne.n	80008cc <HAL_UART_RxCpltCallback+0x98>
    {
        if ((g_usart_rx_sta & 0x8000) == 0)             /* receipt not completed */
 8000846:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	b21b      	sxth	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	db38      	blt.n	80008c2 <HAL_UART_RxCpltCallback+0x8e>
        {
            if (g_usart_rx_sta & 0x4000)                /* 0x0d has been received (the Enter key). */
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000858:	2b00      	cmp	r3, #0
 800085a:	d011      	beq.n	8000880 <HAL_UART_RxCpltCallback+0x4c>
            {
                if (g_rx_buffer[0] != 0x0a)             /* this is not 0x0a (that is, not a newline key) */
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <HAL_UART_RxCpltCallback+0xa8>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b0a      	cmp	r3, #10
 8000862:	d003      	beq.n	800086c <HAL_UART_RxCpltCallback+0x38>
                {
                    g_usart_rx_sta = 0;                 /* receive error,restart */
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 8000866:	2200      	movs	r2, #0
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	e02a      	b.n	80008c2 <HAL_UART_RxCpltCallback+0x8e>
                }
                else                                    /* it gets 0x0a (the newline key) */
                {
                    g_usart_rx_sta |= 0x8000;           /* the reception is complete */
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 800087c:	801a      	strh	r2, [r3, #0]
 800087e:	e020      	b.n	80008c2 <HAL_UART_RxCpltCallback+0x8e>
                }
            }
            else                                        /* 0X0d has not been reached yet (the Enter key) */
            {
                if (g_rx_buffer[0] == 0x0d)
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <HAL_UART_RxCpltCallback+0xa8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b0d      	cmp	r3, #13
 8000886:	d107      	bne.n	8000898 <HAL_UART_RxCpltCallback+0x64>
                    g_usart_rx_sta |= 0x4000;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	e014      	b.n	80008c2 <HAL_UART_RxCpltCallback+0x8e>
                else
                {
                    g_usart_rx_buf[g_usart_rx_sta & 0X3FFF] = g_rx_buffer[0];
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80008a0:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_UART_RxCpltCallback+0xa8>)
 80008a2:	7811      	ldrb	r1, [r2, #0]
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_UART_RxCpltCallback+0xac>)
 80008a6:	54d1      	strb	r1, [r2, r3]
                    g_usart_rx_sta++;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 80008b2:	801a      	strh	r2, [r3, #0]

                    if (g_usart_rx_sta > (USART_REC_LEN - 1))
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	2bc7      	cmp	r3, #199	; 0xc7
 80008ba:	d902      	bls.n	80008c2 <HAL_UART_RxCpltCallback+0x8e>
                    {
                        g_usart_rx_sta = 0;             /* receive data error, start receive again */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_UART_RxCpltCallback+0xa4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	801a      	strh	r2, [r3, #0]
                    }
                }
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 80008c2:	2201      	movs	r2, #1
 80008c4:	4905      	ldr	r1, [pc, #20]	; (80008dc <HAL_UART_RxCpltCallback+0xa8>)
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <HAL_UART_RxCpltCallback+0xb0>)
 80008c8:	f001 fa01 	bl	8001cce <HAL_UART_Receive_IT>
    }
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40013800 	.word	0x40013800
 80008d8:	20000160 	.word	0x20000160
 80008dc:	20000164 	.word	0x20000164
 80008e0:	20000098 	.word	0x20000098
 80008e4:	20000168 	.word	0x20000168

080008e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e8:	f7ff ff08 	bl	80006fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ee:	490c      	ldr	r1, [pc, #48]	; (8000920 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008f0:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a09      	ldr	r2, [pc, #36]	; (8000928 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000904:	4c09      	ldr	r4, [pc, #36]	; (800092c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000912:	f002 f9d3 	bl	8002cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff fd7b 	bl	8000410 <main>
  bx lr
 800091a:	4770      	bx	lr
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000924:	08003274 	.word	0x08003274
  ldr r2, =_sbss
 8000928:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800092c:	20000300 	.word	0x20000300

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>
	...

08000934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_Init+0x28>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_Init+0x28>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f947 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 f808 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff fdce 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f95f 	bl	8000c42 <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f927 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000004 	.word	0x20000004
 80009b8:	2000000c 	.word	0x2000000c
 80009bc:	20000008 	.word	0x20000008

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x1c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x20>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_IncTick+0x20>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	2000000c 	.word	0x2000000c
 80009e0:	200001b0 	.word	0x200001b0

080009e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	200001b0 	.word	0x200001b0

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff fff0 	bl	80009e4 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffe0 	bl	80009e4 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000000c 	.word	0x2000000c

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <__NVIC_EnableIRQ+0x34>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff90 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff2d 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff42 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff90 	bl	8000b30 <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5f 	bl	8000adc <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff35 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffa2 	bl	8000b94 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b085      	sub	sp, #20
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d008      	beq.n	8000c84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2204      	movs	r2, #4
 8000c76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e020      	b.n	8000cc6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 020e 	bic.w	r2, r2, #14
 8000c92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 0201 	bic.w	r2, r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cac:	2101      	movs	r1, #1
 8000cae:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d005      	beq.n	8000cf4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2204      	movs	r2, #4
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e0d6      	b.n	8000ea2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 020e 	bic.w	r2, r2, #14
 8000d02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 0201 	bic.w	r2, r2, #1
 8000d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b64      	ldr	r3, [pc, #400]	; (8000eac <HAL_DMA_Abort_IT+0x1dc>)
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d958      	bls.n	8000dd2 <HAL_DMA_Abort_IT+0x102>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a62      	ldr	r2, [pc, #392]	; (8000eb0 <HAL_DMA_Abort_IT+0x1e0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d04f      	beq.n	8000dca <HAL_DMA_Abort_IT+0xfa>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a61      	ldr	r2, [pc, #388]	; (8000eb4 <HAL_DMA_Abort_IT+0x1e4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d048      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0xf6>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a5f      	ldr	r2, [pc, #380]	; (8000eb8 <HAL_DMA_Abort_IT+0x1e8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d040      	beq.n	8000dc0 <HAL_DMA_Abort_IT+0xf0>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a5e      	ldr	r2, [pc, #376]	; (8000ebc <HAL_DMA_Abort_IT+0x1ec>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d038      	beq.n	8000dba <HAL_DMA_Abort_IT+0xea>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a5c      	ldr	r2, [pc, #368]	; (8000ec0 <HAL_DMA_Abort_IT+0x1f0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d030      	beq.n	8000db4 <HAL_DMA_Abort_IT+0xe4>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a5b      	ldr	r2, [pc, #364]	; (8000ec4 <HAL_DMA_Abort_IT+0x1f4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d028      	beq.n	8000dae <HAL_DMA_Abort_IT+0xde>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a52      	ldr	r2, [pc, #328]	; (8000eac <HAL_DMA_Abort_IT+0x1dc>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d020      	beq.n	8000da8 <HAL_DMA_Abort_IT+0xd8>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a57      	ldr	r2, [pc, #348]	; (8000ec8 <HAL_DMA_Abort_IT+0x1f8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d019      	beq.n	8000da4 <HAL_DMA_Abort_IT+0xd4>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a55      	ldr	r2, [pc, #340]	; (8000ecc <HAL_DMA_Abort_IT+0x1fc>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d012      	beq.n	8000da0 <HAL_DMA_Abort_IT+0xd0>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a54      	ldr	r2, [pc, #336]	; (8000ed0 <HAL_DMA_Abort_IT+0x200>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d00a      	beq.n	8000d9a <HAL_DMA_Abort_IT+0xca>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a52      	ldr	r2, [pc, #328]	; (8000ed4 <HAL_DMA_Abort_IT+0x204>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d102      	bne.n	8000d94 <HAL_DMA_Abort_IT+0xc4>
 8000d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d92:	e01b      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d98:	e018      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9e:	e015      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000da0:	2310      	movs	r3, #16
 8000da2:	e013      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e011      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dac:	e00e      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000dae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000db2:	e00b      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db8:	e008      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbe:	e005      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc4:	e002      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	e000      	b.n	8000dcc <HAL_DMA_Abort_IT+0xfc>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	4a42      	ldr	r2, [pc, #264]	; (8000ed8 <HAL_DMA_Abort_IT+0x208>)
 8000dce:	6053      	str	r3, [r2, #4]
 8000dd0:	e057      	b.n	8000e82 <HAL_DMA_Abort_IT+0x1b2>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a36      	ldr	r2, [pc, #216]	; (8000eb0 <HAL_DMA_Abort_IT+0x1e0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d04f      	beq.n	8000e7c <HAL_DMA_Abort_IT+0x1ac>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <HAL_DMA_Abort_IT+0x1e4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d048      	beq.n	8000e78 <HAL_DMA_Abort_IT+0x1a8>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <HAL_DMA_Abort_IT+0x1e8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d040      	beq.n	8000e72 <HAL_DMA_Abort_IT+0x1a2>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <HAL_DMA_Abort_IT+0x1ec>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d038      	beq.n	8000e6c <HAL_DMA_Abort_IT+0x19c>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a30      	ldr	r2, [pc, #192]	; (8000ec0 <HAL_DMA_Abort_IT+0x1f0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d030      	beq.n	8000e66 <HAL_DMA_Abort_IT+0x196>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <HAL_DMA_Abort_IT+0x1f4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d028      	beq.n	8000e60 <HAL_DMA_Abort_IT+0x190>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a26      	ldr	r2, [pc, #152]	; (8000eac <HAL_DMA_Abort_IT+0x1dc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d020      	beq.n	8000e5a <HAL_DMA_Abort_IT+0x18a>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <HAL_DMA_Abort_IT+0x1f8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d019      	beq.n	8000e56 <HAL_DMA_Abort_IT+0x186>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a29      	ldr	r2, [pc, #164]	; (8000ecc <HAL_DMA_Abort_IT+0x1fc>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d012      	beq.n	8000e52 <HAL_DMA_Abort_IT+0x182>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_DMA_Abort_IT+0x200>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00a      	beq.n	8000e4c <HAL_DMA_Abort_IT+0x17c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <HAL_DMA_Abort_IT+0x204>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d102      	bne.n	8000e46 <HAL_DMA_Abort_IT+0x176>
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	e01b      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4a:	e018      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e50:	e015      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e52:	2310      	movs	r3, #16
 8000e54:	e013      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e011      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e5e:	e00e      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e64:	e00b      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6a:	e008      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	e005      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	e002      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e78:	2310      	movs	r3, #16
 8000e7a:	e000      	b.n	8000e7e <HAL_DMA_Abort_IT+0x1ae>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_DMA_Abort_IT+0x20c>)
 8000e80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	4798      	blx	r3
    } 
  }
  return status;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40020080 	.word	0x40020080
 8000eb0:	40020008 	.word	0x40020008
 8000eb4:	4002001c 	.word	0x4002001c
 8000eb8:	40020030 	.word	0x40020030
 8000ebc:	40020044 	.word	0x40020044
 8000ec0:	40020058 	.word	0x40020058
 8000ec4:	4002006c 	.word	0x4002006c
 8000ec8:	40020408 	.word	0x40020408
 8000ecc:	4002041c 	.word	0x4002041c
 8000ed0:	40020430 	.word	0x40020430
 8000ed4:	40020444 	.word	0x40020444
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020000 	.word	0x40020000

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b08b      	sub	sp, #44	; 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e179      	b.n	80011e8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8168 	bne.w	80011e2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a96      	ldr	r2, [pc, #600]	; (8001170 <HAL_GPIO_Init+0x290>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d05e      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f1c:	4a94      	ldr	r2, [pc, #592]	; (8001170 <HAL_GPIO_Init+0x290>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d875      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f22:	4a94      	ldr	r2, [pc, #592]	; (8001174 <HAL_GPIO_Init+0x294>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d058      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f28:	4a92      	ldr	r2, [pc, #584]	; (8001174 <HAL_GPIO_Init+0x294>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d86f      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f2e:	4a92      	ldr	r2, [pc, #584]	; (8001178 <HAL_GPIO_Init+0x298>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d052      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f34:	4a90      	ldr	r2, [pc, #576]	; (8001178 <HAL_GPIO_Init+0x298>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d869      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f3a:	4a90      	ldr	r2, [pc, #576]	; (800117c <HAL_GPIO_Init+0x29c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d04c      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f40:	4a8e      	ldr	r2, [pc, #568]	; (800117c <HAL_GPIO_Init+0x29c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d863      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f46:	4a8e      	ldr	r2, [pc, #568]	; (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d046      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f4c:	4a8c      	ldr	r2, [pc, #560]	; (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d85d      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d82a      	bhi.n	8000fac <HAL_GPIO_Init+0xcc>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d859      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <HAL_GPIO_Init+0x80>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000fdb 	.word	0x08000fdb
 8000f64:	08000fb5 	.word	0x08000fb5
 8000f68:	08000fc7 	.word	0x08000fc7
 8000f6c:	08001009 	.word	0x08001009
 8000f70:	0800100f 	.word	0x0800100f
 8000f74:	0800100f 	.word	0x0800100f
 8000f78:	0800100f 	.word	0x0800100f
 8000f7c:	0800100f 	.word	0x0800100f
 8000f80:	0800100f 	.word	0x0800100f
 8000f84:	0800100f 	.word	0x0800100f
 8000f88:	0800100f 	.word	0x0800100f
 8000f8c:	0800100f 	.word	0x0800100f
 8000f90:	0800100f 	.word	0x0800100f
 8000f94:	0800100f 	.word	0x0800100f
 8000f98:	0800100f 	.word	0x0800100f
 8000f9c:	0800100f 	.word	0x0800100f
 8000fa0:	0800100f 	.word	0x0800100f
 8000fa4:	08000fbd 	.word	0x08000fbd
 8000fa8:	08000fd1 	.word	0x08000fd1
 8000fac:	4a75      	ldr	r2, [pc, #468]	; (8001184 <HAL_GPIO_Init+0x2a4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fb2:	e02c      	b.n	800100e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e029      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e024      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e01f      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e01a      	b.n	8001010 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	623b      	str	r3, [r7, #32]
          break;
 8000fe6:	e013      	b.n	8001010 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d105      	bne.n	8000ffc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	611a      	str	r2, [r3, #16]
          break;
 8000ffa:	e009      	b.n	8001010 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	615a      	str	r2, [r3, #20]
          break;
 8001006:	e003      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x130>
          break;
 800100e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2bff      	cmp	r3, #255	; 0xff
 8001014:	d801      	bhi.n	800101a <HAL_GPIO_Init+0x13a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e001      	b.n	800101e <HAL_GPIO_Init+0x13e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3304      	adds	r3, #4
 800101e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	; 0xff
 8001024:	d802      	bhi.n	800102c <HAL_GPIO_Init+0x14c>
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	e002      	b.n	8001032 <HAL_GPIO_Init+0x152>
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	3b08      	subs	r3, #8
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	210f      	movs	r1, #15
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	401a      	ands	r2, r3
 8001044:	6a39      	ldr	r1, [r7, #32]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80c1 	beq.w	80011e2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001060:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b46      	ldr	r3, [pc, #280]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001078:	4a44      	ldr	r2, [pc, #272]	; (800118c <HAL_GPIO_Init+0x2ac>)
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a3c      	ldr	r2, [pc, #240]	; (8001190 <HAL_GPIO_Init+0x2b0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d01f      	beq.n	80010e4 <HAL_GPIO_Init+0x204>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <HAL_GPIO_Init+0x2b4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d019      	beq.n	80010e0 <HAL_GPIO_Init+0x200>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3a      	ldr	r2, [pc, #232]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1fc>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a39      	ldr	r2, [pc, #228]	; (800119c <HAL_GPIO_Init+0x2bc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1f8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a38      	ldr	r2, [pc, #224]	; (80011a0 <HAL_GPIO_Init+0x2c0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1f4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a37      	ldr	r2, [pc, #220]	; (80011a4 <HAL_GPIO_Init+0x2c4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1f0>
 80010cc:	2305      	movs	r3, #5
 80010ce:	e00a      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010d0:	2306      	movs	r3, #6
 80010d2:	e008      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010d4:	2304      	movs	r3, #4
 80010d6:	e006      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010d8:	2303      	movs	r3, #3
 80010da:	e004      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010dc:	2302      	movs	r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <HAL_GPIO_Init+0x206>
 80010e4:	2300      	movs	r3, #0
 80010e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e8:	f002 0203 	and.w	r2, r2, #3
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	4093      	lsls	r3, r2
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010f6:	4925      	ldr	r1, [pc, #148]	; (800118c <HAL_GPIO_Init+0x2ac>)
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	4924      	ldr	r1, [pc, #144]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	608b      	str	r3, [r1, #8]
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	43db      	mvns	r3, r3
 8001126:	4920      	ldr	r1, [pc, #128]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001128:	4013      	ands	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	491a      	ldr	r1, [pc, #104]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	60cb      	str	r3, [r1, #12]
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	43db      	mvns	r3, r3
 800114e:	4916      	ldr	r1, [pc, #88]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001150:	4013      	ands	r3, r2
 8001152:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d025      	beq.n	80011ac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4910      	ldr	r1, [pc, #64]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
 800116c:	e025      	b.n	80011ba <HAL_GPIO_Init+0x2da>
 800116e:	bf00      	nop
 8001170:	10320000 	.word	0x10320000
 8001174:	10310000 	.word	0x10310000
 8001178:	10220000 	.word	0x10220000
 800117c:	10210000 	.word	0x10210000
 8001180:	10120000 	.word	0x10120000
 8001184:	10110000 	.word	0x10110000
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000
 8001190:	40010800 	.word	0x40010800
 8001194:	40010c00 	.word	0x40010c00
 8001198:	40011000 	.word	0x40011000
 800119c:	40011400 	.word	0x40011400
 80011a0:	40011800 	.word	0x40011800
 80011a4:	40011c00 	.word	0x40011c00
 80011a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4913      	ldr	r1, [pc, #76]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	43db      	mvns	r3, r3
 80011dc:	4909      	ldr	r1, [pc, #36]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011de:	4013      	ands	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	3301      	adds	r3, #1
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	fa22 f303 	lsr.w	r3, r2, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f47f ae7e 	bne.w	8000ef4 <HAL_GPIO_Init+0x14>
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	372c      	adds	r7, #44	; 0x2c
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40010400 	.word	0x40010400

08001208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e001      	b.n	800122a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]
 8001242:	4613      	mov	r3, r2
 8001244:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001246:	787b      	ldrb	r3, [r7, #1]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124c:	887a      	ldrh	r2, [r7, #2]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001252:	e003      	b.n	800125c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	041a      	lsls	r2, r3, #16
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	611a      	str	r2, [r3, #16]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e034      	b.n	80012e2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001280:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f245 5255 	movw	r2, #21845	; 0x5555
 800128a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6852      	ldr	r2, [r2, #4]
 8001294:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6892      	ldr	r2, [r2, #8]
 800129e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80012a0:	f7ff fba0 	bl	80009e4 <HAL_GetTick>
 80012a4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80012a6:	e00f      	b.n	80012c8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80012a8:	f7ff fb9c 	bl	80009e4 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b27      	cmp	r3, #39	; 0x27
 80012b4:	d908      	bls.n	80012c8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e00c      	b.n	80012e2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e8      	bne.n	80012a8 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80012de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80012fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e272      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 8087 	beq.w	8001436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001328:	4b92      	ldr	r3, [pc, #584]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 030c 	and.w	r3, r3, #12
 8001330:	2b04      	cmp	r3, #4
 8001332:	d00c      	beq.n	800134e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001334:	4b8f      	ldr	r3, [pc, #572]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	d112      	bne.n	8001366 <HAL_RCC_OscConfig+0x5e>
 8001340:	4b8c      	ldr	r3, [pc, #560]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134c:	d10b      	bne.n	8001366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134e:	4b89      	ldr	r3, [pc, #548]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d06c      	beq.n	8001434 <HAL_RCC_OscConfig+0x12c>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d168      	bne.n	8001434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e24c      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x76>
 8001370:	4b80      	ldr	r3, [pc, #512]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a7f      	ldr	r2, [pc, #508]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	e02e      	b.n	80013dc <HAL_RCC_OscConfig+0xd4>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x98>
 8001386:	4b7b      	ldr	r3, [pc, #492]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7a      	ldr	r2, [pc, #488]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 800138c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b78      	ldr	r3, [pc, #480]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a77      	ldr	r2, [pc, #476]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e01d      	b.n	80013dc <HAL_RCC_OscConfig+0xd4>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013a8:	d10c      	bne.n	80013c4 <HAL_RCC_OscConfig+0xbc>
 80013aa:	4b72      	ldr	r3, [pc, #456]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a71      	ldr	r2, [pc, #452]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b6f      	ldr	r3, [pc, #444]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6e      	ldr	r2, [pc, #440]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e00b      	b.n	80013dc <HAL_RCC_OscConfig+0xd4>
 80013c4:	4b6b      	ldr	r3, [pc, #428]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a6a      	ldr	r2, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b68      	ldr	r3, [pc, #416]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a67      	ldr	r2, [pc, #412]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d013      	beq.n	800140c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fafe 	bl	80009e4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fafa 	bl	80009e4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e200      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	4b5d      	ldr	r3, [pc, #372]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0xe4>
 800140a:	e014      	b.n	8001436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff faea 	bl	80009e4 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fae6 	bl	80009e4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e1ec      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	4b53      	ldr	r3, [pc, #332]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x10c>
 8001432:	e000      	b.n	8001436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d063      	beq.n	800150a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001442:	4b4c      	ldr	r3, [pc, #304]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800144e:	4b49      	ldr	r3, [pc, #292]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d11c      	bne.n	8001494 <HAL_RCC_OscConfig+0x18c>
 800145a:	4b46      	ldr	r3, [pc, #280]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d116      	bne.n	8001494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001466:	4b43      	ldr	r3, [pc, #268]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <HAL_RCC_OscConfig+0x176>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d001      	beq.n	800147e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e1c0      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4939      	ldr	r1, [pc, #228]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 800148e:	4313      	orrs	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	e03a      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 800149e:	2201      	movs	r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fa9f 	bl	80009e4 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014aa:	f7ff fa9b 	bl	80009e4 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1a1      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4927      	ldr	r1, [pc, #156]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
 80014dc:	e015      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_RCC_OscConfig+0x270>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fa7e 	bl	80009e4 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ec:	f7ff fa7a 	bl	80009e4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e180      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d03a      	beq.n	800158c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d019      	beq.n	8001552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_RCC_OscConfig+0x274>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001524:	f7ff fa5e 	bl	80009e4 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff fa5a 	bl	80009e4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e160      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_RCC_OscConfig+0x26c>)
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800154a:	2001      	movs	r0, #1
 800154c:	f000 face 	bl	8001aec <RCC_Delay>
 8001550:	e01c      	b.n	800158c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_RCC_OscConfig+0x274>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001558:	f7ff fa44 	bl	80009e4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155e:	e00f      	b.n	8001580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff fa40 	bl	80009e4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d908      	bls.n	8001580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e146      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	42420000 	.word	0x42420000
 800157c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e9      	bne.n	8001560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80a6 	beq.w	80016e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b8b      	ldr	r3, [pc, #556]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10d      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a87      	ldr	r2, [pc, #540]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b85      	ldr	r3, [pc, #532]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	4b82      	ldr	r3, [pc, #520]	; (80017d0 <HAL_RCC_OscConfig+0x4c8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d2:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <HAL_RCC_OscConfig+0x4c8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7e      	ldr	r2, [pc, #504]	; (80017d0 <HAL_RCC_OscConfig+0x4c8>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff fa01 	bl	80009e4 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff f9fd 	bl	80009e4 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b64      	cmp	r3, #100	; 0x64
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e103      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b75      	ldr	r3, [pc, #468]	; (80017d0 <HAL_RCC_OscConfig+0x4c8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x312>
 800160c:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a6e      	ldr	r2, [pc, #440]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	e02d      	b.n	8001676 <HAL_RCC_OscConfig+0x36e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x334>
 8001622:	4b6a      	ldr	r3, [pc, #424]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	4a69      	ldr	r2, [pc, #420]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6213      	str	r3, [r2, #32]
 800162e:	4b67      	ldr	r3, [pc, #412]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	4a66      	ldr	r2, [pc, #408]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	6213      	str	r3, [r2, #32]
 800163a:	e01c      	b.n	8001676 <HAL_RCC_OscConfig+0x36e>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d10c      	bne.n	800165e <HAL_RCC_OscConfig+0x356>
 8001644:	4b61      	ldr	r3, [pc, #388]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a60      	ldr	r2, [pc, #384]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4a5d      	ldr	r2, [pc, #372]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6213      	str	r3, [r2, #32]
 800165c:	e00b      	b.n	8001676 <HAL_RCC_OscConfig+0x36e>
 800165e:	4b5b      	ldr	r3, [pc, #364]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a5a      	ldr	r2, [pc, #360]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	4b58      	ldr	r3, [pc, #352]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a57      	ldr	r2, [pc, #348]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d015      	beq.n	80016aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167e:	f7ff f9b1 	bl	80009e4 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff f9ad 	bl	80009e4 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	; 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e0b1      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	4b4b      	ldr	r3, [pc, #300]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ee      	beq.n	8001686 <HAL_RCC_OscConfig+0x37e>
 80016a8:	e014      	b.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff f99b 	bl	80009e4 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff f997 	bl	80009e4 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e09b      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ee      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8087 	beq.w	80017fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f0:	4b36      	ldr	r3, [pc, #216]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d061      	beq.n	80017c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d146      	bne.n	8001792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001704:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <HAL_RCC_OscConfig+0x4cc>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff f96b 	bl	80009e4 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001712:	f7ff f967 	bl	80009e4 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e06d      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001724:	4b29      	ldr	r3, [pc, #164]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f0      	bne.n	8001712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001738:	d108      	bne.n	800174c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	4921      	ldr	r1, [pc, #132]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a19      	ldr	r1, [r3, #32]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	430b      	orrs	r3, r1
 800175e:	491b      	ldr	r1, [pc, #108]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x4cc>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff f93b 	bl	80009e4 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff f937 	bl	80009e4 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e03d      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x46a>
 8001790:	e035      	b.n	80017fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_RCC_OscConfig+0x4cc>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff f924 	bl	80009e4 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff f920 	bl	80009e4 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e026      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x498>
 80017be:	e01e      	b.n	80017fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d107      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e019      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40007000 	.word	0x40007000
 80017d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_RCC_OscConfig+0x500>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0d0      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d910      	bls.n	8001850 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 0207 	bic.w	r2, r3, #7
 8001836:	4965      	ldr	r1, [pc, #404]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800183e:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0b8      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001872:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001880:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800188a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	494d      	ldr	r1, [pc, #308]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d040      	beq.n	800192c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d115      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e07f      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e073      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06b      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4936      	ldr	r1, [pc, #216]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018fc:	f7ff f872 	bl	80009e4 <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7ff f86e 	bl	80009e4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e053      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 020c 	and.w	r2, r3, #12
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	429a      	cmp	r2, r3
 800192a:	d1eb      	bne.n	8001904 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d210      	bcs.n	800195c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0207 	bic.w	r2, r3, #7
 8001942:	4922      	ldr	r1, [pc, #136]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e032      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4916      	ldr	r1, [pc, #88]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	490e      	ldr	r1, [pc, #56]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	4313      	orrs	r3, r2
 8001998:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800199a:	f000 f821 	bl	80019e0 <HAL_RCC_GetSysClockFreq>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	490a      	ldr	r1, [pc, #40]	; (80019d4 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	5ccb      	ldrb	r3, [r1, r3]
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1cc>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_ClockConfig+0x1d0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe ffd0 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	08003240 	.word	0x08003240
 80019d8:	20000004 	.word	0x20000004
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x94>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x30>
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x36>
 8001a0e:	e027      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a12:	613b      	str	r3, [r7, #16]
      break;
 8001a14:	e027      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	0c9b      	lsrs	r3, r3, #18
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a20:	5cd3      	ldrb	r3, [r2, r3]
 8001a22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d010      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	0c5b      	lsrs	r3, r3, #17
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a42:	fb03 f202 	mul.w	r2, r3, r2
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e004      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	613b      	str	r3, [r7, #16]
      break;
 8001a5e:	e002      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a62:	613b      	str	r3, [r7, #16]
      break;
 8001a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a66:	693b      	ldr	r3, [r7, #16]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	007a1200 	.word	0x007a1200
 8001a7c:	08003258 	.word	0x08003258
 8001a80:	08003268 	.word	0x08003268
 8001a84:	003d0900 	.word	0x003d0900

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b02      	ldr	r3, [pc, #8]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aa0:	f7ff fff2 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	08003250 	.word	0x08003250

08001ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	0adb      	lsrs	r3, r3, #11
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4903      	ldr	r1, [pc, #12]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	08003250 	.word	0x08003250

08001aec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <RCC_Delay+0x34>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <RCC_Delay+0x38>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0a5b      	lsrs	r3, r3, #9
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b08:	bf00      	nop
  }
  while (Delay --);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1e5a      	subs	r2, r3, #1
 8001b0e:	60fa      	str	r2, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f9      	bne.n	8001b08 <RCC_Delay+0x1c>
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	20000004 	.word	0x20000004
 8001b24:	10624dd3 	.word	0x10624dd3

08001b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e042      	b.n	8001bc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7fe fe1c 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2224      	movs	r2, #36	; 0x24
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fdc5 	bl	80026fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b20      	cmp	r3, #32
 8001be6:	d16d      	bne.n	8001cc4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_UART_Transmit+0x2c>
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e066      	b.n	8001cc6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2221      	movs	r2, #33	; 0x21
 8001c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c06:	f7fe feed 	bl	80009e4 <HAL_GetTick>
 8001c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	88fa      	ldrh	r2, [r7, #6]
 8001c10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c20:	d108      	bne.n	8001c34 <HAL_UART_Transmit+0x6c>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d104      	bne.n	8001c34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	e003      	b.n	8001c3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c3c:	e02a      	b.n	8001c94 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2200      	movs	r2, #0
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fb14 	bl	8002276 <UART_WaitOnFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e036      	b.n	8001cc6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10b      	bne.n	8001c76 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	3302      	adds	r3, #2
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	e007      	b.n	8001c86 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1cf      	bne.n	8001c3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2140      	movs	r1, #64	; 0x40
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 fae4 	bl	8002276 <UART_WaitOnFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e006      	b.n	8001cc6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e000      	b.n	8001cc6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001cc4:	2302      	movs	r3, #2
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d112      	bne.n	8001d0e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_UART_Receive_IT+0x26>
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e00b      	b.n	8001d10 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	461a      	mov	r2, r3
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fb24 	bl	8002352 <UART_Start_Receive_IT>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	e000      	b.n	8001d10 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001d0e:	2302      	movs	r3, #2
  }
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0ba      	sub	sp, #232	; 0xe8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10f      	bne.n	8001d7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_UART_IRQHandler+0x66>
 8001d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fc01 	bl	800257e <UART_Receive_IT>
      return;
 8001d7c:	e25b      	b.n	8002236 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80de 	beq.w	8001f44 <HAL_UART_IRQHandler+0x22c>
 8001d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d106      	bne.n	8001da2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80d1 	beq.w	8001f44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_UART_IRQHandler+0xae>
 8001dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_UART_IRQHandler+0xd2>
 8001dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f043 0202 	orr.w	r2, r3, #2
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_UART_IRQHandler+0xf6>
 8001df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f043 0204 	orr.w	r2, r3, #4
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d011      	beq.n	8001e3e <HAL_UART_IRQHandler+0x126>
 8001e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d105      	bne.n	8001e32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f043 0208 	orr.w	r2, r3, #8
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 81f2 	beq.w	800222c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_UART_IRQHandler+0x14e>
 8001e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fb8c 	bl	800257e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf14      	ite	ne
 8001e74:	2301      	movne	r3, #1
 8001e76:	2300      	moveq	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <HAL_UART_IRQHandler+0x17a>
 8001e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d04f      	beq.n	8001f32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fa96 	bl	80023c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d041      	beq.n	8001f2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3314      	adds	r3, #20
 8001eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eb4:	e853 3f00 	ldrex	r3, [r3]
 8001eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3314      	adds	r3, #20
 8001ece:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ed2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001ede:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ee2:	e841 2300 	strex	r3, r2, [r1]
 8001ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1d9      	bne.n	8001ea6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d013      	beq.n	8001f22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	4a7e      	ldr	r2, [pc, #504]	; (80020f8 <HAL_UART_IRQHandler+0x3e0>)
 8001f00:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fee2 	bl	8000cd0 <HAL_DMA_Abort_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f20:	e00e      	b.n	8001f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f993 	bl	800224e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f28:	e00a      	b.n	8001f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f98f 	bl	800224e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f30:	e006      	b.n	8001f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f98b 	bl	800224e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001f3e:	e175      	b.n	800222c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f40:	bf00      	nop
    return;
 8001f42:	e173      	b.n	800222c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	f040 814f 	bne.w	80021ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8148 	beq.w	80021ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8141 	beq.w	80021ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80b6 	beq.w	80020fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8145 	beq.w	8002230 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	f080 813e 	bcs.w	8002230 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	f000 8088 	beq.w	80020d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	330c      	adds	r3, #12
 8001fce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd6:	e853 3f00 	ldrex	r3, [r3]
 8001fda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	330c      	adds	r3, #12
 8001ff0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ff4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002000:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002004:	e841 2300 	strex	r3, r2, [r1]
 8002008:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800200c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1d9      	bne.n	8001fc8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3314      	adds	r3, #20
 800201a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800201e:	e853 3f00 	ldrex	r3, [r3]
 8002022:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002024:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3314      	adds	r3, #20
 8002034:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002038:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800203c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002040:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002044:	e841 2300 	strex	r3, r2, [r1]
 8002048:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800204a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e1      	bne.n	8002014 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3314      	adds	r3, #20
 8002056:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800205a:	e853 3f00 	ldrex	r3, [r3]
 800205e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3314      	adds	r3, #20
 8002070:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002074:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002076:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002078:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800207a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800207c:	e841 2300 	strex	r3, r2, [r1]
 8002080:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e3      	bne.n	8002050 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	330c      	adds	r3, #12
 800209c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a0:	e853 3f00 	ldrex	r3, [r3]
 80020a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a8:	f023 0310 	bic.w	r3, r3, #16
 80020ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	330c      	adds	r3, #12
 80020b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80020bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020c2:	e841 2300 	strex	r3, r2, [r1]
 80020c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e3      	bne.n	8002096 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fdc1 	bl	8000c5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8b6 	bl	8002260 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020f4:	e09c      	b.n	8002230 <HAL_UART_IRQHandler+0x518>
 80020f6:	bf00      	nop
 80020f8:	08002489 	.word	0x08002489
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002104:	b29b      	uxth	r3, r3
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 808e 	beq.w	8002234 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8089 	beq.w	8002234 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	330c      	adds	r3, #12
 8002128:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212c:	e853 3f00 	ldrex	r3, [r3]
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002138:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	330c      	adds	r3, #12
 8002142:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002146:	647a      	str	r2, [r7, #68]	; 0x44
 8002148:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800214c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800214e:	e841 2300 	strex	r3, r2, [r1]
 8002152:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1e3      	bne.n	8002122 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3314      	adds	r3, #20
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	e853 3f00 	ldrex	r3, [r3]
 8002168:	623b      	str	r3, [r7, #32]
   return(result);
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3314      	adds	r3, #20
 800217a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800217e:	633a      	str	r2, [r7, #48]	; 0x30
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002186:	e841 2300 	strex	r3, r2, [r1]
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1e3      	bne.n	800215a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	330c      	adds	r3, #12
 80021a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	e853 3f00 	ldrex	r3, [r3]
 80021ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0310 	bic.w	r3, r3, #16
 80021b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	330c      	adds	r3, #12
 80021c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021c4:	61fa      	str	r2, [r7, #28]
 80021c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c8:	69b9      	ldr	r1, [r7, #24]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	e841 2300 	strex	r3, r2, [r1]
 80021d0:	617b      	str	r3, [r7, #20]
   return(result);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e3      	bne.n	80021a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f83b 	bl	8002260 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021ea:	e023      	b.n	8002234 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <HAL_UART_IRQHandler+0x4f4>
 80021f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f953 	bl	80024b0 <UART_Transmit_IT>
    return;
 800220a:	e014      	b.n	8002236 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800220c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00e      	beq.n	8002236 <HAL_UART_IRQHandler+0x51e>
 8002218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800221c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f992 	bl	800254e <UART_EndTransmit_IT>
    return;
 800222a:	e004      	b.n	8002236 <HAL_UART_IRQHandler+0x51e>
    return;
 800222c:	bf00      	nop
 800222e:	e002      	b.n	8002236 <HAL_UART_IRQHandler+0x51e>
      return;
 8002230:	bf00      	nop
 8002232:	e000      	b.n	8002236 <HAL_UART_IRQHandler+0x51e>
      return;
 8002234:	bf00      	nop
  }
}
 8002236:	37e8      	adds	r7, #232	; 0xe8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b090      	sub	sp, #64	; 0x40
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	4613      	mov	r3, r2
 8002284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002286:	e050      	b.n	800232a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228e:	d04c      	beq.n	800232a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002296:	f7fe fba5 	bl	80009e4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d241      	bcs.n	800232a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	330c      	adds	r3, #12
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	e853 3f00 	ldrex	r3, [r3]
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022c6:	637a      	str	r2, [r7, #52]	; 0x34
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ce:	e841 2300 	strex	r3, r2, [r1]
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e5      	bne.n	80022a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3314      	adds	r3, #20
 80022e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	e853 3f00 	ldrex	r3, [r3]
 80022e8:	613b      	str	r3, [r7, #16]
   return(result);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3314      	adds	r3, #20
 80022f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022fa:	623a      	str	r2, [r7, #32]
 80022fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022fe:	69f9      	ldr	r1, [r7, #28]
 8002300:	6a3a      	ldr	r2, [r7, #32]
 8002302:	e841 2300 	strex	r3, r2, [r1]
 8002306:	61bb      	str	r3, [r7, #24]
   return(result);
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1e5      	bne.n	80022da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e00f      	b.n	800234a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4013      	ands	r3, r2
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	bf0c      	ite	eq
 800233a:	2301      	moveq	r3, #1
 800233c:	2300      	movne	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	429a      	cmp	r2, r3
 8002346:	d09f      	beq.n	8002288 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3740      	adds	r7, #64	; 0x40
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	4613      	mov	r3, r2
 800235e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	88fa      	ldrh	r2, [r7, #6]
 8002370:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2222      	movs	r2, #34	; 0x22
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002396:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0220 	orr.w	r2, r2, #32
 80023b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b095      	sub	sp, #84	; 0x54
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	330c      	adds	r3, #12
 80023d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d6:	e853 3f00 	ldrex	r3, [r3]
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023ec:	643a      	str	r2, [r7, #64]	; 0x40
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023f4:	e841 2300 	strex	r3, r2, [r1]
 80023f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e5      	bne.n	80023cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3314      	adds	r3, #20
 8002406:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	e853 3f00 	ldrex	r3, [r3]
 800240e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	64bb      	str	r3, [r7, #72]	; 0x48
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3314      	adds	r3, #20
 800241e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002420:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002428:	e841 2300 	strex	r3, r2, [r1]
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1e5      	bne.n	8002400 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	2b01      	cmp	r3, #1
 800243a:	d119      	bne.n	8002470 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	330c      	adds	r3, #12
 8002442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	e853 3f00 	ldrex	r3, [r3]
 800244a:	60bb      	str	r3, [r7, #8]
   return(result);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f023 0310 	bic.w	r3, r3, #16
 8002452:	647b      	str	r3, [r7, #68]	; 0x44
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	330c      	adds	r3, #12
 800245a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800245c:	61ba      	str	r2, [r7, #24]
 800245e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002460:	6979      	ldr	r1, [r7, #20]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	e841 2300 	strex	r3, r2, [r1]
 8002468:	613b      	str	r3, [r7, #16]
   return(result);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e5      	bne.n	800243c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800247e:	bf00      	nop
 8002480:	3754      	adds	r7, #84	; 0x54
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f7ff fed3 	bl	800224e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b21      	cmp	r3, #33	; 0x21
 80024c2:	d13e      	bne.n	8002542 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024cc:	d114      	bne.n	80024f8 <UART_Transmit_IT+0x48>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d110      	bne.n	80024f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	1c9a      	adds	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	621a      	str	r2, [r3, #32]
 80024f6:	e008      	b.n	800250a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	1c59      	adds	r1, r3, #1
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6211      	str	r1, [r2, #32]
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29b      	uxth	r3, r3
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4619      	mov	r1, r3
 8002518:	84d1      	strh	r1, [r2, #38]	; 0x26
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800252c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800253c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002542:	2302      	movs	r3, #2
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002564:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fe64 	bl	800223c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b08c      	sub	sp, #48	; 0x30
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b22      	cmp	r3, #34	; 0x22
 8002590:	f040 80ae 	bne.w	80026f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259c:	d117      	bne.n	80025ce <UART_Receive_IT+0x50>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d113      	bne.n	80025ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025bc:	b29a      	uxth	r2, r3
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	1c9a      	adds	r2, r3, #2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
 80025cc:	e026      	b.n	800261c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e0:	d007      	beq.n	80025f2 <UART_Receive_IT+0x74>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10a      	bne.n	8002600 <UART_Receive_IT+0x82>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e008      	b.n	8002612 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800260c:	b2da      	uxtb	r2, r3
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29b      	uxth	r3, r3
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4619      	mov	r1, r3
 800262a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800262c:	2b00      	cmp	r3, #0
 800262e:	d15d      	bne.n	80026ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0220 	bic.w	r2, r2, #32
 800263e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	2b01      	cmp	r3, #1
 8002674:	d135      	bne.n	80026e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	330c      	adds	r3, #12
 8002682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	e853 3f00 	ldrex	r3, [r3]
 800268a:	613b      	str	r3, [r7, #16]
   return(result);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f023 0310 	bic.w	r3, r3, #16
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	330c      	adds	r3, #12
 800269a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269c:	623a      	str	r2, [r7, #32]
 800269e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a0:	69f9      	ldr	r1, [r7, #28]
 80026a2:	6a3a      	ldr	r2, [r7, #32]
 80026a4:	e841 2300 	strex	r3, r2, [r1]
 80026a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1e5      	bne.n	800267c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d10a      	bne.n	80026d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff fdc0 	bl	8002260 <HAL_UARTEx_RxEventCallback>
 80026e0:	e002      	b.n	80026e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe f8a6 	bl	8000834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e002      	b.n	80026f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e000      	b.n	80026f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026f0:	2302      	movs	r3, #2
  }
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3730      	adds	r7, #48	; 0x30
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002736:	f023 030c 	bic.w	r3, r3, #12
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	430b      	orrs	r3, r1
 8002742:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <UART_SetConfig+0x114>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d103      	bne.n	800276c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002764:	f7ff f9ae 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	e002      	b.n	8002772 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800276c:	f7ff f996 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8002770:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009a      	lsls	r2, r3, #2
 800277c:	441a      	add	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	4a22      	ldr	r2, [pc, #136]	; (8002814 <UART_SetConfig+0x118>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	0119      	lsls	r1, r3, #4
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	009a      	lsls	r2, r3, #2
 800279c:	441a      	add	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027a8:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <UART_SetConfig+0x118>)
 80027aa:	fba3 0302 	umull	r0, r3, r3, r2
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2064      	movs	r0, #100	; 0x64
 80027b2:	fb00 f303 	mul.w	r3, r0, r3
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	3332      	adds	r3, #50	; 0x32
 80027bc:	4a15      	ldr	r2, [pc, #84]	; (8002814 <UART_SetConfig+0x118>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c8:	4419      	add	r1, r3
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009a      	lsls	r2, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <UART_SetConfig+0x118>)
 80027e2:	fba3 0302 	umull	r0, r3, r3, r2
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2064      	movs	r0, #100	; 0x64
 80027ea:	fb00 f303 	mul.w	r3, r0, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	3332      	adds	r3, #50	; 0x32
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <UART_SetConfig+0x118>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	440a      	add	r2, r1
 8002806:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40013800 	.word	0x40013800
 8002814:	51eb851f 	.word	0x51eb851f

08002818 <std>:
 8002818:	2300      	movs	r3, #0
 800281a:	b510      	push	{r4, lr}
 800281c:	4604      	mov	r4, r0
 800281e:	e9c0 3300 	strd	r3, r3, [r0]
 8002822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002826:	6083      	str	r3, [r0, #8]
 8002828:	8181      	strh	r1, [r0, #12]
 800282a:	6643      	str	r3, [r0, #100]	; 0x64
 800282c:	81c2      	strh	r2, [r0, #14]
 800282e:	6183      	str	r3, [r0, #24]
 8002830:	4619      	mov	r1, r3
 8002832:	2208      	movs	r2, #8
 8002834:	305c      	adds	r0, #92	; 0x5c
 8002836:	f000 f9ed 	bl	8002c14 <memset>
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <std+0x58>)
 800283c:	6224      	str	r4, [r4, #32]
 800283e:	6263      	str	r3, [r4, #36]	; 0x24
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <std+0x5c>)
 8002842:	62a3      	str	r3, [r4, #40]	; 0x28
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <std+0x60>)
 8002846:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <std+0x64>)
 800284a:	6323      	str	r3, [r4, #48]	; 0x30
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <std+0x68>)
 800284e:	429c      	cmp	r4, r3
 8002850:	d006      	beq.n	8002860 <std+0x48>
 8002852:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002856:	4294      	cmp	r4, r2
 8002858:	d002      	beq.n	8002860 <std+0x48>
 800285a:	33d0      	adds	r3, #208	; 0xd0
 800285c:	429c      	cmp	r4, r3
 800285e:	d105      	bne.n	800286c <std+0x54>
 8002860:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002868:	f000 ba4c 	b.w	8002d04 <__retarget_lock_init_recursive>
 800286c:	bd10      	pop	{r4, pc}
 800286e:	bf00      	nop
 8002870:	08002a65 	.word	0x08002a65
 8002874:	08002a87 	.word	0x08002a87
 8002878:	08002abf 	.word	0x08002abf
 800287c:	08002ae3 	.word	0x08002ae3
 8002880:	200001b4 	.word	0x200001b4

08002884 <stdio_exit_handler>:
 8002884:	4a02      	ldr	r2, [pc, #8]	; (8002890 <stdio_exit_handler+0xc>)
 8002886:	4903      	ldr	r1, [pc, #12]	; (8002894 <stdio_exit_handler+0x10>)
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <stdio_exit_handler+0x14>)
 800288a:	f000 b869 	b.w	8002960 <_fwalk_sglue>
 800288e:	bf00      	nop
 8002890:	20000010 	.word	0x20000010
 8002894:	08002ff9 	.word	0x08002ff9
 8002898:	2000001c 	.word	0x2000001c

0800289c <cleanup_stdio>:
 800289c:	6841      	ldr	r1, [r0, #4]
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <cleanup_stdio+0x34>)
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4299      	cmp	r1, r3
 80028a4:	4604      	mov	r4, r0
 80028a6:	d001      	beq.n	80028ac <cleanup_stdio+0x10>
 80028a8:	f000 fba6 	bl	8002ff8 <_fflush_r>
 80028ac:	68a1      	ldr	r1, [r4, #8]
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <cleanup_stdio+0x38>)
 80028b0:	4299      	cmp	r1, r3
 80028b2:	d002      	beq.n	80028ba <cleanup_stdio+0x1e>
 80028b4:	4620      	mov	r0, r4
 80028b6:	f000 fb9f 	bl	8002ff8 <_fflush_r>
 80028ba:	68e1      	ldr	r1, [r4, #12]
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <cleanup_stdio+0x3c>)
 80028be:	4299      	cmp	r1, r3
 80028c0:	d004      	beq.n	80028cc <cleanup_stdio+0x30>
 80028c2:	4620      	mov	r0, r4
 80028c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028c8:	f000 bb96 	b.w	8002ff8 <_fflush_r>
 80028cc:	bd10      	pop	{r4, pc}
 80028ce:	bf00      	nop
 80028d0:	200001b4 	.word	0x200001b4
 80028d4:	2000021c 	.word	0x2000021c
 80028d8:	20000284 	.word	0x20000284

080028dc <global_stdio_init.part.0>:
 80028dc:	b510      	push	{r4, lr}
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <global_stdio_init.part.0+0x30>)
 80028e0:	4c0b      	ldr	r4, [pc, #44]	; (8002910 <global_stdio_init.part.0+0x34>)
 80028e2:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <global_stdio_init.part.0+0x38>)
 80028e4:	4620      	mov	r0, r4
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	2104      	movs	r1, #4
 80028ea:	2200      	movs	r2, #0
 80028ec:	f7ff ff94 	bl	8002818 <std>
 80028f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80028f4:	2201      	movs	r2, #1
 80028f6:	2109      	movs	r1, #9
 80028f8:	f7ff ff8e 	bl	8002818 <std>
 80028fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002900:	2202      	movs	r2, #2
 8002902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002906:	2112      	movs	r1, #18
 8002908:	f7ff bf86 	b.w	8002818 <std>
 800290c:	200002ec 	.word	0x200002ec
 8002910:	200001b4 	.word	0x200001b4
 8002914:	08002885 	.word	0x08002885

08002918 <__sfp_lock_acquire>:
 8002918:	4801      	ldr	r0, [pc, #4]	; (8002920 <__sfp_lock_acquire+0x8>)
 800291a:	f000 b9f4 	b.w	8002d06 <__retarget_lock_acquire_recursive>
 800291e:	bf00      	nop
 8002920:	200002f5 	.word	0x200002f5

08002924 <__sfp_lock_release>:
 8002924:	4801      	ldr	r0, [pc, #4]	; (800292c <__sfp_lock_release+0x8>)
 8002926:	f000 b9ef 	b.w	8002d08 <__retarget_lock_release_recursive>
 800292a:	bf00      	nop
 800292c:	200002f5 	.word	0x200002f5

08002930 <__sinit>:
 8002930:	b510      	push	{r4, lr}
 8002932:	4604      	mov	r4, r0
 8002934:	f7ff fff0 	bl	8002918 <__sfp_lock_acquire>
 8002938:	6a23      	ldr	r3, [r4, #32]
 800293a:	b11b      	cbz	r3, 8002944 <__sinit+0x14>
 800293c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002940:	f7ff bff0 	b.w	8002924 <__sfp_lock_release>
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <__sinit+0x28>)
 8002946:	6223      	str	r3, [r4, #32]
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <__sinit+0x2c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f5      	bne.n	800293c <__sinit+0xc>
 8002950:	f7ff ffc4 	bl	80028dc <global_stdio_init.part.0>
 8002954:	e7f2      	b.n	800293c <__sinit+0xc>
 8002956:	bf00      	nop
 8002958:	0800289d 	.word	0x0800289d
 800295c:	200002ec 	.word	0x200002ec

08002960 <_fwalk_sglue>:
 8002960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002964:	4607      	mov	r7, r0
 8002966:	4688      	mov	r8, r1
 8002968:	4614      	mov	r4, r2
 800296a:	2600      	movs	r6, #0
 800296c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002970:	f1b9 0901 	subs.w	r9, r9, #1
 8002974:	d505      	bpl.n	8002982 <_fwalk_sglue+0x22>
 8002976:	6824      	ldr	r4, [r4, #0]
 8002978:	2c00      	cmp	r4, #0
 800297a:	d1f7      	bne.n	800296c <_fwalk_sglue+0xc>
 800297c:	4630      	mov	r0, r6
 800297e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002982:	89ab      	ldrh	r3, [r5, #12]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d907      	bls.n	8002998 <_fwalk_sglue+0x38>
 8002988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800298c:	3301      	adds	r3, #1
 800298e:	d003      	beq.n	8002998 <_fwalk_sglue+0x38>
 8002990:	4629      	mov	r1, r5
 8002992:	4638      	mov	r0, r7
 8002994:	47c0      	blx	r8
 8002996:	4306      	orrs	r6, r0
 8002998:	3568      	adds	r5, #104	; 0x68
 800299a:	e7e9      	b.n	8002970 <_fwalk_sglue+0x10>

0800299c <putchar>:
 800299c:	4b02      	ldr	r3, [pc, #8]	; (80029a8 <putchar+0xc>)
 800299e:	4601      	mov	r1, r0
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	6882      	ldr	r2, [r0, #8]
 80029a4:	f000 bbb1 	b.w	800310a <_putc_r>
 80029a8:	20000068 	.word	0x20000068

080029ac <_puts_r>:
 80029ac:	6a03      	ldr	r3, [r0, #32]
 80029ae:	b570      	push	{r4, r5, r6, lr}
 80029b0:	4605      	mov	r5, r0
 80029b2:	460e      	mov	r6, r1
 80029b4:	6884      	ldr	r4, [r0, #8]
 80029b6:	b90b      	cbnz	r3, 80029bc <_puts_r+0x10>
 80029b8:	f7ff ffba 	bl	8002930 <__sinit>
 80029bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029be:	07db      	lsls	r3, r3, #31
 80029c0:	d405      	bmi.n	80029ce <_puts_r+0x22>
 80029c2:	89a3      	ldrh	r3, [r4, #12]
 80029c4:	0598      	lsls	r0, r3, #22
 80029c6:	d402      	bmi.n	80029ce <_puts_r+0x22>
 80029c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ca:	f000 f99c 	bl	8002d06 <__retarget_lock_acquire_recursive>
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	0719      	lsls	r1, r3, #28
 80029d2:	d513      	bpl.n	80029fc <_puts_r+0x50>
 80029d4:	6923      	ldr	r3, [r4, #16]
 80029d6:	b18b      	cbz	r3, 80029fc <_puts_r+0x50>
 80029d8:	3e01      	subs	r6, #1
 80029da:	68a3      	ldr	r3, [r4, #8]
 80029dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029e0:	3b01      	subs	r3, #1
 80029e2:	60a3      	str	r3, [r4, #8]
 80029e4:	b9e9      	cbnz	r1, 8002a22 <_puts_r+0x76>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	da2e      	bge.n	8002a48 <_puts_r+0x9c>
 80029ea:	4622      	mov	r2, r4
 80029ec:	210a      	movs	r1, #10
 80029ee:	4628      	mov	r0, r5
 80029f0:	f000 f87b 	bl	8002aea <__swbuf_r>
 80029f4:	3001      	adds	r0, #1
 80029f6:	d007      	beq.n	8002a08 <_puts_r+0x5c>
 80029f8:	250a      	movs	r5, #10
 80029fa:	e007      	b.n	8002a0c <_puts_r+0x60>
 80029fc:	4621      	mov	r1, r4
 80029fe:	4628      	mov	r0, r5
 8002a00:	f000 f8b0 	bl	8002b64 <__swsetup_r>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d0e7      	beq.n	80029d8 <_puts_r+0x2c>
 8002a08:	f04f 35ff 	mov.w	r5, #4294967295
 8002a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a0e:	07da      	lsls	r2, r3, #31
 8002a10:	d405      	bmi.n	8002a1e <_puts_r+0x72>
 8002a12:	89a3      	ldrh	r3, [r4, #12]
 8002a14:	059b      	lsls	r3, r3, #22
 8002a16:	d402      	bmi.n	8002a1e <_puts_r+0x72>
 8002a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a1a:	f000 f975 	bl	8002d08 <__retarget_lock_release_recursive>
 8002a1e:	4628      	mov	r0, r5
 8002a20:	bd70      	pop	{r4, r5, r6, pc}
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	da04      	bge.n	8002a30 <_puts_r+0x84>
 8002a26:	69a2      	ldr	r2, [r4, #24]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dc06      	bgt.n	8002a3a <_puts_r+0x8e>
 8002a2c:	290a      	cmp	r1, #10
 8002a2e:	d004      	beq.n	8002a3a <_puts_r+0x8e>
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	6022      	str	r2, [r4, #0]
 8002a36:	7019      	strb	r1, [r3, #0]
 8002a38:	e7cf      	b.n	80029da <_puts_r+0x2e>
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	f000 f854 	bl	8002aea <__swbuf_r>
 8002a42:	3001      	adds	r0, #1
 8002a44:	d1c9      	bne.n	80029da <_puts_r+0x2e>
 8002a46:	e7df      	b.n	8002a08 <_puts_r+0x5c>
 8002a48:	250a      	movs	r5, #10
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	6022      	str	r2, [r4, #0]
 8002a50:	701d      	strb	r5, [r3, #0]
 8002a52:	e7db      	b.n	8002a0c <_puts_r+0x60>

08002a54 <puts>:
 8002a54:	4b02      	ldr	r3, [pc, #8]	; (8002a60 <puts+0xc>)
 8002a56:	4601      	mov	r1, r0
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	f7ff bfa7 	b.w	80029ac <_puts_r>
 8002a5e:	bf00      	nop
 8002a60:	20000068 	.word	0x20000068

08002a64 <__sread>:
 8002a64:	b510      	push	{r4, lr}
 8002a66:	460c      	mov	r4, r1
 8002a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a6c:	f000 f8fc 	bl	8002c68 <_read_r>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	bfab      	itete	ge
 8002a74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a76:	89a3      	ldrhlt	r3, [r4, #12]
 8002a78:	181b      	addge	r3, r3, r0
 8002a7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a7e:	bfac      	ite	ge
 8002a80:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a82:	81a3      	strhlt	r3, [r4, #12]
 8002a84:	bd10      	pop	{r4, pc}

08002a86 <__swrite>:
 8002a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a8a:	461f      	mov	r7, r3
 8002a8c:	898b      	ldrh	r3, [r1, #12]
 8002a8e:	4605      	mov	r5, r0
 8002a90:	05db      	lsls	r3, r3, #23
 8002a92:	460c      	mov	r4, r1
 8002a94:	4616      	mov	r6, r2
 8002a96:	d505      	bpl.n	8002aa4 <__swrite+0x1e>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aa0:	f000 f8d0 	bl	8002c44 <_lseek_r>
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	4632      	mov	r2, r6
 8002aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aac:	81a3      	strh	r3, [r4, #12]
 8002aae:	4628      	mov	r0, r5
 8002ab0:	463b      	mov	r3, r7
 8002ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aba:	f000 b8e7 	b.w	8002c8c <_write_r>

08002abe <__sseek>:
 8002abe:	b510      	push	{r4, lr}
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ac6:	f000 f8bd 	bl	8002c44 <_lseek_r>
 8002aca:	1c43      	adds	r3, r0, #1
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	bf15      	itete	ne
 8002ad0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ada:	81a3      	strheq	r3, [r4, #12]
 8002adc:	bf18      	it	ne
 8002ade:	81a3      	strhne	r3, [r4, #12]
 8002ae0:	bd10      	pop	{r4, pc}

08002ae2 <__sclose>:
 8002ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae6:	f000 b89d 	b.w	8002c24 <_close_r>

08002aea <__swbuf_r>:
 8002aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aec:	460e      	mov	r6, r1
 8002aee:	4614      	mov	r4, r2
 8002af0:	4605      	mov	r5, r0
 8002af2:	b118      	cbz	r0, 8002afc <__swbuf_r+0x12>
 8002af4:	6a03      	ldr	r3, [r0, #32]
 8002af6:	b90b      	cbnz	r3, 8002afc <__swbuf_r+0x12>
 8002af8:	f7ff ff1a 	bl	8002930 <__sinit>
 8002afc:	69a3      	ldr	r3, [r4, #24]
 8002afe:	60a3      	str	r3, [r4, #8]
 8002b00:	89a3      	ldrh	r3, [r4, #12]
 8002b02:	071a      	lsls	r2, r3, #28
 8002b04:	d525      	bpl.n	8002b52 <__swbuf_r+0x68>
 8002b06:	6923      	ldr	r3, [r4, #16]
 8002b08:	b31b      	cbz	r3, 8002b52 <__swbuf_r+0x68>
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	6922      	ldr	r2, [r4, #16]
 8002b0e:	b2f6      	uxtb	r6, r6
 8002b10:	1a98      	subs	r0, r3, r2
 8002b12:	6963      	ldr	r3, [r4, #20]
 8002b14:	4637      	mov	r7, r6
 8002b16:	4283      	cmp	r3, r0
 8002b18:	dc04      	bgt.n	8002b24 <__swbuf_r+0x3a>
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f000 fa6b 	bl	8002ff8 <_fflush_r>
 8002b22:	b9e0      	cbnz	r0, 8002b5e <__swbuf_r+0x74>
 8002b24:	68a3      	ldr	r3, [r4, #8]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	60a3      	str	r3, [r4, #8]
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	6022      	str	r2, [r4, #0]
 8002b30:	701e      	strb	r6, [r3, #0]
 8002b32:	6962      	ldr	r2, [r4, #20]
 8002b34:	1c43      	adds	r3, r0, #1
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d004      	beq.n	8002b44 <__swbuf_r+0x5a>
 8002b3a:	89a3      	ldrh	r3, [r4, #12]
 8002b3c:	07db      	lsls	r3, r3, #31
 8002b3e:	d506      	bpl.n	8002b4e <__swbuf_r+0x64>
 8002b40:	2e0a      	cmp	r6, #10
 8002b42:	d104      	bne.n	8002b4e <__swbuf_r+0x64>
 8002b44:	4621      	mov	r1, r4
 8002b46:	4628      	mov	r0, r5
 8002b48:	f000 fa56 	bl	8002ff8 <_fflush_r>
 8002b4c:	b938      	cbnz	r0, 8002b5e <__swbuf_r+0x74>
 8002b4e:	4638      	mov	r0, r7
 8002b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b52:	4621      	mov	r1, r4
 8002b54:	4628      	mov	r0, r5
 8002b56:	f000 f805 	bl	8002b64 <__swsetup_r>
 8002b5a:	2800      	cmp	r0, #0
 8002b5c:	d0d5      	beq.n	8002b0a <__swbuf_r+0x20>
 8002b5e:	f04f 37ff 	mov.w	r7, #4294967295
 8002b62:	e7f4      	b.n	8002b4e <__swbuf_r+0x64>

08002b64 <__swsetup_r>:
 8002b64:	b538      	push	{r3, r4, r5, lr}
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <__swsetup_r+0xac>)
 8002b68:	4605      	mov	r5, r0
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	b118      	cbz	r0, 8002b78 <__swsetup_r+0x14>
 8002b70:	6a03      	ldr	r3, [r0, #32]
 8002b72:	b90b      	cbnz	r3, 8002b78 <__swsetup_r+0x14>
 8002b74:	f7ff fedc 	bl	8002930 <__sinit>
 8002b78:	89a3      	ldrh	r3, [r4, #12]
 8002b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b7e:	0718      	lsls	r0, r3, #28
 8002b80:	d422      	bmi.n	8002bc8 <__swsetup_r+0x64>
 8002b82:	06d9      	lsls	r1, r3, #27
 8002b84:	d407      	bmi.n	8002b96 <__swsetup_r+0x32>
 8002b86:	2309      	movs	r3, #9
 8002b88:	602b      	str	r3, [r5, #0]
 8002b8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b92:	81a3      	strh	r3, [r4, #12]
 8002b94:	e034      	b.n	8002c00 <__swsetup_r+0x9c>
 8002b96:	0758      	lsls	r0, r3, #29
 8002b98:	d512      	bpl.n	8002bc0 <__swsetup_r+0x5c>
 8002b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b9c:	b141      	cbz	r1, 8002bb0 <__swsetup_r+0x4c>
 8002b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ba2:	4299      	cmp	r1, r3
 8002ba4:	d002      	beq.n	8002bac <__swsetup_r+0x48>
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	f000 f8b0 	bl	8002d0c <_free_r>
 8002bac:	2300      	movs	r3, #0
 8002bae:	6363      	str	r3, [r4, #52]	; 0x34
 8002bb0:	89a3      	ldrh	r3, [r4, #12]
 8002bb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002bb6:	81a3      	strh	r3, [r4, #12]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6063      	str	r3, [r4, #4]
 8002bbc:	6923      	ldr	r3, [r4, #16]
 8002bbe:	6023      	str	r3, [r4, #0]
 8002bc0:	89a3      	ldrh	r3, [r4, #12]
 8002bc2:	f043 0308 	orr.w	r3, r3, #8
 8002bc6:	81a3      	strh	r3, [r4, #12]
 8002bc8:	6923      	ldr	r3, [r4, #16]
 8002bca:	b94b      	cbnz	r3, 8002be0 <__swsetup_r+0x7c>
 8002bcc:	89a3      	ldrh	r3, [r4, #12]
 8002bce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd6:	d003      	beq.n	8002be0 <__swsetup_r+0x7c>
 8002bd8:	4621      	mov	r1, r4
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f000 fa59 	bl	8003092 <__smakebuf_r>
 8002be0:	89a0      	ldrh	r0, [r4, #12]
 8002be2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002be6:	f010 0301 	ands.w	r3, r0, #1
 8002bea:	d00a      	beq.n	8002c02 <__swsetup_r+0x9e>
 8002bec:	2300      	movs	r3, #0
 8002bee:	60a3      	str	r3, [r4, #8]
 8002bf0:	6963      	ldr	r3, [r4, #20]
 8002bf2:	425b      	negs	r3, r3
 8002bf4:	61a3      	str	r3, [r4, #24]
 8002bf6:	6923      	ldr	r3, [r4, #16]
 8002bf8:	b943      	cbnz	r3, 8002c0c <__swsetup_r+0xa8>
 8002bfa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002bfe:	d1c4      	bne.n	8002b8a <__swsetup_r+0x26>
 8002c00:	bd38      	pop	{r3, r4, r5, pc}
 8002c02:	0781      	lsls	r1, r0, #30
 8002c04:	bf58      	it	pl
 8002c06:	6963      	ldrpl	r3, [r4, #20]
 8002c08:	60a3      	str	r3, [r4, #8]
 8002c0a:	e7f4      	b.n	8002bf6 <__swsetup_r+0x92>
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	e7f7      	b.n	8002c00 <__swsetup_r+0x9c>
 8002c10:	20000068 	.word	0x20000068

08002c14 <memset>:
 8002c14:	4603      	mov	r3, r0
 8002c16:	4402      	add	r2, r0
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <memset+0xa>
 8002c1c:	4770      	bx	lr
 8002c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c22:	e7f9      	b.n	8002c18 <memset+0x4>

08002c24 <_close_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	2300      	movs	r3, #0
 8002c28:	4d05      	ldr	r5, [pc, #20]	; (8002c40 <_close_r+0x1c>)
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	602b      	str	r3, [r5, #0]
 8002c30:	f7fd fcfd 	bl	800062e <_close>
 8002c34:	1c43      	adds	r3, r0, #1
 8002c36:	d102      	bne.n	8002c3e <_close_r+0x1a>
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	b103      	cbz	r3, 8002c3e <_close_r+0x1a>
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	bd38      	pop	{r3, r4, r5, pc}
 8002c40:	200002f0 	.word	0x200002f0

08002c44 <_lseek_r>:
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	4604      	mov	r4, r0
 8002c48:	4608      	mov	r0, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	4d05      	ldr	r5, [pc, #20]	; (8002c64 <_lseek_r+0x20>)
 8002c50:	602a      	str	r2, [r5, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	f7fd fd0f 	bl	8000676 <_lseek>
 8002c58:	1c43      	adds	r3, r0, #1
 8002c5a:	d102      	bne.n	8002c62 <_lseek_r+0x1e>
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	b103      	cbz	r3, 8002c62 <_lseek_r+0x1e>
 8002c60:	6023      	str	r3, [r4, #0]
 8002c62:	bd38      	pop	{r3, r4, r5, pc}
 8002c64:	200002f0 	.word	0x200002f0

08002c68 <_read_r>:
 8002c68:	b538      	push	{r3, r4, r5, lr}
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	2200      	movs	r2, #0
 8002c72:	4d05      	ldr	r5, [pc, #20]	; (8002c88 <_read_r+0x20>)
 8002c74:	602a      	str	r2, [r5, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f7fd fca0 	bl	80005bc <_read>
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	d102      	bne.n	8002c86 <_read_r+0x1e>
 8002c80:	682b      	ldr	r3, [r5, #0]
 8002c82:	b103      	cbz	r3, 8002c86 <_read_r+0x1e>
 8002c84:	6023      	str	r3, [r4, #0]
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	200002f0 	.word	0x200002f0

08002c8c <_write_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4604      	mov	r4, r0
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	2200      	movs	r2, #0
 8002c96:	4d05      	ldr	r5, [pc, #20]	; (8002cac <_write_r+0x20>)
 8002c98:	602a      	str	r2, [r5, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f7fd fcab 	bl	80005f6 <_write>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d102      	bne.n	8002caa <_write_r+0x1e>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	b103      	cbz	r3, 8002caa <_write_r+0x1e>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
 8002cac:	200002f0 	.word	0x200002f0

08002cb0 <__errno>:
 8002cb0:	4b01      	ldr	r3, [pc, #4]	; (8002cb8 <__errno+0x8>)
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000068 	.word	0x20000068

08002cbc <__libc_init_array>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	2600      	movs	r6, #0
 8002cc0:	4d0c      	ldr	r5, [pc, #48]	; (8002cf4 <__libc_init_array+0x38>)
 8002cc2:	4c0d      	ldr	r4, [pc, #52]	; (8002cf8 <__libc_init_array+0x3c>)
 8002cc4:	1b64      	subs	r4, r4, r5
 8002cc6:	10a4      	asrs	r4, r4, #2
 8002cc8:	42a6      	cmp	r6, r4
 8002cca:	d109      	bne.n	8002ce0 <__libc_init_array+0x24>
 8002ccc:	f000 fa84 	bl	80031d8 <_init>
 8002cd0:	2600      	movs	r6, #0
 8002cd2:	4d0a      	ldr	r5, [pc, #40]	; (8002cfc <__libc_init_array+0x40>)
 8002cd4:	4c0a      	ldr	r4, [pc, #40]	; (8002d00 <__libc_init_array+0x44>)
 8002cd6:	1b64      	subs	r4, r4, r5
 8002cd8:	10a4      	asrs	r4, r4, #2
 8002cda:	42a6      	cmp	r6, r4
 8002cdc:	d105      	bne.n	8002cea <__libc_init_array+0x2e>
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce4:	4798      	blx	r3
 8002ce6:	3601      	adds	r6, #1
 8002ce8:	e7ee      	b.n	8002cc8 <__libc_init_array+0xc>
 8002cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cee:	4798      	blx	r3
 8002cf0:	3601      	adds	r6, #1
 8002cf2:	e7f2      	b.n	8002cda <__libc_init_array+0x1e>
 8002cf4:	0800326c 	.word	0x0800326c
 8002cf8:	0800326c 	.word	0x0800326c
 8002cfc:	0800326c 	.word	0x0800326c
 8002d00:	08003270 	.word	0x08003270

08002d04 <__retarget_lock_init_recursive>:
 8002d04:	4770      	bx	lr

08002d06 <__retarget_lock_acquire_recursive>:
 8002d06:	4770      	bx	lr

08002d08 <__retarget_lock_release_recursive>:
 8002d08:	4770      	bx	lr
	...

08002d0c <_free_r>:
 8002d0c:	b538      	push	{r3, r4, r5, lr}
 8002d0e:	4605      	mov	r5, r0
 8002d10:	2900      	cmp	r1, #0
 8002d12:	d040      	beq.n	8002d96 <_free_r+0x8a>
 8002d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d18:	1f0c      	subs	r4, r1, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bfb8      	it	lt
 8002d1e:	18e4      	addlt	r4, r4, r3
 8002d20:	f000 f8dc 	bl	8002edc <__malloc_lock>
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <_free_r+0x8c>)
 8002d26:	6813      	ldr	r3, [r2, #0]
 8002d28:	b933      	cbnz	r3, 8002d38 <_free_r+0x2c>
 8002d2a:	6063      	str	r3, [r4, #4]
 8002d2c:	6014      	str	r4, [r2, #0]
 8002d2e:	4628      	mov	r0, r5
 8002d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d34:	f000 b8d8 	b.w	8002ee8 <__malloc_unlock>
 8002d38:	42a3      	cmp	r3, r4
 8002d3a:	d908      	bls.n	8002d4e <_free_r+0x42>
 8002d3c:	6820      	ldr	r0, [r4, #0]
 8002d3e:	1821      	adds	r1, r4, r0
 8002d40:	428b      	cmp	r3, r1
 8002d42:	bf01      	itttt	eq
 8002d44:	6819      	ldreq	r1, [r3, #0]
 8002d46:	685b      	ldreq	r3, [r3, #4]
 8002d48:	1809      	addeq	r1, r1, r0
 8002d4a:	6021      	streq	r1, [r4, #0]
 8002d4c:	e7ed      	b.n	8002d2a <_free_r+0x1e>
 8002d4e:	461a      	mov	r2, r3
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	b10b      	cbz	r3, 8002d58 <_free_r+0x4c>
 8002d54:	42a3      	cmp	r3, r4
 8002d56:	d9fa      	bls.n	8002d4e <_free_r+0x42>
 8002d58:	6811      	ldr	r1, [r2, #0]
 8002d5a:	1850      	adds	r0, r2, r1
 8002d5c:	42a0      	cmp	r0, r4
 8002d5e:	d10b      	bne.n	8002d78 <_free_r+0x6c>
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	4401      	add	r1, r0
 8002d64:	1850      	adds	r0, r2, r1
 8002d66:	4283      	cmp	r3, r0
 8002d68:	6011      	str	r1, [r2, #0]
 8002d6a:	d1e0      	bne.n	8002d2e <_free_r+0x22>
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4408      	add	r0, r1
 8002d72:	6010      	str	r0, [r2, #0]
 8002d74:	6053      	str	r3, [r2, #4]
 8002d76:	e7da      	b.n	8002d2e <_free_r+0x22>
 8002d78:	d902      	bls.n	8002d80 <_free_r+0x74>
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	602b      	str	r3, [r5, #0]
 8002d7e:	e7d6      	b.n	8002d2e <_free_r+0x22>
 8002d80:	6820      	ldr	r0, [r4, #0]
 8002d82:	1821      	adds	r1, r4, r0
 8002d84:	428b      	cmp	r3, r1
 8002d86:	bf01      	itttt	eq
 8002d88:	6819      	ldreq	r1, [r3, #0]
 8002d8a:	685b      	ldreq	r3, [r3, #4]
 8002d8c:	1809      	addeq	r1, r1, r0
 8002d8e:	6021      	streq	r1, [r4, #0]
 8002d90:	6063      	str	r3, [r4, #4]
 8002d92:	6054      	str	r4, [r2, #4]
 8002d94:	e7cb      	b.n	8002d2e <_free_r+0x22>
 8002d96:	bd38      	pop	{r3, r4, r5, pc}
 8002d98:	200002f8 	.word	0x200002f8

08002d9c <sbrk_aligned>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	4e0e      	ldr	r6, [pc, #56]	; (8002dd8 <sbrk_aligned+0x3c>)
 8002da0:	460c      	mov	r4, r1
 8002da2:	6831      	ldr	r1, [r6, #0]
 8002da4:	4605      	mov	r5, r0
 8002da6:	b911      	cbnz	r1, 8002dae <sbrk_aligned+0x12>
 8002da8:	f000 fa06 	bl	80031b8 <_sbrk_r>
 8002dac:	6030      	str	r0, [r6, #0]
 8002dae:	4621      	mov	r1, r4
 8002db0:	4628      	mov	r0, r5
 8002db2:	f000 fa01 	bl	80031b8 <_sbrk_r>
 8002db6:	1c43      	adds	r3, r0, #1
 8002db8:	d00a      	beq.n	8002dd0 <sbrk_aligned+0x34>
 8002dba:	1cc4      	adds	r4, r0, #3
 8002dbc:	f024 0403 	bic.w	r4, r4, #3
 8002dc0:	42a0      	cmp	r0, r4
 8002dc2:	d007      	beq.n	8002dd4 <sbrk_aligned+0x38>
 8002dc4:	1a21      	subs	r1, r4, r0
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 f9f6 	bl	80031b8 <_sbrk_r>
 8002dcc:	3001      	adds	r0, #1
 8002dce:	d101      	bne.n	8002dd4 <sbrk_aligned+0x38>
 8002dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	200002fc 	.word	0x200002fc

08002ddc <_malloc_r>:
 8002ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002de0:	1ccd      	adds	r5, r1, #3
 8002de2:	f025 0503 	bic.w	r5, r5, #3
 8002de6:	3508      	adds	r5, #8
 8002de8:	2d0c      	cmp	r5, #12
 8002dea:	bf38      	it	cc
 8002dec:	250c      	movcc	r5, #12
 8002dee:	2d00      	cmp	r5, #0
 8002df0:	4607      	mov	r7, r0
 8002df2:	db01      	blt.n	8002df8 <_malloc_r+0x1c>
 8002df4:	42a9      	cmp	r1, r5
 8002df6:	d905      	bls.n	8002e04 <_malloc_r+0x28>
 8002df8:	230c      	movs	r3, #12
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	4630      	mov	r0, r6
 8002e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002ed8 <_malloc_r+0xfc>
 8002e08:	f000 f868 	bl	8002edc <__malloc_lock>
 8002e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e10:	461c      	mov	r4, r3
 8002e12:	bb5c      	cbnz	r4, 8002e6c <_malloc_r+0x90>
 8002e14:	4629      	mov	r1, r5
 8002e16:	4638      	mov	r0, r7
 8002e18:	f7ff ffc0 	bl	8002d9c <sbrk_aligned>
 8002e1c:	1c43      	adds	r3, r0, #1
 8002e1e:	4604      	mov	r4, r0
 8002e20:	d155      	bne.n	8002ece <_malloc_r+0xf2>
 8002e22:	f8d8 4000 	ldr.w	r4, [r8]
 8002e26:	4626      	mov	r6, r4
 8002e28:	2e00      	cmp	r6, #0
 8002e2a:	d145      	bne.n	8002eb8 <_malloc_r+0xdc>
 8002e2c:	2c00      	cmp	r4, #0
 8002e2e:	d048      	beq.n	8002ec2 <_malloc_r+0xe6>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	4631      	mov	r1, r6
 8002e34:	4638      	mov	r0, r7
 8002e36:	eb04 0903 	add.w	r9, r4, r3
 8002e3a:	f000 f9bd 	bl	80031b8 <_sbrk_r>
 8002e3e:	4581      	cmp	r9, r0
 8002e40:	d13f      	bne.n	8002ec2 <_malloc_r+0xe6>
 8002e42:	6821      	ldr	r1, [r4, #0]
 8002e44:	4638      	mov	r0, r7
 8002e46:	1a6d      	subs	r5, r5, r1
 8002e48:	4629      	mov	r1, r5
 8002e4a:	f7ff ffa7 	bl	8002d9c <sbrk_aligned>
 8002e4e:	3001      	adds	r0, #1
 8002e50:	d037      	beq.n	8002ec2 <_malloc_r+0xe6>
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	442b      	add	r3, r5
 8002e56:	6023      	str	r3, [r4, #0]
 8002e58:	f8d8 3000 	ldr.w	r3, [r8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d038      	beq.n	8002ed2 <_malloc_r+0xf6>
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	42a2      	cmp	r2, r4
 8002e64:	d12b      	bne.n	8002ebe <_malloc_r+0xe2>
 8002e66:	2200      	movs	r2, #0
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	e00f      	b.n	8002e8c <_malloc_r+0xb0>
 8002e6c:	6822      	ldr	r2, [r4, #0]
 8002e6e:	1b52      	subs	r2, r2, r5
 8002e70:	d41f      	bmi.n	8002eb2 <_malloc_r+0xd6>
 8002e72:	2a0b      	cmp	r2, #11
 8002e74:	d917      	bls.n	8002ea6 <_malloc_r+0xca>
 8002e76:	1961      	adds	r1, r4, r5
 8002e78:	42a3      	cmp	r3, r4
 8002e7a:	6025      	str	r5, [r4, #0]
 8002e7c:	bf18      	it	ne
 8002e7e:	6059      	strne	r1, [r3, #4]
 8002e80:	6863      	ldr	r3, [r4, #4]
 8002e82:	bf08      	it	eq
 8002e84:	f8c8 1000 	streq.w	r1, [r8]
 8002e88:	5162      	str	r2, [r4, r5]
 8002e8a:	604b      	str	r3, [r1, #4]
 8002e8c:	4638      	mov	r0, r7
 8002e8e:	f104 060b 	add.w	r6, r4, #11
 8002e92:	f000 f829 	bl	8002ee8 <__malloc_unlock>
 8002e96:	f026 0607 	bic.w	r6, r6, #7
 8002e9a:	1d23      	adds	r3, r4, #4
 8002e9c:	1af2      	subs	r2, r6, r3
 8002e9e:	d0ae      	beq.n	8002dfe <_malloc_r+0x22>
 8002ea0:	1b9b      	subs	r3, r3, r6
 8002ea2:	50a3      	str	r3, [r4, r2]
 8002ea4:	e7ab      	b.n	8002dfe <_malloc_r+0x22>
 8002ea6:	42a3      	cmp	r3, r4
 8002ea8:	6862      	ldr	r2, [r4, #4]
 8002eaa:	d1dd      	bne.n	8002e68 <_malloc_r+0x8c>
 8002eac:	f8c8 2000 	str.w	r2, [r8]
 8002eb0:	e7ec      	b.n	8002e8c <_malloc_r+0xb0>
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	6864      	ldr	r4, [r4, #4]
 8002eb6:	e7ac      	b.n	8002e12 <_malloc_r+0x36>
 8002eb8:	4634      	mov	r4, r6
 8002eba:	6876      	ldr	r6, [r6, #4]
 8002ebc:	e7b4      	b.n	8002e28 <_malloc_r+0x4c>
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	e7cc      	b.n	8002e5c <_malloc_r+0x80>
 8002ec2:	230c      	movs	r3, #12
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	f000 f80e 	bl	8002ee8 <__malloc_unlock>
 8002ecc:	e797      	b.n	8002dfe <_malloc_r+0x22>
 8002ece:	6025      	str	r5, [r4, #0]
 8002ed0:	e7dc      	b.n	8002e8c <_malloc_r+0xb0>
 8002ed2:	605b      	str	r3, [r3, #4]
 8002ed4:	deff      	udf	#255	; 0xff
 8002ed6:	bf00      	nop
 8002ed8:	200002f8 	.word	0x200002f8

08002edc <__malloc_lock>:
 8002edc:	4801      	ldr	r0, [pc, #4]	; (8002ee4 <__malloc_lock+0x8>)
 8002ede:	f7ff bf12 	b.w	8002d06 <__retarget_lock_acquire_recursive>
 8002ee2:	bf00      	nop
 8002ee4:	200002f4 	.word	0x200002f4

08002ee8 <__malloc_unlock>:
 8002ee8:	4801      	ldr	r0, [pc, #4]	; (8002ef0 <__malloc_unlock+0x8>)
 8002eea:	f7ff bf0d 	b.w	8002d08 <__retarget_lock_release_recursive>
 8002eee:	bf00      	nop
 8002ef0:	200002f4 	.word	0x200002f4

08002ef4 <__sflush_r>:
 8002ef4:	898a      	ldrh	r2, [r1, #12]
 8002ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef8:	4605      	mov	r5, r0
 8002efa:	0710      	lsls	r0, r2, #28
 8002efc:	460c      	mov	r4, r1
 8002efe:	d457      	bmi.n	8002fb0 <__sflush_r+0xbc>
 8002f00:	684b      	ldr	r3, [r1, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	dc04      	bgt.n	8002f10 <__sflush_r+0x1c>
 8002f06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	dc01      	bgt.n	8002f10 <__sflush_r+0x1c>
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f12:	2e00      	cmp	r6, #0
 8002f14:	d0fa      	beq.n	8002f0c <__sflush_r+0x18>
 8002f16:	2300      	movs	r3, #0
 8002f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f1c:	682f      	ldr	r7, [r5, #0]
 8002f1e:	6a21      	ldr	r1, [r4, #32]
 8002f20:	602b      	str	r3, [r5, #0]
 8002f22:	d032      	beq.n	8002f8a <__sflush_r+0x96>
 8002f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f26:	89a3      	ldrh	r3, [r4, #12]
 8002f28:	075a      	lsls	r2, r3, #29
 8002f2a:	d505      	bpl.n	8002f38 <__sflush_r+0x44>
 8002f2c:	6863      	ldr	r3, [r4, #4]
 8002f2e:	1ac0      	subs	r0, r0, r3
 8002f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f32:	b10b      	cbz	r3, 8002f38 <__sflush_r+0x44>
 8002f34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f36:	1ac0      	subs	r0, r0, r3
 8002f38:	2300      	movs	r3, #0
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f3e:	4628      	mov	r0, r5
 8002f40:	6a21      	ldr	r1, [r4, #32]
 8002f42:	47b0      	blx	r6
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	89a3      	ldrh	r3, [r4, #12]
 8002f48:	d106      	bne.n	8002f58 <__sflush_r+0x64>
 8002f4a:	6829      	ldr	r1, [r5, #0]
 8002f4c:	291d      	cmp	r1, #29
 8002f4e:	d82b      	bhi.n	8002fa8 <__sflush_r+0xb4>
 8002f50:	4a28      	ldr	r2, [pc, #160]	; (8002ff4 <__sflush_r+0x100>)
 8002f52:	410a      	asrs	r2, r1
 8002f54:	07d6      	lsls	r6, r2, #31
 8002f56:	d427      	bmi.n	8002fa8 <__sflush_r+0xb4>
 8002f58:	2200      	movs	r2, #0
 8002f5a:	6062      	str	r2, [r4, #4]
 8002f5c:	6922      	ldr	r2, [r4, #16]
 8002f5e:	04d9      	lsls	r1, r3, #19
 8002f60:	6022      	str	r2, [r4, #0]
 8002f62:	d504      	bpl.n	8002f6e <__sflush_r+0x7a>
 8002f64:	1c42      	adds	r2, r0, #1
 8002f66:	d101      	bne.n	8002f6c <__sflush_r+0x78>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	b903      	cbnz	r3, 8002f6e <__sflush_r+0x7a>
 8002f6c:	6560      	str	r0, [r4, #84]	; 0x54
 8002f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f70:	602f      	str	r7, [r5, #0]
 8002f72:	2900      	cmp	r1, #0
 8002f74:	d0ca      	beq.n	8002f0c <__sflush_r+0x18>
 8002f76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f7a:	4299      	cmp	r1, r3
 8002f7c:	d002      	beq.n	8002f84 <__sflush_r+0x90>
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f7ff fec4 	bl	8002d0c <_free_r>
 8002f84:	2000      	movs	r0, #0
 8002f86:	6360      	str	r0, [r4, #52]	; 0x34
 8002f88:	e7c1      	b.n	8002f0e <__sflush_r+0x1a>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	47b0      	blx	r6
 8002f90:	1c41      	adds	r1, r0, #1
 8002f92:	d1c8      	bne.n	8002f26 <__sflush_r+0x32>
 8002f94:	682b      	ldr	r3, [r5, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0c5      	beq.n	8002f26 <__sflush_r+0x32>
 8002f9a:	2b1d      	cmp	r3, #29
 8002f9c:	d001      	beq.n	8002fa2 <__sflush_r+0xae>
 8002f9e:	2b16      	cmp	r3, #22
 8002fa0:	d101      	bne.n	8002fa6 <__sflush_r+0xb2>
 8002fa2:	602f      	str	r7, [r5, #0]
 8002fa4:	e7b2      	b.n	8002f0c <__sflush_r+0x18>
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fac:	81a3      	strh	r3, [r4, #12]
 8002fae:	e7ae      	b.n	8002f0e <__sflush_r+0x1a>
 8002fb0:	690f      	ldr	r7, [r1, #16]
 8002fb2:	2f00      	cmp	r7, #0
 8002fb4:	d0aa      	beq.n	8002f0c <__sflush_r+0x18>
 8002fb6:	0793      	lsls	r3, r2, #30
 8002fb8:	bf18      	it	ne
 8002fba:	2300      	movne	r3, #0
 8002fbc:	680e      	ldr	r6, [r1, #0]
 8002fbe:	bf08      	it	eq
 8002fc0:	694b      	ldreq	r3, [r1, #20]
 8002fc2:	1bf6      	subs	r6, r6, r7
 8002fc4:	600f      	str	r7, [r1, #0]
 8002fc6:	608b      	str	r3, [r1, #8]
 8002fc8:	2e00      	cmp	r6, #0
 8002fca:	dd9f      	ble.n	8002f0c <__sflush_r+0x18>
 8002fcc:	4633      	mov	r3, r6
 8002fce:	463a      	mov	r2, r7
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	6a21      	ldr	r1, [r4, #32]
 8002fd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002fd8:	47e0      	blx	ip
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	dc06      	bgt.n	8002fec <__sflush_r+0xf8>
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe8:	81a3      	strh	r3, [r4, #12]
 8002fea:	e790      	b.n	8002f0e <__sflush_r+0x1a>
 8002fec:	4407      	add	r7, r0
 8002fee:	1a36      	subs	r6, r6, r0
 8002ff0:	e7ea      	b.n	8002fc8 <__sflush_r+0xd4>
 8002ff2:	bf00      	nop
 8002ff4:	dfbffffe 	.word	0xdfbffffe

08002ff8 <_fflush_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	690b      	ldr	r3, [r1, #16]
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	460c      	mov	r4, r1
 8003000:	b913      	cbnz	r3, 8003008 <_fflush_r+0x10>
 8003002:	2500      	movs	r5, #0
 8003004:	4628      	mov	r0, r5
 8003006:	bd38      	pop	{r3, r4, r5, pc}
 8003008:	b118      	cbz	r0, 8003012 <_fflush_r+0x1a>
 800300a:	6a03      	ldr	r3, [r0, #32]
 800300c:	b90b      	cbnz	r3, 8003012 <_fflush_r+0x1a>
 800300e:	f7ff fc8f 	bl	8002930 <__sinit>
 8003012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f3      	beq.n	8003002 <_fflush_r+0xa>
 800301a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800301c:	07d0      	lsls	r0, r2, #31
 800301e:	d404      	bmi.n	800302a <_fflush_r+0x32>
 8003020:	0599      	lsls	r1, r3, #22
 8003022:	d402      	bmi.n	800302a <_fflush_r+0x32>
 8003024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003026:	f7ff fe6e 	bl	8002d06 <__retarget_lock_acquire_recursive>
 800302a:	4628      	mov	r0, r5
 800302c:	4621      	mov	r1, r4
 800302e:	f7ff ff61 	bl	8002ef4 <__sflush_r>
 8003032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003034:	4605      	mov	r5, r0
 8003036:	07da      	lsls	r2, r3, #31
 8003038:	d4e4      	bmi.n	8003004 <_fflush_r+0xc>
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	059b      	lsls	r3, r3, #22
 800303e:	d4e1      	bmi.n	8003004 <_fflush_r+0xc>
 8003040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003042:	f7ff fe61 	bl	8002d08 <__retarget_lock_release_recursive>
 8003046:	e7dd      	b.n	8003004 <_fflush_r+0xc>

08003048 <__swhatbuf_r>:
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	460c      	mov	r4, r1
 800304c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003050:	4615      	mov	r5, r2
 8003052:	2900      	cmp	r1, #0
 8003054:	461e      	mov	r6, r3
 8003056:	b096      	sub	sp, #88	; 0x58
 8003058:	da0c      	bge.n	8003074 <__swhatbuf_r+0x2c>
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	2100      	movs	r1, #0
 800305e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003062:	bf0c      	ite	eq
 8003064:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003068:	2340      	movne	r3, #64	; 0x40
 800306a:	2000      	movs	r0, #0
 800306c:	6031      	str	r1, [r6, #0]
 800306e:	602b      	str	r3, [r5, #0]
 8003070:	b016      	add	sp, #88	; 0x58
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	466a      	mov	r2, sp
 8003076:	f000 f87d 	bl	8003174 <_fstat_r>
 800307a:	2800      	cmp	r0, #0
 800307c:	dbed      	blt.n	800305a <__swhatbuf_r+0x12>
 800307e:	9901      	ldr	r1, [sp, #4]
 8003080:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003084:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003088:	4259      	negs	r1, r3
 800308a:	4159      	adcs	r1, r3
 800308c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003090:	e7eb      	b.n	800306a <__swhatbuf_r+0x22>

08003092 <__smakebuf_r>:
 8003092:	898b      	ldrh	r3, [r1, #12]
 8003094:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003096:	079d      	lsls	r5, r3, #30
 8003098:	4606      	mov	r6, r0
 800309a:	460c      	mov	r4, r1
 800309c:	d507      	bpl.n	80030ae <__smakebuf_r+0x1c>
 800309e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030a2:	6023      	str	r3, [r4, #0]
 80030a4:	6123      	str	r3, [r4, #16]
 80030a6:	2301      	movs	r3, #1
 80030a8:	6163      	str	r3, [r4, #20]
 80030aa:	b002      	add	sp, #8
 80030ac:	bd70      	pop	{r4, r5, r6, pc}
 80030ae:	466a      	mov	r2, sp
 80030b0:	ab01      	add	r3, sp, #4
 80030b2:	f7ff ffc9 	bl	8003048 <__swhatbuf_r>
 80030b6:	9900      	ldr	r1, [sp, #0]
 80030b8:	4605      	mov	r5, r0
 80030ba:	4630      	mov	r0, r6
 80030bc:	f7ff fe8e 	bl	8002ddc <_malloc_r>
 80030c0:	b948      	cbnz	r0, 80030d6 <__smakebuf_r+0x44>
 80030c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030c6:	059a      	lsls	r2, r3, #22
 80030c8:	d4ef      	bmi.n	80030aa <__smakebuf_r+0x18>
 80030ca:	f023 0303 	bic.w	r3, r3, #3
 80030ce:	f043 0302 	orr.w	r3, r3, #2
 80030d2:	81a3      	strh	r3, [r4, #12]
 80030d4:	e7e3      	b.n	800309e <__smakebuf_r+0xc>
 80030d6:	89a3      	ldrh	r3, [r4, #12]
 80030d8:	6020      	str	r0, [r4, #0]
 80030da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030de:	81a3      	strh	r3, [r4, #12]
 80030e0:	9b00      	ldr	r3, [sp, #0]
 80030e2:	6120      	str	r0, [r4, #16]
 80030e4:	6163      	str	r3, [r4, #20]
 80030e6:	9b01      	ldr	r3, [sp, #4]
 80030e8:	b15b      	cbz	r3, 8003102 <__smakebuf_r+0x70>
 80030ea:	4630      	mov	r0, r6
 80030ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030f0:	f000 f852 	bl	8003198 <_isatty_r>
 80030f4:	b128      	cbz	r0, 8003102 <__smakebuf_r+0x70>
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	f023 0303 	bic.w	r3, r3, #3
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	81a3      	strh	r3, [r4, #12]
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	431d      	orrs	r5, r3
 8003106:	81a5      	strh	r5, [r4, #12]
 8003108:	e7cf      	b.n	80030aa <__smakebuf_r+0x18>

0800310a <_putc_r>:
 800310a:	b570      	push	{r4, r5, r6, lr}
 800310c:	460d      	mov	r5, r1
 800310e:	4614      	mov	r4, r2
 8003110:	4606      	mov	r6, r0
 8003112:	b118      	cbz	r0, 800311c <_putc_r+0x12>
 8003114:	6a03      	ldr	r3, [r0, #32]
 8003116:	b90b      	cbnz	r3, 800311c <_putc_r+0x12>
 8003118:	f7ff fc0a 	bl	8002930 <__sinit>
 800311c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800311e:	07d8      	lsls	r0, r3, #31
 8003120:	d405      	bmi.n	800312e <_putc_r+0x24>
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	0599      	lsls	r1, r3, #22
 8003126:	d402      	bmi.n	800312e <_putc_r+0x24>
 8003128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800312a:	f7ff fdec 	bl	8002d06 <__retarget_lock_acquire_recursive>
 800312e:	68a3      	ldr	r3, [r4, #8]
 8003130:	3b01      	subs	r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	60a3      	str	r3, [r4, #8]
 8003136:	da05      	bge.n	8003144 <_putc_r+0x3a>
 8003138:	69a2      	ldr	r2, [r4, #24]
 800313a:	4293      	cmp	r3, r2
 800313c:	db12      	blt.n	8003164 <_putc_r+0x5a>
 800313e:	b2eb      	uxtb	r3, r5
 8003140:	2b0a      	cmp	r3, #10
 8003142:	d00f      	beq.n	8003164 <_putc_r+0x5a>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	6022      	str	r2, [r4, #0]
 800314a:	701d      	strb	r5, [r3, #0]
 800314c:	b2ed      	uxtb	r5, r5
 800314e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003150:	07da      	lsls	r2, r3, #31
 8003152:	d405      	bmi.n	8003160 <_putc_r+0x56>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	059b      	lsls	r3, r3, #22
 8003158:	d402      	bmi.n	8003160 <_putc_r+0x56>
 800315a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315c:	f7ff fdd4 	bl	8002d08 <__retarget_lock_release_recursive>
 8003160:	4628      	mov	r0, r5
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	4629      	mov	r1, r5
 8003166:	4622      	mov	r2, r4
 8003168:	4630      	mov	r0, r6
 800316a:	f7ff fcbe 	bl	8002aea <__swbuf_r>
 800316e:	4605      	mov	r5, r0
 8003170:	e7ed      	b.n	800314e <_putc_r+0x44>
	...

08003174 <_fstat_r>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	2300      	movs	r3, #0
 8003178:	4d06      	ldr	r5, [pc, #24]	; (8003194 <_fstat_r+0x20>)
 800317a:	4604      	mov	r4, r0
 800317c:	4608      	mov	r0, r1
 800317e:	4611      	mov	r1, r2
 8003180:	602b      	str	r3, [r5, #0]
 8003182:	f7fd fa5f 	bl	8000644 <_fstat>
 8003186:	1c43      	adds	r3, r0, #1
 8003188:	d102      	bne.n	8003190 <_fstat_r+0x1c>
 800318a:	682b      	ldr	r3, [r5, #0]
 800318c:	b103      	cbz	r3, 8003190 <_fstat_r+0x1c>
 800318e:	6023      	str	r3, [r4, #0]
 8003190:	bd38      	pop	{r3, r4, r5, pc}
 8003192:	bf00      	nop
 8003194:	200002f0 	.word	0x200002f0

08003198 <_isatty_r>:
 8003198:	b538      	push	{r3, r4, r5, lr}
 800319a:	2300      	movs	r3, #0
 800319c:	4d05      	ldr	r5, [pc, #20]	; (80031b4 <_isatty_r+0x1c>)
 800319e:	4604      	mov	r4, r0
 80031a0:	4608      	mov	r0, r1
 80031a2:	602b      	str	r3, [r5, #0]
 80031a4:	f7fd fa5d 	bl	8000662 <_isatty>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d102      	bne.n	80031b2 <_isatty_r+0x1a>
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	b103      	cbz	r3, 80031b2 <_isatty_r+0x1a>
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
 80031b4:	200002f0 	.word	0x200002f0

080031b8 <_sbrk_r>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	2300      	movs	r3, #0
 80031bc:	4d05      	ldr	r5, [pc, #20]	; (80031d4 <_sbrk_r+0x1c>)
 80031be:	4604      	mov	r4, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	602b      	str	r3, [r5, #0]
 80031c4:	f7fd fa64 	bl	8000690 <_sbrk>
 80031c8:	1c43      	adds	r3, r0, #1
 80031ca:	d102      	bne.n	80031d2 <_sbrk_r+0x1a>
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	b103      	cbz	r3, 80031d2 <_sbrk_r+0x1a>
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	bd38      	pop	{r3, r4, r5, pc}
 80031d4:	200002f0 	.word	0x200002f0

080031d8 <_init>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	bf00      	nop
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr

080031e4 <_fini>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr
