
10_tftlcd_mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000770c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003068  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a95c  0800a95c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a95c  0800a95c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a95c  0800a95c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a95c  0800a95c  0001a95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a960  0800a960  0001a960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800a964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000006c  0800a9d0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  0800a9d0  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa97  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000237a  00000000  00000000  0002ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007dc  00000000  00000000  0002d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003bf6  00000000  00000000  0002e12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed87  00000000  00000000  00031d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095c0b  00000000  00000000  00040aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000320c  00000000  00000000  000d66b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000d98c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000006c 	.word	0x2000006c
 8000204:	00000000 	.word	0x00000000
 8000208:	080078dc 	.word	0x080078dc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000070 	.word	0x20000070
 8000224:	080078dc 	.word	0x080078dc

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <lcd_ex_st7789_reginit>:
 * @brief  ST7789 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7789_reginit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8000838:	2011      	movs	r0, #17
 800083a:	f002 fc39 	bl	80030b0 <lcd_wr_regno>

    HAL_Delay(120);
 800083e:	2078      	movs	r0, #120	; 0x78
 8000840:	f004 f80c 	bl	800485c <HAL_Delay>

    lcd_wr_regno(0x36);
 8000844:	2036      	movs	r0, #54	; 0x36
 8000846:	f002 fc33 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800084a:	2000      	movs	r0, #0
 800084c:	f002 fc1c 	bl	8003088 <lcd_wr_data>


    lcd_wr_regno(0x3A);
 8000850:	203a      	movs	r0, #58	; 0x3a
 8000852:	f002 fc2d 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0X05);
 8000856:	2005      	movs	r0, #5
 8000858:	f002 fc16 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 800085c:	20b2      	movs	r0, #178	; 0xb2
 800085e:	f002 fc27 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8000862:	200c      	movs	r0, #12
 8000864:	f002 fc10 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8000868:	200c      	movs	r0, #12
 800086a:	f002 fc0d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800086e:	2000      	movs	r0, #0
 8000870:	f002 fc0a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x33);
 8000874:	2033      	movs	r0, #51	; 0x33
 8000876:	f002 fc07 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x33);
 800087a:	2033      	movs	r0, #51	; 0x33
 800087c:	f002 fc04 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8000880:	20b7      	movs	r0, #183	; 0xb7
 8000882:	f002 fc15 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x35);
 8000886:	2035      	movs	r0, #53	; 0x35
 8000888:	f002 fbfe 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xBB); /* vcom */
 800088c:	20bb      	movs	r0, #187	; 0xbb
 800088e:	f002 fc0f 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x32);  /* 30 */
 8000892:	2032      	movs	r0, #50	; 0x32
 8000894:	f002 fbf8 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8000898:	20c0      	movs	r0, #192	; 0xc0
 800089a:	f002 fc09 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 800089e:	200c      	movs	r0, #12
 80008a0:	f002 fbf2 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 80008a4:	20c2      	movs	r0, #194	; 0xc2
 80008a6:	f002 fc03 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x01);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f002 fbec 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC3); /* vrh */
 80008b0:	20c3      	movs	r0, #195	; 0xc3
 80008b2:	f002 fbfd 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x10);  /* 17 0D */
 80008b6:	2010      	movs	r0, #16
 80008b8:	f002 fbe6 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC4); /* vdv */
 80008bc:	20c4      	movs	r0, #196	; 0xc4
 80008be:	f002 fbf7 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 20 */
 80008c2:	2020      	movs	r0, #32
 80008c4:	f002 fbe0 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 80008c8:	20c6      	movs	r0, #198	; 0xc6
 80008ca:	f002 fbf1 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x0f);
 80008ce:	200f      	movs	r0, #15
 80008d0:	f002 fbda 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xD0);
 80008d4:	20d0      	movs	r0, #208	; 0xd0
 80008d6:	f002 fbeb 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xA4);
 80008da:	20a4      	movs	r0, #164	; 0xa4
 80008dc:	f002 fbd4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA1);
 80008e0:	20a1      	movs	r0, #161	; 0xa1
 80008e2:	f002 fbd1 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Set Gamma  */
 80008e6:	20e0      	movs	r0, #224	; 0xe0
 80008e8:	f002 fbe2 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 80008ec:	20d0      	movs	r0, #208	; 0xd0
 80008ee:	f002 fbcb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f002 fbc8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x02);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f002 fbc5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x07);
 80008fe:	2007      	movs	r0, #7
 8000900:	f002 fbc2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0a);
 8000904:	200a      	movs	r0, #10
 8000906:	f002 fbbf 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x28);
 800090a:	2028      	movs	r0, #40	; 0x28
 800090c:	f002 fbbc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x32);
 8000910:	2032      	movs	r0, #50	; 0x32
 8000912:	f002 fbb9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0X44);
 8000916:	2044      	movs	r0, #68	; 0x44
 8000918:	f002 fbb6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x42);
 800091c:	2042      	movs	r0, #66	; 0x42
 800091e:	f002 fbb3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x06);
 8000922:	2006      	movs	r0, #6
 8000924:	f002 fbb0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0e);
 8000928:	200e      	movs	r0, #14
 800092a:	f002 fbad 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x12);
 800092e:	2012      	movs	r0, #18
 8000930:	f002 fbaa 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x14);
 8000934:	2014      	movs	r0, #20
 8000936:	f002 fba7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x17);
 800093a:	2017      	movs	r0, #23
 800093c:	f002 fba4 	bl	8003088 <lcd_wr_data>


    lcd_wr_regno(0XE1);  /* Set Gamma */
 8000940:	20e1      	movs	r0, #225	; 0xe1
 8000942:	f002 fbb5 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8000946:	20d0      	movs	r0, #208	; 0xd0
 8000948:	f002 fb9e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800094c:	2000      	movs	r0, #0
 800094e:	f002 fb9b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x02);
 8000952:	2002      	movs	r0, #2
 8000954:	f002 fb98 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x07);
 8000958:	2007      	movs	r0, #7
 800095a:	f002 fb95 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0a);
 800095e:	200a      	movs	r0, #10
 8000960:	f002 fb92 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x28);
 8000964:	2028      	movs	r0, #40	; 0x28
 8000966:	f002 fb8f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x31);
 800096a:	2031      	movs	r0, #49	; 0x31
 800096c:	f002 fb8c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x54);
 8000970:	2054      	movs	r0, #84	; 0x54
 8000972:	f002 fb89 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x47);
 8000976:	2047      	movs	r0, #71	; 0x47
 8000978:	f002 fb86 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0e);
 800097c:	200e      	movs	r0, #14
 800097e:	f002 fb83 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x1c);
 8000982:	201c      	movs	r0, #28
 8000984:	f002 fb80 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x17);
 8000988:	2017      	movs	r0, #23
 800098a:	f002 fb7d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x1b);
 800098e:	201b      	movs	r0, #27
 8000990:	f002 fb7a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x1e);
 8000994:	201e      	movs	r0, #30
 8000996:	f002 fb77 	bl	8003088 <lcd_wr_data>


    lcd_wr_regno(0x2A);
 800099a:	202a      	movs	r0, #42	; 0x2a
 800099c:	f002 fb88 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f002 fb71 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f002 fb6e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f002 fb6b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xef);
 80009b2:	20ef      	movs	r0, #239	; 0xef
 80009b4:	f002 fb68 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x2B);
 80009b8:	202b      	movs	r0, #43	; 0x2b
 80009ba:	f002 fb79 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80009be:	2000      	movs	r0, #0
 80009c0:	f002 fb62 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80009c4:	2000      	movs	r0, #0
 80009c6:	f002 fb5f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f002 fb5c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3f);
 80009d0:	203f      	movs	r0, #63	; 0x3f
 80009d2:	f002 fb59 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x29); /* display on */
 80009d6:	2029      	movs	r0, #41	; 0x29
 80009d8:	f002 fb6a 	bl	80030b0 <lcd_wr_regno>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <lcd_ex_ili9341_reginit>:
 * @brief  ILI9341 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9341_reginit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xCF);
 80009e4:	20cf      	movs	r0, #207	; 0xcf
 80009e6:	f002 fb63 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f002 fb4c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xC1);
 80009f0:	20c1      	movs	r0, #193	; 0xc1
 80009f2:	f002 fb49 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0X30);
 80009f6:	2030      	movs	r0, #48	; 0x30
 80009f8:	f002 fb46 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xED);
 80009fc:	20ed      	movs	r0, #237	; 0xed
 80009fe:	f002 fb57 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x64);
 8000a02:	2064      	movs	r0, #100	; 0x64
 8000a04:	f002 fb40 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x03);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f002 fb3d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0X12);
 8000a0e:	2012      	movs	r0, #18
 8000a10:	f002 fb3a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0X81);
 8000a14:	2081      	movs	r0, #129	; 0x81
 8000a16:	f002 fb37 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xE8);
 8000a1a:	20e8      	movs	r0, #232	; 0xe8
 8000a1c:	f002 fb48 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x85);
 8000a20:	2085      	movs	r0, #133	; 0x85
 8000a22:	f002 fb31 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x10);
 8000a26:	2010      	movs	r0, #16
 8000a28:	f002 fb2e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8000a2c:	207a      	movs	r0, #122	; 0x7a
 8000a2e:	f002 fb2b 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xCB);
 8000a32:	20cb      	movs	r0, #203	; 0xcb
 8000a34:	f002 fb3c 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x39);
 8000a38:	2039      	movs	r0, #57	; 0x39
 8000a3a:	f002 fb25 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8000a3e:	202c      	movs	r0, #44	; 0x2c
 8000a40:	f002 fb22 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f002 fb1f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x34);
 8000a4a:	2034      	movs	r0, #52	; 0x34
 8000a4c:	f002 fb1c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x02);
 8000a50:	2002      	movs	r0, #2
 8000a52:	f002 fb19 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xF7);
 8000a56:	20f7      	movs	r0, #247	; 0xf7
 8000a58:	f002 fb2a 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8000a5c:	2020      	movs	r0, #32
 8000a5e:	f002 fb13 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xEA);
 8000a62:	20ea      	movs	r0, #234	; 0xea
 8000a64:	f002 fb24 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f002 fb0d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f002 fb0a 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xC0); /* Power control */
 8000a74:	20c0      	movs	r0, #192	; 0xc0
 8000a76:	f002 fb1b 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x1B);  /* VRH[5:0] */
 8000a7a:	201b      	movs	r0, #27
 8000a7c:	f002 fb04 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xC1); /* Power control */
 8000a80:	20c1      	movs	r0, #193	; 0xc1
 8000a82:	f002 fb15 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x01);  /* SAP[2:0];BT[3:0] */
 8000a86:	2001      	movs	r0, #1
 8000a88:	f002 fafe 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xC5); /* VCM control */
 8000a8c:	20c5      	movs	r0, #197	; 0xc5
 8000a8e:	f002 fb0f 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x30);  /* 3F */
 8000a92:	2030      	movs	r0, #48	; 0x30
 8000a94:	f002 faf8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x30);  /* 3C */
 8000a98:	2030      	movs	r0, #48	; 0x30
 8000a9a:	f002 faf5 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xC7); /* VCM control2 */
 8000a9e:	20c7      	movs	r0, #199	; 0xc7
 8000aa0:	f002 fb06 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0XB7);
 8000aa4:	20b7      	movs	r0, #183	; 0xb7
 8000aa6:	f002 faef 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0x36); /*  Memory Access Control */
 8000aaa:	2036      	movs	r0, #54	; 0x36
 8000aac:	f002 fb00 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8000ab0:	2048      	movs	r0, #72	; 0x48
 8000ab2:	f002 fae9 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0x3A);
 8000ab6:	203a      	movs	r0, #58	; 0x3a
 8000ab8:	f002 fafa 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8000abc:	2055      	movs	r0, #85	; 0x55
 8000abe:	f002 fae3 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xB1);
 8000ac2:	20b1      	movs	r0, #177	; 0xb1
 8000ac4:	f002 faf4 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f002 fadd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x1A);
 8000ace:	201a      	movs	r0, #26
 8000ad0:	f002 fada 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xB6); /*  Display Function Control */
 8000ad4:	20b6      	movs	r0, #182	; 0xb6
 8000ad6:	f002 faeb 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8000ada:	200a      	movs	r0, #10
 8000adc:	f002 fad4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8000ae0:	20a2      	movs	r0, #162	; 0xa2
 8000ae2:	f002 fad1 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
 8000ae6:	20f2      	movs	r0, #242	; 0xf2
 8000ae8:	f002 fae2 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f002 facb 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0x26); /* Gamma curve selected */
 8000af2:	2026      	movs	r0, #38	; 0x26
 8000af4:	f002 fadc 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f002 fac5 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xE0); /* Set Gamma */
 8000afe:	20e0      	movs	r0, #224	; 0xe0
 8000b00:	f002 fad6 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 8000b04:	200f      	movs	r0, #15
 8000b06:	f002 fabf 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2A);
 8000b0a:	202a      	movs	r0, #42	; 0x2a
 8000b0c:	f002 fabc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x28);
 8000b10:	2028      	movs	r0, #40	; 0x28
 8000b12:	f002 fab9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x08);
 8000b16:	2008      	movs	r0, #8
 8000b18:	f002 fab6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0E);
 8000b1c:	200e      	movs	r0, #14
 8000b1e:	f002 fab3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x08);
 8000b22:	2008      	movs	r0, #8
 8000b24:	f002 fab0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x54);
 8000b28:	2054      	movs	r0, #84	; 0x54
 8000b2a:	f002 faad 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0XA9);
 8000b2e:	20a9      	movs	r0, #169	; 0xa9
 8000b30:	f002 faaa 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x43);
 8000b34:	2043      	movs	r0, #67	; 0x43
 8000b36:	f002 faa7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0A);
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f002 faa4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000b40:	200f      	movs	r0, #15
 8000b42:	f002 faa1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f002 fa9e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f002 fa9b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f002 fa98 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f002 fa95 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0XE1);    /* Set Gamma */
 8000b5e:	20e1      	movs	r0, #225	; 0xe1
 8000b60:	f002 faa6 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f002 fa8f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x15);
 8000b6a:	2015      	movs	r0, #21
 8000b6c:	f002 fa8c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x17);
 8000b70:	2017      	movs	r0, #23
 8000b72:	f002 fa89 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x07);
 8000b76:	2007      	movs	r0, #7
 8000b78:	f002 fa86 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x11);
 8000b7c:	2011      	movs	r0, #17
 8000b7e:	f002 fa83 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x06);
 8000b82:	2006      	movs	r0, #6
 8000b84:	f002 fa80 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2B);
 8000b88:	202b      	movs	r0, #43	; 0x2b
 8000b8a:	f002 fa7d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x56);
 8000b8e:	2056      	movs	r0, #86	; 0x56
 8000b90:	f002 fa7a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8000b94:	203c      	movs	r0, #60	; 0x3c
 8000b96:	f002 fa77 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x05);
 8000b9a:	2005      	movs	r0, #5
 8000b9c:	f002 fa74 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x10);
 8000ba0:	2010      	movs	r0, #16
 8000ba2:	f002 fa71 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000ba6:	200f      	movs	r0, #15
 8000ba8:	f002 fa6e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8000bac:	203f      	movs	r0, #63	; 0x3f
 8000bae:	f002 fa6b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8000bb2:	203f      	movs	r0, #63	; 0x3f
 8000bb4:	f002 fa68 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8000bb8:	200f      	movs	r0, #15
 8000bba:	f002 fa65 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0x2B);
 8000bbe:	202b      	movs	r0, #43	; 0x2b
 8000bc0:	f002 fa76 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f002 fa5f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f002 fa5c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f002 fa59 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8000bd6:	203f      	movs	r0, #63	; 0x3f
 8000bd8:	f002 fa56 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0x2A);
 8000bdc:	202a      	movs	r0, #42	; 0x2a
 8000bde:	f002 fa67 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f002 fa50 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f002 fa4d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f002 fa4a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xef);
 8000bf4:	20ef      	movs	r0, #239	; 0xef
 8000bf6:	f002 fa47 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0x11); /* Exit Sleep */
 8000bfa:	2011      	movs	r0, #17
 8000bfc:	f002 fa58 	bl	80030b0 <lcd_wr_regno>
    HAL_Delay(120);
 8000c00:	2078      	movs	r0, #120	; 0x78
 8000c02:	f003 fe2b 	bl	800485c <HAL_Delay>
    lcd_wr_regno(0x29); /* display on */
 8000c06:	2029      	movs	r0, #41	; 0x29
 8000c08:	f002 fa52 	bl	80030b0 <lcd_wr_regno>
 }
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <lcd_ex_nt35310_reginit>:
 * @brief  NT35310 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35310_reginit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xED);
 8000c14:	20ed      	movs	r0, #237	; 0xed
 8000c16:	f002 fa4b 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f002 fa34 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xFE);
 8000c20:	20fe      	movs	r0, #254	; 0xfe
 8000c22:	f002 fa31 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xEE);
 8000c26:	20ee      	movs	r0, #238	; 0xee
 8000c28:	f002 fa42 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xDE);
 8000c2c:	20de      	movs	r0, #222	; 0xde
 8000c2e:	f002 fa2b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x21);
 8000c32:	2021      	movs	r0, #33	; 0x21
 8000c34:	f002 fa28 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xF1);
 8000c38:	20f1      	movs	r0, #241	; 0xf1
 8000c3a:	f002 fa39 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f002 fa22 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xDF);
 8000c44:	20df      	movs	r0, #223	; 0xdf
 8000c46:	f002 fa33 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x10);
 8000c4a:	2010      	movs	r0, #16
 8000c4c:	f002 fa1c 	bl	8003088 <lcd_wr_data>

    /* VCOMvoltage */
    lcd_wr_regno(0xC4);
 8000c50:	20c4      	movs	r0, #196	; 0xc4
 8000c52:	f002 fa2d 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x8F);  /* 5f */
 8000c56:	208f      	movs	r0, #143	; 0x8f
 8000c58:	f002 fa16 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8000c5c:	20c6      	movs	r0, #198	; 0xc6
 8000c5e:	f002 fa27 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f002 fa10 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8000c68:	20e2      	movs	r0, #226	; 0xe2
 8000c6a:	f002 fa0d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8000c6e:	20e2      	movs	r0, #226	; 0xe2
 8000c70:	f002 fa0a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8000c74:	20e2      	movs	r0, #226	; 0xe2
 8000c76:	f002 fa07 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xBF);
 8000c7a:	20bf      	movs	r0, #191	; 0xbf
 8000c7c:	f002 fa18 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8000c80:	20aa      	movs	r0, #170	; 0xaa
 8000c82:	f002 fa01 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB0);
 8000c86:	20b0      	movs	r0, #176	; 0xb0
 8000c88:	f002 fa12 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x0D);
 8000c8c:	200d      	movs	r0, #13
 8000c8e:	f002 f9fb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f002 f9f8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0D);
 8000c98:	200d      	movs	r0, #13
 8000c9a:	f002 f9f5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f002 f9f2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x11);
 8000ca4:	2011      	movs	r0, #17
 8000ca6:	f002 f9ef 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f002 f9ec 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x19);
 8000cb0:	2019      	movs	r0, #25
 8000cb2:	f002 f9e9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f002 f9e6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x21);
 8000cbc:	2021      	movs	r0, #33	; 0x21
 8000cbe:	f002 f9e3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f002 f9e0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2D);
 8000cc8:	202d      	movs	r0, #45	; 0x2d
 8000cca:	f002 f9dd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f002 f9da 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3D);
 8000cd4:	203d      	movs	r0, #61	; 0x3d
 8000cd6:	f002 f9d7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f002 f9d4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8000ce0:	205d      	movs	r0, #93	; 0x5d
 8000ce2:	f002 f9d1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f002 f9ce 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8000cec:	205d      	movs	r0, #93	; 0x5d
 8000cee:	f002 f9cb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f002 f9c8 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB1);
 8000cf8:	20b1      	movs	r0, #177	; 0xb1
 8000cfa:	f002 f9d9 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8000cfe:	2080      	movs	r0, #128	; 0x80
 8000d00:	f002 f9c2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f002 f9bf 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8000d0a:	208b      	movs	r0, #139	; 0x8b
 8000d0c:	f002 f9bc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f002 f9b9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x96);
 8000d16:	2096      	movs	r0, #150	; 0x96
 8000d18:	f002 f9b6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f002 f9b3 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8000d22:	20b2      	movs	r0, #178	; 0xb2
 8000d24:	f002 f9c4 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f002 f9ad 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f002 f9aa 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x02);
 8000d34:	2002      	movs	r0, #2
 8000d36:	f002 f9a7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f002 f9a4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x03);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f002 f9a1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f002 f99e 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB3);
 8000d4c:	20b3      	movs	r0, #179	; 0xb3
 8000d4e:	f002 f9af 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f002 f998 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f002 f995 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f002 f992 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f002 f98f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f002 f98c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d70:	2000      	movs	r0, #0
 8000d72:	f002 f989 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f002 f986 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f002 f983 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f002 f980 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f002 f97d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f002 f97a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f002 f977 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f002 f974 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f002 f971 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f002 f96e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f002 f96b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f002 f968 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f002 f965 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f002 f962 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f002 f95f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f002 f95c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f002 f959 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f002 f956 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f002 f953 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8000de2:	20b4      	movs	r0, #180	; 0xb4
 8000de4:	f002 f964 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x8B);
 8000de8:	208b      	movs	r0, #139	; 0x8b
 8000dea:	f002 f94d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f002 f94a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x96);
 8000df4:	2096      	movs	r0, #150	; 0x96
 8000df6:	f002 f947 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f002 f944 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA1);
 8000e00:	20a1      	movs	r0, #161	; 0xa1
 8000e02:	f002 f941 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f002 f93e 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB5);
 8000e0c:	20b5      	movs	r0, #181	; 0xb5
 8000e0e:	f002 f94f 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x02);
 8000e12:	2002      	movs	r0, #2
 8000e14:	f002 f938 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f002 f935 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x03);
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f002 f932 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f002 f92f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x04);
 8000e2a:	2004      	movs	r0, #4
 8000e2c:	f002 f92c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f002 f929 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB6);
 8000e36:	20b6      	movs	r0, #182	; 0xb6
 8000e38:	f002 f93a 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f002 f923 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f002 f920 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8000e48:	20b7      	movs	r0, #183	; 0xb7
 8000e4a:	f002 f931 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f002 f91a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e54:	2000      	movs	r0, #0
 8000e56:	f002 f917 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8000e5a:	203f      	movs	r0, #63	; 0x3f
 8000e5c:	f002 f914 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e60:	2000      	movs	r0, #0
 8000e62:	f002 f911 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x5E);
 8000e66:	205e      	movs	r0, #94	; 0x5e
 8000e68:	f002 f90e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f002 f90b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x64);
 8000e72:	2064      	movs	r0, #100	; 0x64
 8000e74:	f002 f908 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f002 f905 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x8C);
 8000e7e:	208c      	movs	r0, #140	; 0x8c
 8000e80:	f002 f902 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f002 f8ff 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xAC);
 8000e8a:	20ac      	movs	r0, #172	; 0xac
 8000e8c:	f002 f8fc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f002 f8f9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8000e96:	20dc      	movs	r0, #220	; 0xdc
 8000e98:	f002 f8f6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f002 f8f3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x70);
 8000ea2:	2070      	movs	r0, #112	; 0x70
 8000ea4:	f002 f8f0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f002 f8ed 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x90);
 8000eae:	2090      	movs	r0, #144	; 0x90
 8000eb0:	f002 f8ea 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f002 f8e7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xEB);
 8000eba:	20eb      	movs	r0, #235	; 0xeb
 8000ebc:	f002 f8e4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f002 f8e1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8000ec6:	20dc      	movs	r0, #220	; 0xdc
 8000ec8:	f002 f8de 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f002 f8db 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB8);
 8000ed2:	20b8      	movs	r0, #184	; 0xb8
 8000ed4:	f002 f8ec 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f002 f8d5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f002 f8d2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f002 f8cf 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f002 f8cc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f002 f8c9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f002 f8c6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f002 f8c3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f002 f8c0 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xBA);
 8000f08:	20ba      	movs	r0, #186	; 0xba
 8000f0a:	f002 f8d1 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x24);
 8000f0e:	2024      	movs	r0, #36	; 0x24
 8000f10:	f002 f8ba 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f002 f8b7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f002 f8b4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f002 f8b1 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC1);
 8000f26:	20c1      	movs	r0, #193	; 0xc1
 8000f28:	f002 f8c2 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8000f2c:	2020      	movs	r0, #32
 8000f2e:	f002 f8ab 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f002 f8a8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x54);
 8000f38:	2054      	movs	r0, #84	; 0x54
 8000f3a:	f002 f8a5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f002 f8a2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8000f44:	20ff      	movs	r0, #255	; 0xff
 8000f46:	f002 f89f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f002 f89c 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8000f50:	20c2      	movs	r0, #194	; 0xc2
 8000f52:	f002 f8ad 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8000f56:	200a      	movs	r0, #10
 8000f58:	f002 f896 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f002 f893 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x04);
 8000f62:	2004      	movs	r0, #4
 8000f64:	f002 f890 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f002 f88d 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC3);
 8000f6e:	20c3      	movs	r0, #195	; 0xc3
 8000f70:	f002 f89e 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8000f74:	203c      	movs	r0, #60	; 0x3c
 8000f76:	f002 f887 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f002 f884 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3A);
 8000f80:	203a      	movs	r0, #58	; 0x3a
 8000f82:	f002 f881 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f002 f87e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x39);
 8000f8c:	2039      	movs	r0, #57	; 0x39
 8000f8e:	f002 f87b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f002 f878 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x37);
 8000f98:	2037      	movs	r0, #55	; 0x37
 8000f9a:	f002 f875 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f002 f872 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8000fa4:	203c      	movs	r0, #60	; 0x3c
 8000fa6:	f002 f86f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f002 f86c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x36);
 8000fb0:	2036      	movs	r0, #54	; 0x36
 8000fb2:	f002 f869 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f002 f866 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x32);
 8000fbc:	2032      	movs	r0, #50	; 0x32
 8000fbe:	f002 f863 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f002 f860 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2F);
 8000fc8:	202f      	movs	r0, #47	; 0x2f
 8000fca:	f002 f85d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f002 f85a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8000fd4:	202c      	movs	r0, #44	; 0x2c
 8000fd6:	f002 f857 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f002 f854 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x29);
 8000fe0:	2029      	movs	r0, #41	; 0x29
 8000fe2:	f002 f851 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f002 f84e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x26);
 8000fec:	2026      	movs	r0, #38	; 0x26
 8000fee:	f002 f84b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f002 f848 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x24);
 8000ff8:	2024      	movs	r0, #36	; 0x24
 8000ffa:	f002 f845 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f002 f842 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x24);
 8001004:	2024      	movs	r0, #36	; 0x24
 8001006:	f002 f83f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800100a:	2000      	movs	r0, #0
 800100c:	f002 f83c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x23);
 8001010:	2023      	movs	r0, #35	; 0x23
 8001012:	f002 f839 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001016:	2000      	movs	r0, #0
 8001018:	f002 f836 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3C);
 800101c:	203c      	movs	r0, #60	; 0x3c
 800101e:	f002 f833 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001022:	2000      	movs	r0, #0
 8001024:	f002 f830 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x36);
 8001028:	2036      	movs	r0, #54	; 0x36
 800102a:	f002 f82d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800102e:	2000      	movs	r0, #0
 8001030:	f002 f82a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x32);
 8001034:	2032      	movs	r0, #50	; 0x32
 8001036:	f002 f827 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f002 f824 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2F);
 8001040:	202f      	movs	r0, #47	; 0x2f
 8001042:	f002 f821 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001046:	2000      	movs	r0, #0
 8001048:	f002 f81e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2C);
 800104c:	202c      	movs	r0, #44	; 0x2c
 800104e:	f002 f81b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001052:	2000      	movs	r0, #0
 8001054:	f002 f818 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x29);
 8001058:	2029      	movs	r0, #41	; 0x29
 800105a:	f002 f815 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800105e:	2000      	movs	r0, #0
 8001060:	f002 f812 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x26);
 8001064:	2026      	movs	r0, #38	; 0x26
 8001066:	f002 f80f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800106a:	2000      	movs	r0, #0
 800106c:	f002 f80c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x24);
 8001070:	2024      	movs	r0, #36	; 0x24
 8001072:	f002 f809 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001076:	2000      	movs	r0, #0
 8001078:	f002 f806 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x24);
 800107c:	2024      	movs	r0, #36	; 0x24
 800107e:	f002 f803 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001082:	2000      	movs	r0, #0
 8001084:	f002 f800 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x23);
 8001088:	2023      	movs	r0, #35	; 0x23
 800108a:	f001 fffd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800108e:	2000      	movs	r0, #0
 8001090:	f001 fffa 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC4);
 8001094:	20c4      	movs	r0, #196	; 0xc4
 8001096:	f002 f80b 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x62);
 800109a:	2062      	movs	r0, #98	; 0x62
 800109c:	f001 fff4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f001 fff1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x05);
 80010a6:	2005      	movs	r0, #5
 80010a8:	f001 ffee 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f001 ffeb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x84);
 80010b2:	2084      	movs	r0, #132	; 0x84
 80010b4:	f001 ffe8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f001 ffe5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xF0);
 80010be:	20f0      	movs	r0, #240	; 0xf0
 80010c0:	f001 ffe2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f001 ffdf 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x18);
 80010ca:	2018      	movs	r0, #24
 80010cc:	f001 ffdc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f001 ffd9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA4);
 80010d6:	20a4      	movs	r0, #164	; 0xa4
 80010d8:	f001 ffd6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010dc:	2000      	movs	r0, #0
 80010de:	f001 ffd3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x18);
 80010e2:	2018      	movs	r0, #24
 80010e4:	f001 ffd0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f001 ffcd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x50);
 80010ee:	2050      	movs	r0, #80	; 0x50
 80010f0:	f001 ffca 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f001 ffc7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0C);
 80010fa:	200c      	movs	r0, #12
 80010fc:	f001 ffc4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001100:	2000      	movs	r0, #0
 8001102:	f001 ffc1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x17);
 8001106:	2017      	movs	r0, #23
 8001108:	f001 ffbe 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800110c:	2000      	movs	r0, #0
 800110e:	f001 ffbb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x95);
 8001112:	2095      	movs	r0, #149	; 0x95
 8001114:	f001 ffb8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001118:	2000      	movs	r0, #0
 800111a:	f001 ffb5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800111e:	20f3      	movs	r0, #243	; 0xf3
 8001120:	f001 ffb2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001124:	2000      	movs	r0, #0
 8001126:	f001 ffaf 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xE6);
 800112a:	20e6      	movs	r0, #230	; 0xe6
 800112c:	f001 ffac 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001130:	2000      	movs	r0, #0
 8001132:	f001 ffa9 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC5);
 8001136:	20c5      	movs	r0, #197	; 0xc5
 8001138:	f001 ffba 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x32);
 800113c:	2032      	movs	r0, #50	; 0x32
 800113e:	f001 ffa3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001142:	2000      	movs	r0, #0
 8001144:	f001 ffa0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001148:	2044      	movs	r0, #68	; 0x44
 800114a:	f001 ff9d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800114e:	2000      	movs	r0, #0
 8001150:	f001 ff9a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x65);
 8001154:	2065      	movs	r0, #101	; 0x65
 8001156:	f001 ff97 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800115a:	2000      	movs	r0, #0
 800115c:	f001 ff94 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x76);
 8001160:	2076      	movs	r0, #118	; 0x76
 8001162:	f001 ff91 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001166:	2000      	movs	r0, #0
 8001168:	f001 ff8e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x88);
 800116c:	2088      	movs	r0, #136	; 0x88
 800116e:	f001 ff8b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001172:	2000      	movs	r0, #0
 8001174:	f001 ff88 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8001178:	20c6      	movs	r0, #198	; 0xc6
 800117a:	f001 ff99 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x20);
 800117e:	2020      	movs	r0, #32
 8001180:	f001 ff82 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001184:	2000      	movs	r0, #0
 8001186:	f001 ff7f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x17);
 800118a:	2017      	movs	r0, #23
 800118c:	f001 ff7c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001190:	2000      	movs	r0, #0
 8001192:	f001 ff79 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 8001196:	2001      	movs	r0, #1
 8001198:	f001 ff76 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800119c:	2000      	movs	r0, #0
 800119e:	f001 ff73 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC7);
 80011a2:	20c7      	movs	r0, #199	; 0xc7
 80011a4:	f001 ff84 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f001 ff6d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f001 ff6a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f001 ff67 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f001 ff64 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC8);
 80011c0:	20c8      	movs	r0, #200	; 0xc8
 80011c2:	f001 ff75 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f001 ff5e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f001 ff5b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f001 ff58 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011d8:	2000      	movs	r0, #0
 80011da:	f001 ff55 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC9);
 80011de:	20c9      	movs	r0, #201	; 0xc9
 80011e0:	f001 ff66 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f001 ff4f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f001 ff4c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f001 ff49 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f001 ff46 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f001 ff43 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001202:	2000      	movs	r0, #0
 8001204:	f001 ff40 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001208:	2000      	movs	r0, #0
 800120a:	f001 ff3d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800120e:	2000      	movs	r0, #0
 8001210:	f001 ff3a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001214:	2000      	movs	r0, #0
 8001216:	f001 ff37 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800121a:	2000      	movs	r0, #0
 800121c:	f001 ff34 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f001 ff31 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001226:	2000      	movs	r0, #0
 8001228:	f001 ff2e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800122c:	2000      	movs	r0, #0
 800122e:	f001 ff2b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f001 ff28 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001238:	2000      	movs	r0, #0
 800123a:	f001 ff25 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800123e:	2000      	movs	r0, #0
 8001240:	f001 ff22 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8001244:	20e0      	movs	r0, #224	; 0xe0
 8001246:	f001 ff33 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x16);
 800124a:	2016      	movs	r0, #22
 800124c:	f001 ff1c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001250:	2000      	movs	r0, #0
 8001252:	f001 ff19 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x1C);
 8001256:	201c      	movs	r0, #28
 8001258:	f001 ff16 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800125c:	2000      	movs	r0, #0
 800125e:	f001 ff13 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x21);
 8001262:	2021      	movs	r0, #33	; 0x21
 8001264:	f001 ff10 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001268:	2000      	movs	r0, #0
 800126a:	f001 ff0d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x36);
 800126e:	2036      	movs	r0, #54	; 0x36
 8001270:	f001 ff0a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f001 ff07 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x46);
 800127a:	2046      	movs	r0, #70	; 0x46
 800127c:	f001 ff04 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001280:	2000      	movs	r0, #0
 8001282:	f001 ff01 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x52);
 8001286:	2052      	movs	r0, #82	; 0x52
 8001288:	f001 fefe 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800128c:	2000      	movs	r0, #0
 800128e:	f001 fefb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x64);
 8001292:	2064      	movs	r0, #100	; 0x64
 8001294:	f001 fef8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001298:	2000      	movs	r0, #0
 800129a:	f001 fef5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x7A);
 800129e:	207a      	movs	r0, #122	; 0x7a
 80012a0:	f001 fef2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f001 feef 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x8B);
 80012aa:	208b      	movs	r0, #139	; 0x8b
 80012ac:	f001 feec 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f001 fee9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x99);
 80012b6:	2099      	movs	r0, #153	; 0x99
 80012b8:	f001 fee6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012bc:	2000      	movs	r0, #0
 80012be:	f001 fee3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA8);
 80012c2:	20a8      	movs	r0, #168	; 0xa8
 80012c4:	f001 fee0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f001 fedd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xB9);
 80012ce:	20b9      	movs	r0, #185	; 0xb9
 80012d0:	f001 feda 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f001 fed7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xC4);
 80012da:	20c4      	movs	r0, #196	; 0xc4
 80012dc:	f001 fed4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f001 fed1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xCA);
 80012e6:	20ca      	movs	r0, #202	; 0xca
 80012e8:	f001 fece 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f001 fecb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xD2);
 80012f2:	20d2      	movs	r0, #210	; 0xd2
 80012f4:	f001 fec8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f001 fec5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xD9);
 80012fe:	20d9      	movs	r0, #217	; 0xd9
 8001300:	f001 fec2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f001 febf 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xE0);
 800130a:	20e0      	movs	r0, #224	; 0xe0
 800130c:	f001 febc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001310:	2000      	movs	r0, #0
 8001312:	f001 feb9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8001316:	20f3      	movs	r0, #243	; 0xf3
 8001318:	f001 feb6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800131c:	2000      	movs	r0, #0
 800131e:	f001 feb3 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE1);
 8001322:	20e1      	movs	r0, #225	; 0xe1
 8001324:	f001 fec4 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8001328:	2016      	movs	r0, #22
 800132a:	f001 fead 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800132e:	2000      	movs	r0, #0
 8001330:	f001 feaa 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x1C);
 8001334:	201c      	movs	r0, #28
 8001336:	f001 fea7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800133a:	2000      	movs	r0, #0
 800133c:	f001 fea4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x22);
 8001340:	2022      	movs	r0, #34	; 0x22
 8001342:	f001 fea1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f001 fe9e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x36);
 800134c:	2036      	movs	r0, #54	; 0x36
 800134e:	f001 fe9b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001352:	2000      	movs	r0, #0
 8001354:	f001 fe98 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x45);
 8001358:	2045      	movs	r0, #69	; 0x45
 800135a:	f001 fe95 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800135e:	2000      	movs	r0, #0
 8001360:	f001 fe92 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x52);
 8001364:	2052      	movs	r0, #82	; 0x52
 8001366:	f001 fe8f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800136a:	2000      	movs	r0, #0
 800136c:	f001 fe8c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x64);
 8001370:	2064      	movs	r0, #100	; 0x64
 8001372:	f001 fe89 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f001 fe86 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x7A);
 800137c:	207a      	movs	r0, #122	; 0x7a
 800137e:	f001 fe83 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001382:	2000      	movs	r0, #0
 8001384:	f001 fe80 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8001388:	208b      	movs	r0, #139	; 0x8b
 800138a:	f001 fe7d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800138e:	2000      	movs	r0, #0
 8001390:	f001 fe7a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001394:	2099      	movs	r0, #153	; 0x99
 8001396:	f001 fe77 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f001 fe74 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA8);
 80013a0:	20a8      	movs	r0, #168	; 0xa8
 80013a2:	f001 fe71 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f001 fe6e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xB9);
 80013ac:	20b9      	movs	r0, #185	; 0xb9
 80013ae:	f001 fe6b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f001 fe68 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xC4);
 80013b8:	20c4      	movs	r0, #196	; 0xc4
 80013ba:	f001 fe65 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013be:	2000      	movs	r0, #0
 80013c0:	f001 fe62 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xCA);
 80013c4:	20ca      	movs	r0, #202	; 0xca
 80013c6:	f001 fe5f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f001 fe5c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xD2);
 80013d0:	20d2      	movs	r0, #210	; 0xd2
 80013d2:	f001 fe59 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f001 fe56 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xD8);
 80013dc:	20d8      	movs	r0, #216	; 0xd8
 80013de:	f001 fe53 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f001 fe50 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xE0);
 80013e8:	20e0      	movs	r0, #224	; 0xe0
 80013ea:	f001 fe4d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f001 fe4a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80013f4:	20f3      	movs	r0, #243	; 0xf3
 80013f6:	f001 fe47 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f001 fe44 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE2);
 8001400:	20e2      	movs	r0, #226	; 0xe2
 8001402:	f001 fe55 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x05);
 8001406:	2005      	movs	r0, #5
 8001408:	f001 fe3e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800140c:	2000      	movs	r0, #0
 800140e:	f001 fe3b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0B);
 8001412:	200b      	movs	r0, #11
 8001414:	f001 fe38 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001418:	2000      	movs	r0, #0
 800141a:	f001 fe35 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x1B);
 800141e:	201b      	movs	r0, #27
 8001420:	f001 fe32 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001424:	2000      	movs	r0, #0
 8001426:	f001 fe2f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x34);
 800142a:	2034      	movs	r0, #52	; 0x34
 800142c:	f001 fe2c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001430:	2000      	movs	r0, #0
 8001432:	f001 fe29 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001436:	2044      	movs	r0, #68	; 0x44
 8001438:	f001 fe26 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800143c:	2000      	movs	r0, #0
 800143e:	f001 fe23 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x4F);
 8001442:	204f      	movs	r0, #79	; 0x4f
 8001444:	f001 fe20 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001448:	2000      	movs	r0, #0
 800144a:	f001 fe1d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x61);
 800144e:	2061      	movs	r0, #97	; 0x61
 8001450:	f001 fe1a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001454:	2000      	movs	r0, #0
 8001456:	f001 fe17 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x79);
 800145a:	2079      	movs	r0, #121	; 0x79
 800145c:	f001 fe14 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001460:	2000      	movs	r0, #0
 8001462:	f001 fe11 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001466:	2088      	movs	r0, #136	; 0x88
 8001468:	f001 fe0e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800146c:	2000      	movs	r0, #0
 800146e:	f001 fe0b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x97);
 8001472:	2097      	movs	r0, #151	; 0x97
 8001474:	f001 fe08 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001478:	2000      	movs	r0, #0
 800147a:	f001 fe05 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA6);
 800147e:	20a6      	movs	r0, #166	; 0xa6
 8001480:	f001 fe02 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001484:	2000      	movs	r0, #0
 8001486:	f001 fdff 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xB7);
 800148a:	20b7      	movs	r0, #183	; 0xb7
 800148c:	f001 fdfc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001490:	2000      	movs	r0, #0
 8001492:	f001 fdf9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xC2);
 8001496:	20c2      	movs	r0, #194	; 0xc2
 8001498:	f001 fdf6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800149c:	2000      	movs	r0, #0
 800149e:	f001 fdf3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xC7);
 80014a2:	20c7      	movs	r0, #199	; 0xc7
 80014a4:	f001 fdf0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f001 fded 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xD1);
 80014ae:	20d1      	movs	r0, #209	; 0xd1
 80014b0:	f001 fdea 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f001 fde7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xD6);
 80014ba:	20d6      	movs	r0, #214	; 0xd6
 80014bc:	f001 fde4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f001 fde1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xDD);
 80014c6:	20dd      	movs	r0, #221	; 0xdd
 80014c8:	f001 fdde 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f001 fddb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80014d2:	20f3      	movs	r0, #243	; 0xf3
 80014d4:	f001 fdd8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014d8:	2000      	movs	r0, #0
 80014da:	f001 fdd5 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xE3);
 80014de:	20e3      	movs	r0, #227	; 0xe3
 80014e0:	f001 fde6 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x05);
 80014e4:	2005      	movs	r0, #5
 80014e6:	f001 fdcf 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f001 fdcc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA);
 80014f0:	200a      	movs	r0, #10
 80014f2:	f001 fdc9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f001 fdc6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x1C);
 80014fc:	201c      	movs	r0, #28
 80014fe:	f001 fdc3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001502:	2000      	movs	r0, #0
 8001504:	f001 fdc0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x33);
 8001508:	2033      	movs	r0, #51	; 0x33
 800150a:	f001 fdbd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800150e:	2000      	movs	r0, #0
 8001510:	f001 fdba 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001514:	2044      	movs	r0, #68	; 0x44
 8001516:	f001 fdb7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800151a:	2000      	movs	r0, #0
 800151c:	f001 fdb4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x50);
 8001520:	2050      	movs	r0, #80	; 0x50
 8001522:	f001 fdb1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001526:	2000      	movs	r0, #0
 8001528:	f001 fdae 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x62);
 800152c:	2062      	movs	r0, #98	; 0x62
 800152e:	f001 fdab 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001532:	2000      	movs	r0, #0
 8001534:	f001 fda8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x78);
 8001538:	2078      	movs	r0, #120	; 0x78
 800153a:	f001 fda5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800153e:	2000      	movs	r0, #0
 8001540:	f001 fda2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001544:	2088      	movs	r0, #136	; 0x88
 8001546:	f001 fd9f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800154a:	2000      	movs	r0, #0
 800154c:	f001 fd9c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x97);
 8001550:	2097      	movs	r0, #151	; 0x97
 8001552:	f001 fd99 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001556:	2000      	movs	r0, #0
 8001558:	f001 fd96 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA6);
 800155c:	20a6      	movs	r0, #166	; 0xa6
 800155e:	f001 fd93 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001562:	2000      	movs	r0, #0
 8001564:	f001 fd90 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xB7);
 8001568:	20b7      	movs	r0, #183	; 0xb7
 800156a:	f001 fd8d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800156e:	2000      	movs	r0, #0
 8001570:	f001 fd8a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xC2);
 8001574:	20c2      	movs	r0, #194	; 0xc2
 8001576:	f001 fd87 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800157a:	2000      	movs	r0, #0
 800157c:	f001 fd84 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xC7);
 8001580:	20c7      	movs	r0, #199	; 0xc7
 8001582:	f001 fd81 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001586:	2000      	movs	r0, #0
 8001588:	f001 fd7e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xD1);
 800158c:	20d1      	movs	r0, #209	; 0xd1
 800158e:	f001 fd7b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001592:	2000      	movs	r0, #0
 8001594:	f001 fd78 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xD5);
 8001598:	20d5      	movs	r0, #213	; 0xd5
 800159a:	f001 fd75 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800159e:	2000      	movs	r0, #0
 80015a0:	f001 fd72 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xDD);
 80015a4:	20dd      	movs	r0, #221	; 0xdd
 80015a6:	f001 fd6f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f001 fd6c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80015b0:	20f3      	movs	r0, #243	; 0xf3
 80015b2:	f001 fd69 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f001 fd66 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE4);
 80015bc:	20e4      	movs	r0, #228	; 0xe4
 80015be:	f001 fd77 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x01);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f001 fd60 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f001 fd5d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f001 fd5a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f001 fd57 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x02);
 80015da:	2002      	movs	r0, #2
 80015dc:	f001 fd54 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f001 fd51 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2A);
 80015e6:	202a      	movs	r0, #42	; 0x2a
 80015e8:	f001 fd4e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f001 fd4b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3C);
 80015f2:	203c      	movs	r0, #60	; 0x3c
 80015f4:	f001 fd48 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f001 fd45 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x4B);
 80015fe:	204b      	movs	r0, #75	; 0x4b
 8001600:	f001 fd42 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001604:	2000      	movs	r0, #0
 8001606:	f001 fd3f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x5D);
 800160a:	205d      	movs	r0, #93	; 0x5d
 800160c:	f001 fd3c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001610:	2000      	movs	r0, #0
 8001612:	f001 fd39 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x74);
 8001616:	2074      	movs	r0, #116	; 0x74
 8001618:	f001 fd36 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800161c:	2000      	movs	r0, #0
 800161e:	f001 fd33 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x84);
 8001622:	2084      	movs	r0, #132	; 0x84
 8001624:	f001 fd30 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001628:	2000      	movs	r0, #0
 800162a:	f001 fd2d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x93);
 800162e:	2093      	movs	r0, #147	; 0x93
 8001630:	f001 fd2a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001634:	2000      	movs	r0, #0
 8001636:	f001 fd27 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA2);
 800163a:	20a2      	movs	r0, #162	; 0xa2
 800163c:	f001 fd24 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001640:	2000      	movs	r0, #0
 8001642:	f001 fd21 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xB3);
 8001646:	20b3      	movs	r0, #179	; 0xb3
 8001648:	f001 fd1e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800164c:	2000      	movs	r0, #0
 800164e:	f001 fd1b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xBE);
 8001652:	20be      	movs	r0, #190	; 0xbe
 8001654:	f001 fd18 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001658:	2000      	movs	r0, #0
 800165a:	f001 fd15 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xC4);
 800165e:	20c4      	movs	r0, #196	; 0xc4
 8001660:	f001 fd12 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001664:	2000      	movs	r0, #0
 8001666:	f001 fd0f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xCD);
 800166a:	20cd      	movs	r0, #205	; 0xcd
 800166c:	f001 fd0c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001670:	2000      	movs	r0, #0
 8001672:	f001 fd09 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xD3);
 8001676:	20d3      	movs	r0, #211	; 0xd3
 8001678:	f001 fd06 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800167c:	2000      	movs	r0, #0
 800167e:	f001 fd03 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xDD);
 8001682:	20dd      	movs	r0, #221	; 0xdd
 8001684:	f001 fd00 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001688:	2000      	movs	r0, #0
 800168a:	f001 fcfd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800168e:	20f3      	movs	r0, #243	; 0xf3
 8001690:	f001 fcfa 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001694:	2000      	movs	r0, #0
 8001696:	f001 fcf7 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xE5);
 800169a:	20e5      	movs	r0, #229	; 0xe5
 800169c:	f001 fd08 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f001 fcf1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f001 fcee 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f001 fceb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f001 fce8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x02);
 80016b8:	2002      	movs	r0, #2
 80016ba:	f001 fce5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016be:	2000      	movs	r0, #0
 80016c0:	f001 fce2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x29);
 80016c4:	2029      	movs	r0, #41	; 0x29
 80016c6:	f001 fcdf 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f001 fcdc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x3C);
 80016d0:	203c      	movs	r0, #60	; 0x3c
 80016d2:	f001 fcd9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f001 fcd6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x4B);
 80016dc:	204b      	movs	r0, #75	; 0x4b
 80016de:	f001 fcd3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f001 fcd0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x5D);
 80016e8:	205d      	movs	r0, #93	; 0x5d
 80016ea:	f001 fccd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f001 fcca 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x74);
 80016f4:	2074      	movs	r0, #116	; 0x74
 80016f6:	f001 fcc7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f001 fcc4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x84);
 8001700:	2084      	movs	r0, #132	; 0x84
 8001702:	f001 fcc1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001706:	2000      	movs	r0, #0
 8001708:	f001 fcbe 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x93);
 800170c:	2093      	movs	r0, #147	; 0x93
 800170e:	f001 fcbb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001712:	2000      	movs	r0, #0
 8001714:	f001 fcb8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001718:	20a2      	movs	r0, #162	; 0xa2
 800171a:	f001 fcb5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800171e:	2000      	movs	r0, #0
 8001720:	f001 fcb2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xB3);
 8001724:	20b3      	movs	r0, #179	; 0xb3
 8001726:	f001 fcaf 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800172a:	2000      	movs	r0, #0
 800172c:	f001 fcac 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xBE);
 8001730:	20be      	movs	r0, #190	; 0xbe
 8001732:	f001 fca9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001736:	2000      	movs	r0, #0
 8001738:	f001 fca6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xC4);
 800173c:	20c4      	movs	r0, #196	; 0xc4
 800173e:	f001 fca3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001742:	2000      	movs	r0, #0
 8001744:	f001 fca0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xCD);
 8001748:	20cd      	movs	r0, #205	; 0xcd
 800174a:	f001 fc9d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800174e:	2000      	movs	r0, #0
 8001750:	f001 fc9a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xD3);
 8001754:	20d3      	movs	r0, #211	; 0xd3
 8001756:	f001 fc97 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800175a:	2000      	movs	r0, #0
 800175c:	f001 fc94 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8001760:	20dc      	movs	r0, #220	; 0xdc
 8001762:	f001 fc91 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001766:	2000      	movs	r0, #0
 8001768:	f001 fc8e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800176c:	20f3      	movs	r0, #243	; 0xf3
 800176e:	f001 fc8b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001772:	2000      	movs	r0, #0
 8001774:	f001 fc88 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE6);
 8001778:	20e6      	movs	r0, #230	; 0xe6
 800177a:	f001 fc99 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x11);
 800177e:	2011      	movs	r0, #17
 8001780:	f001 fc82 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001784:	2000      	movs	r0, #0
 8001786:	f001 fc7f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x34);
 800178a:	2034      	movs	r0, #52	; 0x34
 800178c:	f001 fc7c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001790:	2000      	movs	r0, #0
 8001792:	f001 fc79 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x56);
 8001796:	2056      	movs	r0, #86	; 0x56
 8001798:	f001 fc76 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800179c:	2000      	movs	r0, #0
 800179e:	f001 fc73 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x76);
 80017a2:	2076      	movs	r0, #118	; 0x76
 80017a4:	f001 fc70 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f001 fc6d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x77);
 80017ae:	2077      	movs	r0, #119	; 0x77
 80017b0:	f001 fc6a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f001 fc67 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x66);
 80017ba:	2066      	movs	r0, #102	; 0x66
 80017bc:	f001 fc64 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f001 fc61 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x88);
 80017c6:	2088      	movs	r0, #136	; 0x88
 80017c8:	f001 fc5e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f001 fc5b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x99);
 80017d2:	2099      	movs	r0, #153	; 0x99
 80017d4:	f001 fc58 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017d8:	2000      	movs	r0, #0
 80017da:	f001 fc55 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xBB);
 80017de:	20bb      	movs	r0, #187	; 0xbb
 80017e0:	f001 fc52 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f001 fc4f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x99);
 80017ea:	2099      	movs	r0, #153	; 0x99
 80017ec:	f001 fc4c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f001 fc49 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x66);
 80017f6:	2066      	movs	r0, #102	; 0x66
 80017f8:	f001 fc46 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f001 fc43 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001802:	2055      	movs	r0, #85	; 0x55
 8001804:	f001 fc40 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f001 fc3d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x55);
 800180e:	2055      	movs	r0, #85	; 0x55
 8001810:	f001 fc3a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001814:	2000      	movs	r0, #0
 8001816:	f001 fc37 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x45);
 800181a:	2045      	movs	r0, #69	; 0x45
 800181c:	f001 fc34 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001820:	2000      	movs	r0, #0
 8001822:	f001 fc31 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x43);
 8001826:	2043      	movs	r0, #67	; 0x43
 8001828:	f001 fc2e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f001 fc2b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001832:	2044      	movs	r0, #68	; 0x44
 8001834:	f001 fc28 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001838:	2000      	movs	r0, #0
 800183a:	f001 fc25 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE7);
 800183e:	20e7      	movs	r0, #231	; 0xe7
 8001840:	f001 fc36 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8001844:	2032      	movs	r0, #50	; 0x32
 8001846:	f001 fc1f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800184a:	2000      	movs	r0, #0
 800184c:	f001 fc1c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x55);
 8001850:	2055      	movs	r0, #85	; 0x55
 8001852:	f001 fc19 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001856:	2000      	movs	r0, #0
 8001858:	f001 fc16 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x76);
 800185c:	2076      	movs	r0, #118	; 0x76
 800185e:	f001 fc13 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001862:	2000      	movs	r0, #0
 8001864:	f001 fc10 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001868:	2066      	movs	r0, #102	; 0x66
 800186a:	f001 fc0d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800186e:	2000      	movs	r0, #0
 8001870:	f001 fc0a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x67);
 8001874:	2067      	movs	r0, #103	; 0x67
 8001876:	f001 fc07 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800187a:	2000      	movs	r0, #0
 800187c:	f001 fc04 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x67);
 8001880:	2067      	movs	r0, #103	; 0x67
 8001882:	f001 fc01 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001886:	2000      	movs	r0, #0
 8001888:	f001 fbfe 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x87);
 800188c:	2087      	movs	r0, #135	; 0x87
 800188e:	f001 fbfb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001892:	2000      	movs	r0, #0
 8001894:	f001 fbf8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001898:	2099      	movs	r0, #153	; 0x99
 800189a:	f001 fbf5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800189e:	2000      	movs	r0, #0
 80018a0:	f001 fbf2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xBB);
 80018a4:	20bb      	movs	r0, #187	; 0xbb
 80018a6:	f001 fbef 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f001 fbec 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x99);
 80018b0:	2099      	movs	r0, #153	; 0x99
 80018b2:	f001 fbe9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f001 fbe6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x77);
 80018bc:	2077      	movs	r0, #119	; 0x77
 80018be:	f001 fbe3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f001 fbe0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x44);
 80018c8:	2044      	movs	r0, #68	; 0x44
 80018ca:	f001 fbdd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f001 fbda 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x56);
 80018d4:	2056      	movs	r0, #86	; 0x56
 80018d6:	f001 fbd7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018da:	2000      	movs	r0, #0
 80018dc:	f001 fbd4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x23);
 80018e0:	2023      	movs	r0, #35	; 0x23
 80018e2:	f001 fbd1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f001 fbce 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x33);
 80018ec:	2033      	movs	r0, #51	; 0x33
 80018ee:	f001 fbcb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f001 fbc8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x45);
 80018f8:	2045      	movs	r0, #69	; 0x45
 80018fa:	f001 fbc5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80018fe:	2000      	movs	r0, #0
 8001900:	f001 fbc2 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8001904:	20e8      	movs	r0, #232	; 0xe8
 8001906:	f001 fbd3 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800190a:	2000      	movs	r0, #0
 800190c:	f001 fbbc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001910:	2000      	movs	r0, #0
 8001912:	f001 fbb9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001916:	2099      	movs	r0, #153	; 0x99
 8001918:	f001 fbb6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800191c:	2000      	movs	r0, #0
 800191e:	f001 fbb3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x87);
 8001922:	2087      	movs	r0, #135	; 0x87
 8001924:	f001 fbb0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001928:	2000      	movs	r0, #0
 800192a:	f001 fbad 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x88);
 800192e:	2088      	movs	r0, #136	; 0x88
 8001930:	f001 fbaa 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001934:	2000      	movs	r0, #0
 8001936:	f001 fba7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x77);
 800193a:	2077      	movs	r0, #119	; 0x77
 800193c:	f001 fba4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001940:	2000      	movs	r0, #0
 8001942:	f001 fba1 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001946:	2066      	movs	r0, #102	; 0x66
 8001948:	f001 fb9e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800194c:	2000      	movs	r0, #0
 800194e:	f001 fb9b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x88);
 8001952:	2088      	movs	r0, #136	; 0x88
 8001954:	f001 fb98 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001958:	2000      	movs	r0, #0
 800195a:	f001 fb95 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xAA);
 800195e:	20aa      	movs	r0, #170	; 0xaa
 8001960:	f001 fb92 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001964:	2000      	movs	r0, #0
 8001966:	f001 fb8f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xBB);
 800196a:	20bb      	movs	r0, #187	; 0xbb
 800196c:	f001 fb8c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001970:	2000      	movs	r0, #0
 8001972:	f001 fb89 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x99);
 8001976:	2099      	movs	r0, #153	; 0x99
 8001978:	f001 fb86 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 800197c:	2000      	movs	r0, #0
 800197e:	f001 fb83 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x66);
 8001982:	2066      	movs	r0, #102	; 0x66
 8001984:	f001 fb80 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001988:	2000      	movs	r0, #0
 800198a:	f001 fb7d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x55);
 800198e:	2055      	movs	r0, #85	; 0x55
 8001990:	f001 fb7a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001994:	2000      	movs	r0, #0
 8001996:	f001 fb77 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x55);
 800199a:	2055      	movs	r0, #85	; 0x55
 800199c:	f001 fb74 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f001 fb71 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x44);
 80019a6:	2044      	movs	r0, #68	; 0x44
 80019a8:	f001 fb6e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f001 fb6b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x44);
 80019b2:	2044      	movs	r0, #68	; 0x44
 80019b4:	f001 fb68 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f001 fb65 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x55);
 80019be:	2055      	movs	r0, #85	; 0x55
 80019c0:	f001 fb62 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f001 fb5f 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE9);
 80019ca:	20e9      	movs	r0, #233	; 0xe9
 80019cc:	f001 fb70 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 80019d0:	20aa      	movs	r0, #170	; 0xaa
 80019d2:	f001 fb59 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f001 fb56 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019dc:	2000      	movs	r0, #0
 80019de:	f001 fb53 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f001 fb50 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x00);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f001 fb61 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 80019ee:	20aa      	movs	r0, #170	; 0xaa
 80019f0:	f001 fb4a 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xCF);
 80019f4:	20cf      	movs	r0, #207	; 0xcf
 80019f6:	f001 fb5b 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f001 fb44 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f001 fb41 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f001 fb3e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f001 fb3b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f001 fb38 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f001 fb35 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f001 fb32 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f001 fb2f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f001 fb2c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f001 fb29 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f001 fb26 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f001 fb23 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f001 fb20 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f001 fb1d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f001 fb1a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f001 fb17 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f001 fb14 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001a60:	20f0      	movs	r0, #240	; 0xf0
 8001a62:	f001 fb25 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f001 fb0e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x50);
 8001a6c:	2050      	movs	r0, #80	; 0x50
 8001a6e:	f001 fb0b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f001 fb08 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f001 fb05 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f001 fb02 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xF3);
 8001a84:	20f3      	movs	r0, #243	; 0xf3
 8001a86:	f001 fb13 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f001 fafc 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xF9);
 8001a90:	20f9      	movs	r0, #249	; 0xf9
 8001a92:	f001 fb0d 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x06);
 8001a96:	2006      	movs	r0, #6
 8001a98:	f001 faf6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001a9c:	2010      	movs	r0, #16
 8001a9e:	f001 faf3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x29);
 8001aa2:	2029      	movs	r0, #41	; 0x29
 8001aa4:	f001 faf0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f001 faed 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8001aae:	203a      	movs	r0, #58	; 0x3a
 8001ab0:	f001 fafe 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x55);  /* 66 */
 8001ab4:	2055      	movs	r0, #85	; 0x55
 8001ab6:	f001 fae7 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x11);
 8001aba:	2011      	movs	r0, #17
 8001abc:	f001 faf8 	bl	80030b0 <lcd_wr_regno>
    HAL_Delay(100);
 8001ac0:	2064      	movs	r0, #100	; 0x64
 8001ac2:	f002 fecb 	bl	800485c <HAL_Delay>
    lcd_wr_regno(0x29);
 8001ac6:	2029      	movs	r0, #41	; 0x29
 8001ac8:	f001 faf2 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_regno(0x35);
 8001acc:	2035      	movs	r0, #53	; 0x35
 8001ace:	f001 faef 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f001 fad8 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x51);
 8001ad8:	2051      	movs	r0, #81	; 0x51
 8001ada:	f001 fae9 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8001ade:	20ff      	movs	r0, #255	; 0xff
 8001ae0:	f001 fad2 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0x53);
 8001ae4:	2053      	movs	r0, #83	; 0x53
 8001ae6:	f001 fae3 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x2C);
 8001aea:	202c      	movs	r0, #44	; 0x2c
 8001aec:	f001 facc 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0x55);
 8001af0:	2055      	movs	r0, #85	; 0x55
 8001af2:	f001 fadd 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x82);
 8001af6:	2082      	movs	r0, #130	; 0x82
 8001af8:	f001 fac6 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0x2c);
 8001afc:	202c      	movs	r0, #44	; 0x2c
 8001afe:	f001 fad7 	bl	80030b0 <lcd_wr_regno>
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <lcd_ex_st7796_reginit>:
 * @brief  ST7796 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7796_reginit(void)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8001b0a:	2011      	movs	r0, #17
 8001b0c:	f001 fad0 	bl	80030b0 <lcd_wr_regno>

    HAL_Delay(120);
 8001b10:	2078      	movs	r0, #120	; 0x78
 8001b12:	f002 fea3 	bl	800485c <HAL_Delay>

    lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
 8001b16:	2036      	movs	r0, #54	; 0x36
 8001b18:	f001 faca 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8001b1c:	2048      	movs	r0, #72	; 0x48
 8001b1e:	f001 fab3 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8001b22:	203a      	movs	r0, #58	; 0x3a
 8001b24:	f001 fac4 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8001b28:	2055      	movs	r0, #85	; 0x55
 8001b2a:	f001 faad 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001b2e:	20f0      	movs	r0, #240	; 0xf0
 8001b30:	f001 fabe 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xC3);
 8001b34:	20c3      	movs	r0, #195	; 0xc3
 8001b36:	f001 faa7 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001b3a:	20f0      	movs	r0, #240	; 0xf0
 8001b3c:	f001 fab8 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x96);
 8001b40:	2096      	movs	r0, #150	; 0x96
 8001b42:	f001 faa1 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8001b46:	20b4      	movs	r0, #180	; 0xb4
 8001b48:	f001 fab2 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f001 fa9b 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB6); /* Display Function Control */
 8001b52:	20b6      	movs	r0, #182	; 0xb6
 8001b54:	f001 faac 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8001b58:	200a      	movs	r0, #10
 8001b5a:	f001 fa95 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001b5e:	20a2      	movs	r0, #162	; 0xa2
 8001b60:	f001 fa92 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8001b64:	20b7      	movs	r0, #183	; 0xb7
 8001b66:	f001 faa3 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xC6);
 8001b6a:	20c6      	movs	r0, #198	; 0xc6
 8001b6c:	f001 fa8c 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB9);
 8001b70:	20b9      	movs	r0, #185	; 0xb9
 8001b72:	f001 fa9d 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x02);
 8001b76:	2002      	movs	r0, #2
 8001b78:	f001 fa86 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xE0);
 8001b7c:	20e0      	movs	r0, #224	; 0xe0
 8001b7e:	f001 fa83 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8001b82:	20c0      	movs	r0, #192	; 0xc0
 8001b84:	f001 fa94 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8001b88:	2080      	movs	r0, #128	; 0x80
 8001b8a:	f001 fa7d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x16);
 8001b8e:	2016      	movs	r0, #22
 8001b90:	f001 fa7a 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC1);
 8001b94:	20c1      	movs	r0, #193	; 0xc1
 8001b96:	f001 fa8b 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x19);
 8001b9a:	2019      	movs	r0, #25
 8001b9c:	f001 fa74 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8001ba0:	20c2      	movs	r0, #194	; 0xc2
 8001ba2:	f001 fa85 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xA7);
 8001ba6:	20a7      	movs	r0, #167	; 0xa7
 8001ba8:	f001 fa6e 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC5);
 8001bac:	20c5      	movs	r0, #197	; 0xc5
 8001bae:	f001 fa7f 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8001bb2:	2016      	movs	r0, #22
 8001bb4:	f001 fa68 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8001bb8:	20e8      	movs	r0, #232	; 0xe8
 8001bba:	f001 fa79 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x40);
 8001bbe:	2040      	movs	r0, #64	; 0x40
 8001bc0:	f001 fa62 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x8A);
 8001bc4:	208a      	movs	r0, #138	; 0x8a
 8001bc6:	f001 fa5f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f001 fa5c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f001 fa59 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x29);
 8001bd6:	2029      	movs	r0, #41	; 0x29
 8001bd8:	f001 fa56 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x19);
 8001bdc:	2019      	movs	r0, #25
 8001bde:	f001 fa53 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xA5);
 8001be2:	20a5      	movs	r0, #165	; 0xa5
 8001be4:	f001 fa50 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x33);
 8001be8:	2033      	movs	r0, #51	; 0x33
 8001bea:	f001 fa4d 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8001bee:	20e0      	movs	r0, #224	; 0xe0
 8001bf0:	f001 fa5e 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8001bf4:	20f0      	movs	r0, #240	; 0xf0
 8001bf6:	f001 fa47 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x07);
 8001bfa:	2007      	movs	r0, #7
 8001bfc:	f001 fa44 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0D);
 8001c00:	200d      	movs	r0, #13
 8001c02:	f001 fa41 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x04);
 8001c06:	2004      	movs	r0, #4
 8001c08:	f001 fa3e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x05);
 8001c0c:	2005      	movs	r0, #5
 8001c0e:	f001 fa3b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x14);
 8001c12:	2014      	movs	r0, #20
 8001c14:	f001 fa38 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x36);
 8001c18:	2036      	movs	r0, #54	; 0x36
 8001c1a:	f001 fa35 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x54);
 8001c1e:	2054      	movs	r0, #84	; 0x54
 8001c20:	f001 fa32 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x4C);
 8001c24:	204c      	movs	r0, #76	; 0x4c
 8001c26:	f001 fa2f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x38);
 8001c2a:	2038      	movs	r0, #56	; 0x38
 8001c2c:	f001 fa2c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x13);
 8001c30:	2013      	movs	r0, #19
 8001c32:	f001 fa29 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x14);
 8001c36:	2014      	movs	r0, #20
 8001c38:	f001 fa26 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2E);
 8001c3c:	202e      	movs	r0, #46	; 0x2e
 8001c3e:	f001 fa23 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x34);
 8001c42:	2034      	movs	r0, #52	; 0x34
 8001c44:	f001 fa20 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE1);
 8001c48:	20e1      	movs	r0, #225	; 0xe1
 8001c4a:	f001 fa31 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8001c4e:	20f0      	movs	r0, #240	; 0xf0
 8001c50:	f001 fa1a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001c54:	2010      	movs	r0, #16
 8001c56:	f001 fa17 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x14);
 8001c5a:	2014      	movs	r0, #20
 8001c5c:	f001 fa14 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0E);
 8001c60:	200e      	movs	r0, #14
 8001c62:	f001 fa11 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8001c66:	200c      	movs	r0, #12
 8001c68:	f001 fa0e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x08);
 8001c6c:	2008      	movs	r0, #8
 8001c6e:	f001 fa0b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x35);
 8001c72:	2035      	movs	r0, #53	; 0x35
 8001c74:	f001 fa08 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x44);
 8001c78:	2044      	movs	r0, #68	; 0x44
 8001c7a:	f001 fa05 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x4C);
 8001c7e:	204c      	movs	r0, #76	; 0x4c
 8001c80:	f001 fa02 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x26);
 8001c84:	2026      	movs	r0, #38	; 0x26
 8001c86:	f001 f9ff 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001c8a:	2010      	movs	r0, #16
 8001c8c:	f001 f9fc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x12);
 8001c90:	2012      	movs	r0, #18
 8001c92:	f001 f9f9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8001c96:	202c      	movs	r0, #44	; 0x2c
 8001c98:	f001 f9f6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x32);
 8001c9c:	2032      	movs	r0, #50	; 0x32
 8001c9e:	f001 f9f3 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001ca2:	20f0      	movs	r0, #240	; 0xf0
 8001ca4:	f001 fa04 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8001ca8:	203c      	movs	r0, #60	; 0x3c
 8001caa:	f001 f9ed 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8001cae:	20f0      	movs	r0, #240	; 0xf0
 8001cb0:	f001 f9fe 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x69);
 8001cb4:	2069      	movs	r0, #105	; 0x69
 8001cb6:	f001 f9e7 	bl	8003088 <lcd_wr_data>

    HAL_Delay(120);
 8001cba:	2078      	movs	r0, #120	; 0x78
 8001cbc:	f002 fdce 	bl	800485c <HAL_Delay>

    lcd_wr_regno(0x21);
 8001cc0:	2021      	movs	r0, #33	; 0x21
 8001cc2:	f001 f9f5 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_regno(0x29);
 8001cc6:	2029      	movs	r0, #41	; 0x29
 8001cc8:	f001 f9f2 	bl	80030b0 <lcd_wr_regno>
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <lcd_ex_nt35510_reginit>:
 * @brief  NT35510 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35510_reginit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
    lcd_write_reg(0xF000, 0x55);
 8001cd4:	2155      	movs	r1, #85	; 0x55
 8001cd6:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8001cda:	f001 f9fd 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8001cde:	21aa      	movs	r1, #170	; 0xaa
 8001ce0:	f24f 0001 	movw	r0, #61441	; 0xf001
 8001ce4:	f001 f9f8 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8001ce8:	2152      	movs	r1, #82	; 0x52
 8001cea:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001cee:	f001 f9f3 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8001cf2:	2108      	movs	r1, #8
 8001cf4:	f24f 0003 	movw	r0, #61443	; 0xf003
 8001cf8:	f001 f9ee 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x01);
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	f24f 0004 	movw	r0, #61444	; 0xf004
 8001d02:	f001 f9e9 	bl	80030d8 <lcd_write_reg>
    /* AVDD Set AVDD 5.2V */
    lcd_write_reg(0xB000, 0x0D);
 8001d06:	210d      	movs	r1, #13
 8001d08:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8001d0c:	f001 f9e4 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB001, 0x0D);
 8001d10:	210d      	movs	r1, #13
 8001d12:	f24b 0001 	movw	r0, #45057	; 0xb001
 8001d16:	f001 f9df 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB002, 0x0D);
 8001d1a:	210d      	movs	r1, #13
 8001d1c:	f24b 0002 	movw	r0, #45058	; 0xb002
 8001d20:	f001 f9da 	bl	80030d8 <lcd_write_reg>
    /* AVDD ratio */
    lcd_write_reg(0xB600, 0x34);
 8001d24:	2134      	movs	r1, #52	; 0x34
 8001d26:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8001d2a:	f001 f9d5 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB601, 0x34);
 8001d2e:	2134      	movs	r1, #52	; 0x34
 8001d30:	f24b 6001 	movw	r0, #46593	; 0xb601
 8001d34:	f001 f9d0 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB602, 0x34);
 8001d38:	2134      	movs	r1, #52	; 0x34
 8001d3a:	f24b 6002 	movw	r0, #46594	; 0xb602
 8001d3e:	f001 f9cb 	bl	80030d8 <lcd_write_reg>
    /* AVEE -5.2V */
    lcd_write_reg(0xB100, 0x0D);
 8001d42:	210d      	movs	r1, #13
 8001d44:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8001d48:	f001 f9c6 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x0D);
 8001d4c:	210d      	movs	r1, #13
 8001d4e:	f24b 1001 	movw	r0, #45313	; 0xb101
 8001d52:	f001 f9c1 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB102, 0x0D);
 8001d56:	210d      	movs	r1, #13
 8001d58:	f24b 1002 	movw	r0, #45314	; 0xb102
 8001d5c:	f001 f9bc 	bl	80030d8 <lcd_write_reg>
    /* AVEE ratio */
    lcd_write_reg(0xB700, 0x34);
 8001d60:	2134      	movs	r1, #52	; 0x34
 8001d62:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8001d66:	f001 f9b7 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x34);
 8001d6a:	2134      	movs	r1, #52	; 0x34
 8001d6c:	f24b 7001 	movw	r0, #46849	; 0xb701
 8001d70:	f001 f9b2 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB702, 0x34);
 8001d74:	2134      	movs	r1, #52	; 0x34
 8001d76:	f24b 7002 	movw	r0, #46850	; 0xb702
 8001d7a:	f001 f9ad 	bl	80030d8 <lcd_write_reg>
    /* VCL -2.5V */
    lcd_write_reg(0xB200, 0x00);
 8001d7e:	2100      	movs	r1, #0
 8001d80:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8001d84:	f001 f9a8 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB201, 0x00);
 8001d88:	2100      	movs	r1, #0
 8001d8a:	f24b 2001 	movw	r0, #45569	; 0xb201
 8001d8e:	f001 f9a3 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB202, 0x00);
 8001d92:	2100      	movs	r1, #0
 8001d94:	f24b 2002 	movw	r0, #45570	; 0xb202
 8001d98:	f001 f99e 	bl	80030d8 <lcd_write_reg>
    /* VCL ratio */
    lcd_write_reg(0xB800, 0x24);
 8001d9c:	2124      	movs	r1, #36	; 0x24
 8001d9e:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8001da2:	f001 f999 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x24);
 8001da6:	2124      	movs	r1, #36	; 0x24
 8001da8:	f64b 0001 	movw	r0, #47105	; 0xb801
 8001dac:	f001 f994 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x24);
 8001db0:	2124      	movs	r1, #36	; 0x24
 8001db2:	f64b 0002 	movw	r0, #47106	; 0xb802
 8001db6:	f001 f98f 	bl	80030d8 <lcd_write_reg>
    /* VGH 15V (Free pump) */
    lcd_write_reg(0xBF00, 0x01);
 8001dba:	2101      	movs	r1, #1
 8001dbc:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8001dc0:	f001 f98a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB300, 0x0F);
 8001dc4:	210f      	movs	r1, #15
 8001dc6:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8001dca:	f001 f985 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB301, 0x0F);
 8001dce:	210f      	movs	r1, #15
 8001dd0:	f24b 3001 	movw	r0, #45825	; 0xb301
 8001dd4:	f001 f980 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB302, 0x0F);
 8001dd8:	210f      	movs	r1, #15
 8001dda:	f24b 3002 	movw	r0, #45826	; 0xb302
 8001dde:	f001 f97b 	bl	80030d8 <lcd_write_reg>
    /* VGH ratio */
    lcd_write_reg(0xB900, 0x34);
 8001de2:	2134      	movs	r1, #52	; 0x34
 8001de4:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8001de8:	f001 f976 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB901, 0x34);
 8001dec:	2134      	movs	r1, #52	; 0x34
 8001dee:	f64b 1001 	movw	r0, #47361	; 0xb901
 8001df2:	f001 f971 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB902, 0x34);
 8001df6:	2134      	movs	r1, #52	; 0x34
 8001df8:	f64b 1002 	movw	r0, #47362	; 0xb902
 8001dfc:	f001 f96c 	bl	80030d8 <lcd_write_reg>
    /* VGL_REG -10V */
    lcd_write_reg(0xB500, 0x08);
 8001e00:	2108      	movs	r1, #8
 8001e02:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8001e06:	f001 f967 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB501, 0x08);
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	f24b 5001 	movw	r0, #46337	; 0xb501
 8001e10:	f001 f962 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB502, 0x08);
 8001e14:	2108      	movs	r1, #8
 8001e16:	f24b 5002 	movw	r0, #46338	; 0xb502
 8001e1a:	f001 f95d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xC200, 0x03);
 8001e1e:	2103      	movs	r1, #3
 8001e20:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8001e24:	f001 f958 	bl	80030d8 <lcd_write_reg>
    /* VGLX ratio */
    lcd_write_reg(0xBA00, 0x24);
 8001e28:	2124      	movs	r1, #36	; 0x24
 8001e2a:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8001e2e:	f001 f953 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xBA01, 0x24);
 8001e32:	2124      	movs	r1, #36	; 0x24
 8001e34:	f64b 2001 	movw	r0, #47617	; 0xba01
 8001e38:	f001 f94e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xBA02, 0x24);
 8001e3c:	2124      	movs	r1, #36	; 0x24
 8001e3e:	f64b 2002 	movw	r0, #47618	; 0xba02
 8001e42:	f001 f949 	bl	80030d8 <lcd_write_reg>
    /* VGMP/VGSP 4.5V/0V */
    lcd_write_reg(0xBC00, 0x00);
 8001e46:	2100      	movs	r1, #0
 8001e48:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8001e4c:	f001 f944 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x78);
 8001e50:	2178      	movs	r1, #120	; 0x78
 8001e52:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8001e56:	f001 f93f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8001e60:	f001 f93a 	bl	80030d8 <lcd_write_reg>
    /* VGMN/VGSN -4.5V/0V */
    lcd_write_reg(0xBD00, 0x00);
 8001e64:	2100      	movs	r1, #0
 8001e66:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8001e6a:	f001 f935 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xBD01, 0x78);
 8001e6e:	2178      	movs	r1, #120	; 0x78
 8001e70:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8001e74:	f001 f930 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xBD02, 0x00);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8001e7e:	f001 f92b 	bl	80030d8 <lcd_write_reg>
    /* VCOM */
    lcd_write_reg(0xBE00, 0x00);
 8001e82:	2100      	movs	r1, #0
 8001e84:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8001e88:	f001 f926 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xBE01, 0x64);
 8001e8c:	2164      	movs	r1, #100	; 0x64
 8001e8e:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8001e92:	f001 f921 	bl	80030d8 <lcd_write_reg>
    /* Gamma Setting */
    lcd_write_reg(0xD100, 0x00);
 8001e96:	2100      	movs	r1, #0
 8001e98:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8001e9c:	f001 f91c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD101, 0x33);
 8001ea0:	2133      	movs	r1, #51	; 0x33
 8001ea2:	f24d 1001 	movw	r0, #53505	; 0xd101
 8001ea6:	f001 f917 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD102, 0x00);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	f24d 1002 	movw	r0, #53506	; 0xd102
 8001eb0:	f001 f912 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD103, 0x34);
 8001eb4:	2134      	movs	r1, #52	; 0x34
 8001eb6:	f24d 1003 	movw	r0, #53507	; 0xd103
 8001eba:	f001 f90d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD104, 0x00);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	f24d 1004 	movw	r0, #53508	; 0xd104
 8001ec4:	f001 f908 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD105, 0x3A);
 8001ec8:	213a      	movs	r1, #58	; 0x3a
 8001eca:	f24d 1005 	movw	r0, #53509	; 0xd105
 8001ece:	f001 f903 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD106, 0x00);
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	f24d 1006 	movw	r0, #53510	; 0xd106
 8001ed8:	f001 f8fe 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD107, 0x4A);
 8001edc:	214a      	movs	r1, #74	; 0x4a
 8001ede:	f24d 1007 	movw	r0, #53511	; 0xd107
 8001ee2:	f001 f8f9 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD108, 0x00);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	f24d 1008 	movw	r0, #53512	; 0xd108
 8001eec:	f001 f8f4 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD109, 0x5C);
 8001ef0:	215c      	movs	r1, #92	; 0x5c
 8001ef2:	f24d 1009 	movw	r0, #53513	; 0xd109
 8001ef6:	f001 f8ef 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD10A, 0x00);
 8001efa:	2100      	movs	r1, #0
 8001efc:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8001f00:	f001 f8ea 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD10B, 0x81);
 8001f04:	2181      	movs	r1, #129	; 0x81
 8001f06:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8001f0a:	f001 f8e5 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD10C, 0x00);
 8001f0e:	2100      	movs	r1, #0
 8001f10:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8001f14:	f001 f8e0 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD10D, 0xA6);
 8001f18:	21a6      	movs	r1, #166	; 0xa6
 8001f1a:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8001f1e:	f001 f8db 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD10E, 0x00);
 8001f22:	2100      	movs	r1, #0
 8001f24:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8001f28:	f001 f8d6 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD10F, 0xE5);
 8001f2c:	21e5      	movs	r1, #229	; 0xe5
 8001f2e:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8001f32:	f001 f8d1 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD110, 0x01);
 8001f36:	2101      	movs	r1, #1
 8001f38:	f24d 1010 	movw	r0, #53520	; 0xd110
 8001f3c:	f001 f8cc 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD111, 0x13);
 8001f40:	2113      	movs	r1, #19
 8001f42:	f24d 1011 	movw	r0, #53521	; 0xd111
 8001f46:	f001 f8c7 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD112, 0x01);
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	f24d 1012 	movw	r0, #53522	; 0xd112
 8001f50:	f001 f8c2 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD113, 0x54);
 8001f54:	2154      	movs	r1, #84	; 0x54
 8001f56:	f24d 1013 	movw	r0, #53523	; 0xd113
 8001f5a:	f001 f8bd 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD114, 0x01);
 8001f5e:	2101      	movs	r1, #1
 8001f60:	f24d 1014 	movw	r0, #53524	; 0xd114
 8001f64:	f001 f8b8 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD115, 0x82);
 8001f68:	2182      	movs	r1, #130	; 0x82
 8001f6a:	f24d 1015 	movw	r0, #53525	; 0xd115
 8001f6e:	f001 f8b3 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD116, 0x01);
 8001f72:	2101      	movs	r1, #1
 8001f74:	f24d 1016 	movw	r0, #53526	; 0xd116
 8001f78:	f001 f8ae 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD117, 0xCA);
 8001f7c:	21ca      	movs	r1, #202	; 0xca
 8001f7e:	f24d 1017 	movw	r0, #53527	; 0xd117
 8001f82:	f001 f8a9 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD118, 0x02);
 8001f86:	2102      	movs	r1, #2
 8001f88:	f24d 1018 	movw	r0, #53528	; 0xd118
 8001f8c:	f001 f8a4 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD119, 0x00);
 8001f90:	2100      	movs	r1, #0
 8001f92:	f24d 1019 	movw	r0, #53529	; 0xd119
 8001f96:	f001 f89f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD11A, 0x02);
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8001fa0:	f001 f89a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD11B, 0x01);
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8001faa:	f001 f895 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD11C, 0x02);
 8001fae:	2102      	movs	r1, #2
 8001fb0:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8001fb4:	f001 f890 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD11D, 0x34);
 8001fb8:	2134      	movs	r1, #52	; 0x34
 8001fba:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8001fbe:	f001 f88b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD11E, 0x02);
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8001fc8:	f001 f886 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD11F, 0x67);
 8001fcc:	2167      	movs	r1, #103	; 0x67
 8001fce:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8001fd2:	f001 f881 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD120, 0x02);
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	f24d 1020 	movw	r0, #53536	; 0xd120
 8001fdc:	f001 f87c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD121, 0x84);
 8001fe0:	2184      	movs	r1, #132	; 0x84
 8001fe2:	f24d 1021 	movw	r0, #53537	; 0xd121
 8001fe6:	f001 f877 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD122, 0x02);
 8001fea:	2102      	movs	r1, #2
 8001fec:	f24d 1022 	movw	r0, #53538	; 0xd122
 8001ff0:	f001 f872 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD123, 0xA4);
 8001ff4:	21a4      	movs	r1, #164	; 0xa4
 8001ff6:	f24d 1023 	movw	r0, #53539	; 0xd123
 8001ffa:	f001 f86d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD124, 0x02);
 8001ffe:	2102      	movs	r1, #2
 8002000:	f24d 1024 	movw	r0, #53540	; 0xd124
 8002004:	f001 f868 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD125, 0xB7);
 8002008:	21b7      	movs	r1, #183	; 0xb7
 800200a:	f24d 1025 	movw	r0, #53541	; 0xd125
 800200e:	f001 f863 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD126, 0x02);
 8002012:	2102      	movs	r1, #2
 8002014:	f24d 1026 	movw	r0, #53542	; 0xd126
 8002018:	f001 f85e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD127, 0xCF);
 800201c:	21cf      	movs	r1, #207	; 0xcf
 800201e:	f24d 1027 	movw	r0, #53543	; 0xd127
 8002022:	f001 f859 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD128, 0x02);
 8002026:	2102      	movs	r1, #2
 8002028:	f24d 1028 	movw	r0, #53544	; 0xd128
 800202c:	f001 f854 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD129, 0xDE);
 8002030:	21de      	movs	r1, #222	; 0xde
 8002032:	f24d 1029 	movw	r0, #53545	; 0xd129
 8002036:	f001 f84f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD12A, 0x02);
 800203a:	2102      	movs	r1, #2
 800203c:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8002040:	f001 f84a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD12B, 0xF2);
 8002044:	21f2      	movs	r1, #242	; 0xf2
 8002046:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800204a:	f001 f845 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD12C, 0x02);
 800204e:	2102      	movs	r1, #2
 8002050:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8002054:	f001 f840 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD12D, 0xFE);
 8002058:	21fe      	movs	r1, #254	; 0xfe
 800205a:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800205e:	f001 f83b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD12E, 0x03);
 8002062:	2103      	movs	r1, #3
 8002064:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8002068:	f001 f836 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD12F, 0x10);
 800206c:	2110      	movs	r1, #16
 800206e:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8002072:	f001 f831 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD130, 0x03);
 8002076:	2103      	movs	r1, #3
 8002078:	f24d 1030 	movw	r0, #53552	; 0xd130
 800207c:	f001 f82c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD131, 0x33);
 8002080:	2133      	movs	r1, #51	; 0x33
 8002082:	f24d 1031 	movw	r0, #53553	; 0xd131
 8002086:	f001 f827 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD132, 0x03);
 800208a:	2103      	movs	r1, #3
 800208c:	f24d 1032 	movw	r0, #53554	; 0xd132
 8002090:	f001 f822 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD133, 0x6D);
 8002094:	216d      	movs	r1, #109	; 0x6d
 8002096:	f24d 1033 	movw	r0, #53555	; 0xd133
 800209a:	f001 f81d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD200, 0x00);
 800209e:	2100      	movs	r1, #0
 80020a0:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80020a4:	f001 f818 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD201, 0x33);
 80020a8:	2133      	movs	r1, #51	; 0x33
 80020aa:	f24d 2001 	movw	r0, #53761	; 0xd201
 80020ae:	f001 f813 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD202, 0x00);
 80020b2:	2100      	movs	r1, #0
 80020b4:	f24d 2002 	movw	r0, #53762	; 0xd202
 80020b8:	f001 f80e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD203, 0x34);
 80020bc:	2134      	movs	r1, #52	; 0x34
 80020be:	f24d 2003 	movw	r0, #53763	; 0xd203
 80020c2:	f001 f809 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD204, 0x00);
 80020c6:	2100      	movs	r1, #0
 80020c8:	f24d 2004 	movw	r0, #53764	; 0xd204
 80020cc:	f001 f804 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD205, 0x3A);
 80020d0:	213a      	movs	r1, #58	; 0x3a
 80020d2:	f24d 2005 	movw	r0, #53765	; 0xd205
 80020d6:	f000 ffff 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD206, 0x00);
 80020da:	2100      	movs	r1, #0
 80020dc:	f24d 2006 	movw	r0, #53766	; 0xd206
 80020e0:	f000 fffa 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD207, 0x4A);
 80020e4:	214a      	movs	r1, #74	; 0x4a
 80020e6:	f24d 2007 	movw	r0, #53767	; 0xd207
 80020ea:	f000 fff5 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD208, 0x00);
 80020ee:	2100      	movs	r1, #0
 80020f0:	f24d 2008 	movw	r0, #53768	; 0xd208
 80020f4:	f000 fff0 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD209, 0x5C);
 80020f8:	215c      	movs	r1, #92	; 0x5c
 80020fa:	f24d 2009 	movw	r0, #53769	; 0xd209
 80020fe:	f000 ffeb 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD20A, 0x00);
 8002102:	2100      	movs	r1, #0
 8002104:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8002108:	f000 ffe6 	bl	80030d8 <lcd_write_reg>

    lcd_write_reg(0xD20B, 0x81);
 800210c:	2181      	movs	r1, #129	; 0x81
 800210e:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8002112:	f000 ffe1 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD20C, 0x00);
 8002116:	2100      	movs	r1, #0
 8002118:	f24d 200c 	movw	r0, #53772	; 0xd20c
 800211c:	f000 ffdc 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD20D, 0xA6);
 8002120:	21a6      	movs	r1, #166	; 0xa6
 8002122:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8002126:	f000 ffd7 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD20E, 0x00);
 800212a:	2100      	movs	r1, #0
 800212c:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8002130:	f000 ffd2 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD20F, 0xE5);
 8002134:	21e5      	movs	r1, #229	; 0xe5
 8002136:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800213a:	f000 ffcd 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD210, 0x01);
 800213e:	2101      	movs	r1, #1
 8002140:	f24d 2010 	movw	r0, #53776	; 0xd210
 8002144:	f000 ffc8 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD211, 0x13);
 8002148:	2113      	movs	r1, #19
 800214a:	f24d 2011 	movw	r0, #53777	; 0xd211
 800214e:	f000 ffc3 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD212, 0x01);
 8002152:	2101      	movs	r1, #1
 8002154:	f24d 2012 	movw	r0, #53778	; 0xd212
 8002158:	f000 ffbe 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD213, 0x54);
 800215c:	2154      	movs	r1, #84	; 0x54
 800215e:	f24d 2013 	movw	r0, #53779	; 0xd213
 8002162:	f000 ffb9 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD214, 0x01);
 8002166:	2101      	movs	r1, #1
 8002168:	f24d 2014 	movw	r0, #53780	; 0xd214
 800216c:	f000 ffb4 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD215, 0x82);
 8002170:	2182      	movs	r1, #130	; 0x82
 8002172:	f24d 2015 	movw	r0, #53781	; 0xd215
 8002176:	f000 ffaf 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD216, 0x01);
 800217a:	2101      	movs	r1, #1
 800217c:	f24d 2016 	movw	r0, #53782	; 0xd216
 8002180:	f000 ffaa 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD217, 0xCA);
 8002184:	21ca      	movs	r1, #202	; 0xca
 8002186:	f24d 2017 	movw	r0, #53783	; 0xd217
 800218a:	f000 ffa5 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD218, 0x02);
 800218e:	2102      	movs	r1, #2
 8002190:	f24d 2018 	movw	r0, #53784	; 0xd218
 8002194:	f000 ffa0 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD219, 0x00);
 8002198:	2100      	movs	r1, #0
 800219a:	f24d 2019 	movw	r0, #53785	; 0xd219
 800219e:	f000 ff9b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD21A, 0x02);
 80021a2:	2102      	movs	r1, #2
 80021a4:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80021a8:	f000 ff96 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD21B, 0x01);
 80021ac:	2101      	movs	r1, #1
 80021ae:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80021b2:	f000 ff91 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD21C, 0x02);
 80021b6:	2102      	movs	r1, #2
 80021b8:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80021bc:	f000 ff8c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD21D, 0x34);
 80021c0:	2134      	movs	r1, #52	; 0x34
 80021c2:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80021c6:	f000 ff87 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD21E, 0x02);
 80021ca:	2102      	movs	r1, #2
 80021cc:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80021d0:	f000 ff82 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD21F, 0x67);
 80021d4:	2167      	movs	r1, #103	; 0x67
 80021d6:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80021da:	f000 ff7d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD220, 0x02);
 80021de:	2102      	movs	r1, #2
 80021e0:	f24d 2020 	movw	r0, #53792	; 0xd220
 80021e4:	f000 ff78 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD221, 0x84);
 80021e8:	2184      	movs	r1, #132	; 0x84
 80021ea:	f24d 2021 	movw	r0, #53793	; 0xd221
 80021ee:	f000 ff73 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD222, 0x02);
 80021f2:	2102      	movs	r1, #2
 80021f4:	f24d 2022 	movw	r0, #53794	; 0xd222
 80021f8:	f000 ff6e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD223, 0xA4);
 80021fc:	21a4      	movs	r1, #164	; 0xa4
 80021fe:	f24d 2023 	movw	r0, #53795	; 0xd223
 8002202:	f000 ff69 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD224, 0x02);
 8002206:	2102      	movs	r1, #2
 8002208:	f24d 2024 	movw	r0, #53796	; 0xd224
 800220c:	f000 ff64 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD225, 0xB7);
 8002210:	21b7      	movs	r1, #183	; 0xb7
 8002212:	f24d 2025 	movw	r0, #53797	; 0xd225
 8002216:	f000 ff5f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD226, 0x02);
 800221a:	2102      	movs	r1, #2
 800221c:	f24d 2026 	movw	r0, #53798	; 0xd226
 8002220:	f000 ff5a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD227, 0xCF);
 8002224:	21cf      	movs	r1, #207	; 0xcf
 8002226:	f24d 2027 	movw	r0, #53799	; 0xd227
 800222a:	f000 ff55 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD228, 0x02);
 800222e:	2102      	movs	r1, #2
 8002230:	f24d 2028 	movw	r0, #53800	; 0xd228
 8002234:	f000 ff50 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD229, 0xDE);
 8002238:	21de      	movs	r1, #222	; 0xde
 800223a:	f24d 2029 	movw	r0, #53801	; 0xd229
 800223e:	f000 ff4b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD22A, 0x02);
 8002242:	2102      	movs	r1, #2
 8002244:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8002248:	f000 ff46 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD22B, 0xF2);
 800224c:	21f2      	movs	r1, #242	; 0xf2
 800224e:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8002252:	f000 ff41 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD22C, 0x02);
 8002256:	2102      	movs	r1, #2
 8002258:	f24d 202c 	movw	r0, #53804	; 0xd22c
 800225c:	f000 ff3c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD22D, 0xFE);
 8002260:	21fe      	movs	r1, #254	; 0xfe
 8002262:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8002266:	f000 ff37 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD22E, 0x03);
 800226a:	2103      	movs	r1, #3
 800226c:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8002270:	f000 ff32 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD22F, 0x10);
 8002274:	2110      	movs	r1, #16
 8002276:	f24d 202f 	movw	r0, #53807	; 0xd22f
 800227a:	f000 ff2d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD230, 0x03);
 800227e:	2103      	movs	r1, #3
 8002280:	f24d 2030 	movw	r0, #53808	; 0xd230
 8002284:	f000 ff28 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD231, 0x33);
 8002288:	2133      	movs	r1, #51	; 0x33
 800228a:	f24d 2031 	movw	r0, #53809	; 0xd231
 800228e:	f000 ff23 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD232, 0x03);
 8002292:	2103      	movs	r1, #3
 8002294:	f24d 2032 	movw	r0, #53810	; 0xd232
 8002298:	f000 ff1e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD233, 0x6D);
 800229c:	216d      	movs	r1, #109	; 0x6d
 800229e:	f24d 2033 	movw	r0, #53811	; 0xd233
 80022a2:	f000 ff19 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD300, 0x00);
 80022a6:	2100      	movs	r1, #0
 80022a8:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80022ac:	f000 ff14 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD301, 0x33);
 80022b0:	2133      	movs	r1, #51	; 0x33
 80022b2:	f24d 3001 	movw	r0, #54017	; 0xd301
 80022b6:	f000 ff0f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD302, 0x00);
 80022ba:	2100      	movs	r1, #0
 80022bc:	f24d 3002 	movw	r0, #54018	; 0xd302
 80022c0:	f000 ff0a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD303, 0x34);
 80022c4:	2134      	movs	r1, #52	; 0x34
 80022c6:	f24d 3003 	movw	r0, #54019	; 0xd303
 80022ca:	f000 ff05 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD304, 0x00);
 80022ce:	2100      	movs	r1, #0
 80022d0:	f24d 3004 	movw	r0, #54020	; 0xd304
 80022d4:	f000 ff00 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD305, 0x3A);
 80022d8:	213a      	movs	r1, #58	; 0x3a
 80022da:	f24d 3005 	movw	r0, #54021	; 0xd305
 80022de:	f000 fefb 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD306, 0x00);
 80022e2:	2100      	movs	r1, #0
 80022e4:	f24d 3006 	movw	r0, #54022	; 0xd306
 80022e8:	f000 fef6 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD307, 0x4A);
 80022ec:	214a      	movs	r1, #74	; 0x4a
 80022ee:	f24d 3007 	movw	r0, #54023	; 0xd307
 80022f2:	f000 fef1 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD308, 0x00);
 80022f6:	2100      	movs	r1, #0
 80022f8:	f24d 3008 	movw	r0, #54024	; 0xd308
 80022fc:	f000 feec 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD309, 0x5C);
 8002300:	215c      	movs	r1, #92	; 0x5c
 8002302:	f24d 3009 	movw	r0, #54025	; 0xd309
 8002306:	f000 fee7 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD30A, 0x00);
 800230a:	2100      	movs	r1, #0
 800230c:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8002310:	f000 fee2 	bl	80030d8 <lcd_write_reg>

    lcd_write_reg(0xD30B, 0x81);
 8002314:	2181      	movs	r1, #129	; 0x81
 8002316:	f24d 300b 	movw	r0, #54027	; 0xd30b
 800231a:	f000 fedd 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD30C, 0x00);
 800231e:	2100      	movs	r1, #0
 8002320:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8002324:	f000 fed8 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD30D, 0xA6);
 8002328:	21a6      	movs	r1, #166	; 0xa6
 800232a:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800232e:	f000 fed3 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD30E, 0x00);
 8002332:	2100      	movs	r1, #0
 8002334:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8002338:	f000 fece 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD30F, 0xE5);
 800233c:	21e5      	movs	r1, #229	; 0xe5
 800233e:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8002342:	f000 fec9 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD310, 0x01);
 8002346:	2101      	movs	r1, #1
 8002348:	f24d 3010 	movw	r0, #54032	; 0xd310
 800234c:	f000 fec4 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD311, 0x13);
 8002350:	2113      	movs	r1, #19
 8002352:	f24d 3011 	movw	r0, #54033	; 0xd311
 8002356:	f000 febf 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD312, 0x01);
 800235a:	2101      	movs	r1, #1
 800235c:	f24d 3012 	movw	r0, #54034	; 0xd312
 8002360:	f000 feba 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD313, 0x54);
 8002364:	2154      	movs	r1, #84	; 0x54
 8002366:	f24d 3013 	movw	r0, #54035	; 0xd313
 800236a:	f000 feb5 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD314, 0x01);
 800236e:	2101      	movs	r1, #1
 8002370:	f24d 3014 	movw	r0, #54036	; 0xd314
 8002374:	f000 feb0 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD315, 0x82);
 8002378:	2182      	movs	r1, #130	; 0x82
 800237a:	f24d 3015 	movw	r0, #54037	; 0xd315
 800237e:	f000 feab 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD316, 0x01);
 8002382:	2101      	movs	r1, #1
 8002384:	f24d 3016 	movw	r0, #54038	; 0xd316
 8002388:	f000 fea6 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD317, 0xCA);
 800238c:	21ca      	movs	r1, #202	; 0xca
 800238e:	f24d 3017 	movw	r0, #54039	; 0xd317
 8002392:	f000 fea1 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD318, 0x02);
 8002396:	2102      	movs	r1, #2
 8002398:	f24d 3018 	movw	r0, #54040	; 0xd318
 800239c:	f000 fe9c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD319, 0x00);
 80023a0:	2100      	movs	r1, #0
 80023a2:	f24d 3019 	movw	r0, #54041	; 0xd319
 80023a6:	f000 fe97 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD31A, 0x02);
 80023aa:	2102      	movs	r1, #2
 80023ac:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80023b0:	f000 fe92 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD31B, 0x01);
 80023b4:	2101      	movs	r1, #1
 80023b6:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80023ba:	f000 fe8d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD31C, 0x02);
 80023be:	2102      	movs	r1, #2
 80023c0:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80023c4:	f000 fe88 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD31D, 0x34);
 80023c8:	2134      	movs	r1, #52	; 0x34
 80023ca:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80023ce:	f000 fe83 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD31E, 0x02);
 80023d2:	2102      	movs	r1, #2
 80023d4:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80023d8:	f000 fe7e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD31F, 0x67);
 80023dc:	2167      	movs	r1, #103	; 0x67
 80023de:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80023e2:	f000 fe79 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD320, 0x02);
 80023e6:	2102      	movs	r1, #2
 80023e8:	f24d 3020 	movw	r0, #54048	; 0xd320
 80023ec:	f000 fe74 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD321, 0x84);
 80023f0:	2184      	movs	r1, #132	; 0x84
 80023f2:	f24d 3021 	movw	r0, #54049	; 0xd321
 80023f6:	f000 fe6f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD322, 0x02);
 80023fa:	2102      	movs	r1, #2
 80023fc:	f24d 3022 	movw	r0, #54050	; 0xd322
 8002400:	f000 fe6a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD323, 0xA4);
 8002404:	21a4      	movs	r1, #164	; 0xa4
 8002406:	f24d 3023 	movw	r0, #54051	; 0xd323
 800240a:	f000 fe65 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD324, 0x02);
 800240e:	2102      	movs	r1, #2
 8002410:	f24d 3024 	movw	r0, #54052	; 0xd324
 8002414:	f000 fe60 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD325, 0xB7);
 8002418:	21b7      	movs	r1, #183	; 0xb7
 800241a:	f24d 3025 	movw	r0, #54053	; 0xd325
 800241e:	f000 fe5b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD326, 0x02);
 8002422:	2102      	movs	r1, #2
 8002424:	f24d 3026 	movw	r0, #54054	; 0xd326
 8002428:	f000 fe56 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD327, 0xCF);
 800242c:	21cf      	movs	r1, #207	; 0xcf
 800242e:	f24d 3027 	movw	r0, #54055	; 0xd327
 8002432:	f000 fe51 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD328, 0x02);
 8002436:	2102      	movs	r1, #2
 8002438:	f24d 3028 	movw	r0, #54056	; 0xd328
 800243c:	f000 fe4c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD329, 0xDE);
 8002440:	21de      	movs	r1, #222	; 0xde
 8002442:	f24d 3029 	movw	r0, #54057	; 0xd329
 8002446:	f000 fe47 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD32A, 0x02);
 800244a:	2102      	movs	r1, #2
 800244c:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8002450:	f000 fe42 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD32B, 0xF2);
 8002454:	21f2      	movs	r1, #242	; 0xf2
 8002456:	f24d 302b 	movw	r0, #54059	; 0xd32b
 800245a:	f000 fe3d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD32C, 0x02);
 800245e:	2102      	movs	r1, #2
 8002460:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8002464:	f000 fe38 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD32D, 0xFE);
 8002468:	21fe      	movs	r1, #254	; 0xfe
 800246a:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800246e:	f000 fe33 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD32E, 0x03);
 8002472:	2103      	movs	r1, #3
 8002474:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8002478:	f000 fe2e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD32F, 0x10);
 800247c:	2110      	movs	r1, #16
 800247e:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8002482:	f000 fe29 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD330, 0x03);
 8002486:	2103      	movs	r1, #3
 8002488:	f24d 3030 	movw	r0, #54064	; 0xd330
 800248c:	f000 fe24 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD331, 0x33);
 8002490:	2133      	movs	r1, #51	; 0x33
 8002492:	f24d 3031 	movw	r0, #54065	; 0xd331
 8002496:	f000 fe1f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD332, 0x03);
 800249a:	2103      	movs	r1, #3
 800249c:	f24d 3032 	movw	r0, #54066	; 0xd332
 80024a0:	f000 fe1a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD333, 0x6D);
 80024a4:	216d      	movs	r1, #109	; 0x6d
 80024a6:	f24d 3033 	movw	r0, #54067	; 0xd333
 80024aa:	f000 fe15 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD400, 0x00);
 80024ae:	2100      	movs	r1, #0
 80024b0:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80024b4:	f000 fe10 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD401, 0x33);
 80024b8:	2133      	movs	r1, #51	; 0x33
 80024ba:	f24d 4001 	movw	r0, #54273	; 0xd401
 80024be:	f000 fe0b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD402, 0x00);
 80024c2:	2100      	movs	r1, #0
 80024c4:	f24d 4002 	movw	r0, #54274	; 0xd402
 80024c8:	f000 fe06 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD403, 0x34);
 80024cc:	2134      	movs	r1, #52	; 0x34
 80024ce:	f24d 4003 	movw	r0, #54275	; 0xd403
 80024d2:	f000 fe01 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD404, 0x00);
 80024d6:	2100      	movs	r1, #0
 80024d8:	f24d 4004 	movw	r0, #54276	; 0xd404
 80024dc:	f000 fdfc 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD405, 0x3A);
 80024e0:	213a      	movs	r1, #58	; 0x3a
 80024e2:	f24d 4005 	movw	r0, #54277	; 0xd405
 80024e6:	f000 fdf7 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD406, 0x00);
 80024ea:	2100      	movs	r1, #0
 80024ec:	f24d 4006 	movw	r0, #54278	; 0xd406
 80024f0:	f000 fdf2 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD407, 0x4A);
 80024f4:	214a      	movs	r1, #74	; 0x4a
 80024f6:	f24d 4007 	movw	r0, #54279	; 0xd407
 80024fa:	f000 fded 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD408, 0x00);
 80024fe:	2100      	movs	r1, #0
 8002500:	f24d 4008 	movw	r0, #54280	; 0xd408
 8002504:	f000 fde8 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD409, 0x5C);
 8002508:	215c      	movs	r1, #92	; 0x5c
 800250a:	f24d 4009 	movw	r0, #54281	; 0xd409
 800250e:	f000 fde3 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD40A, 0x00);
 8002512:	2100      	movs	r1, #0
 8002514:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8002518:	f000 fdde 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD40B, 0x81);
 800251c:	2181      	movs	r1, #129	; 0x81
 800251e:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8002522:	f000 fdd9 	bl	80030d8 <lcd_write_reg>

    lcd_write_reg(0xD40C, 0x00);
 8002526:	2100      	movs	r1, #0
 8002528:	f24d 400c 	movw	r0, #54284	; 0xd40c
 800252c:	f000 fdd4 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD40D, 0xA6);
 8002530:	21a6      	movs	r1, #166	; 0xa6
 8002532:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8002536:	f000 fdcf 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD40E, 0x00);
 800253a:	2100      	movs	r1, #0
 800253c:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8002540:	f000 fdca 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD40F, 0xE5);
 8002544:	21e5      	movs	r1, #229	; 0xe5
 8002546:	f24d 400f 	movw	r0, #54287	; 0xd40f
 800254a:	f000 fdc5 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD410, 0x01);
 800254e:	2101      	movs	r1, #1
 8002550:	f24d 4010 	movw	r0, #54288	; 0xd410
 8002554:	f000 fdc0 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD411, 0x13);
 8002558:	2113      	movs	r1, #19
 800255a:	f24d 4011 	movw	r0, #54289	; 0xd411
 800255e:	f000 fdbb 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD412, 0x01);
 8002562:	2101      	movs	r1, #1
 8002564:	f24d 4012 	movw	r0, #54290	; 0xd412
 8002568:	f000 fdb6 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD413, 0x54);
 800256c:	2154      	movs	r1, #84	; 0x54
 800256e:	f24d 4013 	movw	r0, #54291	; 0xd413
 8002572:	f000 fdb1 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD414, 0x01);
 8002576:	2101      	movs	r1, #1
 8002578:	f24d 4014 	movw	r0, #54292	; 0xd414
 800257c:	f000 fdac 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD415, 0x82);
 8002580:	2182      	movs	r1, #130	; 0x82
 8002582:	f24d 4015 	movw	r0, #54293	; 0xd415
 8002586:	f000 fda7 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD416, 0x01);
 800258a:	2101      	movs	r1, #1
 800258c:	f24d 4016 	movw	r0, #54294	; 0xd416
 8002590:	f000 fda2 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD417, 0xCA);
 8002594:	21ca      	movs	r1, #202	; 0xca
 8002596:	f24d 4017 	movw	r0, #54295	; 0xd417
 800259a:	f000 fd9d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD418, 0x02);
 800259e:	2102      	movs	r1, #2
 80025a0:	f24d 4018 	movw	r0, #54296	; 0xd418
 80025a4:	f000 fd98 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD419, 0x00);
 80025a8:	2100      	movs	r1, #0
 80025aa:	f24d 4019 	movw	r0, #54297	; 0xd419
 80025ae:	f000 fd93 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD41A, 0x02);
 80025b2:	2102      	movs	r1, #2
 80025b4:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80025b8:	f000 fd8e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD41B, 0x01);
 80025bc:	2101      	movs	r1, #1
 80025be:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80025c2:	f000 fd89 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD41C, 0x02);
 80025c6:	2102      	movs	r1, #2
 80025c8:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80025cc:	f000 fd84 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD41D, 0x34);
 80025d0:	2134      	movs	r1, #52	; 0x34
 80025d2:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80025d6:	f000 fd7f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD41E, 0x02);
 80025da:	2102      	movs	r1, #2
 80025dc:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80025e0:	f000 fd7a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD41F, 0x67);
 80025e4:	2167      	movs	r1, #103	; 0x67
 80025e6:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80025ea:	f000 fd75 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD420, 0x02);
 80025ee:	2102      	movs	r1, #2
 80025f0:	f24d 4020 	movw	r0, #54304	; 0xd420
 80025f4:	f000 fd70 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD421, 0x84);
 80025f8:	2184      	movs	r1, #132	; 0x84
 80025fa:	f24d 4021 	movw	r0, #54305	; 0xd421
 80025fe:	f000 fd6b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD422, 0x02);
 8002602:	2102      	movs	r1, #2
 8002604:	f24d 4022 	movw	r0, #54306	; 0xd422
 8002608:	f000 fd66 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD423, 0xA4);
 800260c:	21a4      	movs	r1, #164	; 0xa4
 800260e:	f24d 4023 	movw	r0, #54307	; 0xd423
 8002612:	f000 fd61 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD424, 0x02);
 8002616:	2102      	movs	r1, #2
 8002618:	f24d 4024 	movw	r0, #54308	; 0xd424
 800261c:	f000 fd5c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD425, 0xB7);
 8002620:	21b7      	movs	r1, #183	; 0xb7
 8002622:	f24d 4025 	movw	r0, #54309	; 0xd425
 8002626:	f000 fd57 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD426, 0x02);
 800262a:	2102      	movs	r1, #2
 800262c:	f24d 4026 	movw	r0, #54310	; 0xd426
 8002630:	f000 fd52 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD427, 0xCF);
 8002634:	21cf      	movs	r1, #207	; 0xcf
 8002636:	f24d 4027 	movw	r0, #54311	; 0xd427
 800263a:	f000 fd4d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD428, 0x02);
 800263e:	2102      	movs	r1, #2
 8002640:	f24d 4028 	movw	r0, #54312	; 0xd428
 8002644:	f000 fd48 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD429, 0xDE);
 8002648:	21de      	movs	r1, #222	; 0xde
 800264a:	f24d 4029 	movw	r0, #54313	; 0xd429
 800264e:	f000 fd43 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD42A, 0x02);
 8002652:	2102      	movs	r1, #2
 8002654:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8002658:	f000 fd3e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD42B, 0xF2);
 800265c:	21f2      	movs	r1, #242	; 0xf2
 800265e:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8002662:	f000 fd39 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD42C, 0x02);
 8002666:	2102      	movs	r1, #2
 8002668:	f24d 402c 	movw	r0, #54316	; 0xd42c
 800266c:	f000 fd34 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD42D, 0xFE);
 8002670:	21fe      	movs	r1, #254	; 0xfe
 8002672:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8002676:	f000 fd2f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD42E, 0x03);
 800267a:	2103      	movs	r1, #3
 800267c:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8002680:	f000 fd2a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD42F, 0x10);
 8002684:	2110      	movs	r1, #16
 8002686:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800268a:	f000 fd25 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD430, 0x03);
 800268e:	2103      	movs	r1, #3
 8002690:	f24d 4030 	movw	r0, #54320	; 0xd430
 8002694:	f000 fd20 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD431, 0x33);
 8002698:	2133      	movs	r1, #51	; 0x33
 800269a:	f24d 4031 	movw	r0, #54321	; 0xd431
 800269e:	f000 fd1b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD432, 0x03);
 80026a2:	2103      	movs	r1, #3
 80026a4:	f24d 4032 	movw	r0, #54322	; 0xd432
 80026a8:	f000 fd16 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD433, 0x6D);
 80026ac:	216d      	movs	r1, #109	; 0x6d
 80026ae:	f24d 4033 	movw	r0, #54323	; 0xd433
 80026b2:	f000 fd11 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD500, 0x00);
 80026b6:	2100      	movs	r1, #0
 80026b8:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80026bc:	f000 fd0c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD501, 0x33);
 80026c0:	2133      	movs	r1, #51	; 0x33
 80026c2:	f24d 5001 	movw	r0, #54529	; 0xd501
 80026c6:	f000 fd07 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD502, 0x00);
 80026ca:	2100      	movs	r1, #0
 80026cc:	f24d 5002 	movw	r0, #54530	; 0xd502
 80026d0:	f000 fd02 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD503, 0x34);
 80026d4:	2134      	movs	r1, #52	; 0x34
 80026d6:	f24d 5003 	movw	r0, #54531	; 0xd503
 80026da:	f000 fcfd 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD504, 0x00);
 80026de:	2100      	movs	r1, #0
 80026e0:	f24d 5004 	movw	r0, #54532	; 0xd504
 80026e4:	f000 fcf8 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD505, 0x3A);
 80026e8:	213a      	movs	r1, #58	; 0x3a
 80026ea:	f24d 5005 	movw	r0, #54533	; 0xd505
 80026ee:	f000 fcf3 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD506, 0x00);
 80026f2:	2100      	movs	r1, #0
 80026f4:	f24d 5006 	movw	r0, #54534	; 0xd506
 80026f8:	f000 fcee 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD507, 0x4A);
 80026fc:	214a      	movs	r1, #74	; 0x4a
 80026fe:	f24d 5007 	movw	r0, #54535	; 0xd507
 8002702:	f000 fce9 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD508, 0x00);
 8002706:	2100      	movs	r1, #0
 8002708:	f24d 5008 	movw	r0, #54536	; 0xd508
 800270c:	f000 fce4 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD509, 0x5C);
 8002710:	215c      	movs	r1, #92	; 0x5c
 8002712:	f24d 5009 	movw	r0, #54537	; 0xd509
 8002716:	f000 fcdf 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD50A, 0x00);
 800271a:	2100      	movs	r1, #0
 800271c:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8002720:	f000 fcda 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD50B, 0x81);
 8002724:	2181      	movs	r1, #129	; 0x81
 8002726:	f24d 500b 	movw	r0, #54539	; 0xd50b
 800272a:	f000 fcd5 	bl	80030d8 <lcd_write_reg>

    lcd_write_reg(0xD50C, 0x00);
 800272e:	2100      	movs	r1, #0
 8002730:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8002734:	f000 fcd0 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD50D, 0xA6);
 8002738:	21a6      	movs	r1, #166	; 0xa6
 800273a:	f24d 500d 	movw	r0, #54541	; 0xd50d
 800273e:	f000 fccb 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD50E, 0x00);
 8002742:	2100      	movs	r1, #0
 8002744:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8002748:	f000 fcc6 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD50F, 0xE5);
 800274c:	21e5      	movs	r1, #229	; 0xe5
 800274e:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8002752:	f000 fcc1 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD510, 0x01);
 8002756:	2101      	movs	r1, #1
 8002758:	f24d 5010 	movw	r0, #54544	; 0xd510
 800275c:	f000 fcbc 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD511, 0x13);
 8002760:	2113      	movs	r1, #19
 8002762:	f24d 5011 	movw	r0, #54545	; 0xd511
 8002766:	f000 fcb7 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD512, 0x01);
 800276a:	2101      	movs	r1, #1
 800276c:	f24d 5012 	movw	r0, #54546	; 0xd512
 8002770:	f000 fcb2 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD513, 0x54);
 8002774:	2154      	movs	r1, #84	; 0x54
 8002776:	f24d 5013 	movw	r0, #54547	; 0xd513
 800277a:	f000 fcad 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD514, 0x01);
 800277e:	2101      	movs	r1, #1
 8002780:	f24d 5014 	movw	r0, #54548	; 0xd514
 8002784:	f000 fca8 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD515, 0x82);
 8002788:	2182      	movs	r1, #130	; 0x82
 800278a:	f24d 5015 	movw	r0, #54549	; 0xd515
 800278e:	f000 fca3 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD516, 0x01);
 8002792:	2101      	movs	r1, #1
 8002794:	f24d 5016 	movw	r0, #54550	; 0xd516
 8002798:	f000 fc9e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD517, 0xCA);
 800279c:	21ca      	movs	r1, #202	; 0xca
 800279e:	f24d 5017 	movw	r0, #54551	; 0xd517
 80027a2:	f000 fc99 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD518, 0x02);
 80027a6:	2102      	movs	r1, #2
 80027a8:	f24d 5018 	movw	r0, #54552	; 0xd518
 80027ac:	f000 fc94 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD519, 0x00);
 80027b0:	2100      	movs	r1, #0
 80027b2:	f24d 5019 	movw	r0, #54553	; 0xd519
 80027b6:	f000 fc8f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD51A, 0x02);
 80027ba:	2102      	movs	r1, #2
 80027bc:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80027c0:	f000 fc8a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD51B, 0x01);
 80027c4:	2101      	movs	r1, #1
 80027c6:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80027ca:	f000 fc85 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD51C, 0x02);
 80027ce:	2102      	movs	r1, #2
 80027d0:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80027d4:	f000 fc80 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD51D, 0x34);
 80027d8:	2134      	movs	r1, #52	; 0x34
 80027da:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80027de:	f000 fc7b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD51E, 0x02);
 80027e2:	2102      	movs	r1, #2
 80027e4:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80027e8:	f000 fc76 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD51F, 0x67);
 80027ec:	2167      	movs	r1, #103	; 0x67
 80027ee:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80027f2:	f000 fc71 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD520, 0x02);
 80027f6:	2102      	movs	r1, #2
 80027f8:	f24d 5020 	movw	r0, #54560	; 0xd520
 80027fc:	f000 fc6c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD521, 0x84);
 8002800:	2184      	movs	r1, #132	; 0x84
 8002802:	f24d 5021 	movw	r0, #54561	; 0xd521
 8002806:	f000 fc67 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD522, 0x02);
 800280a:	2102      	movs	r1, #2
 800280c:	f24d 5022 	movw	r0, #54562	; 0xd522
 8002810:	f000 fc62 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD523, 0xA4);
 8002814:	21a4      	movs	r1, #164	; 0xa4
 8002816:	f24d 5023 	movw	r0, #54563	; 0xd523
 800281a:	f000 fc5d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD524, 0x02);
 800281e:	2102      	movs	r1, #2
 8002820:	f24d 5024 	movw	r0, #54564	; 0xd524
 8002824:	f000 fc58 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD525, 0xB7);
 8002828:	21b7      	movs	r1, #183	; 0xb7
 800282a:	f24d 5025 	movw	r0, #54565	; 0xd525
 800282e:	f000 fc53 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD526, 0x02);
 8002832:	2102      	movs	r1, #2
 8002834:	f24d 5026 	movw	r0, #54566	; 0xd526
 8002838:	f000 fc4e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD527, 0xCF);
 800283c:	21cf      	movs	r1, #207	; 0xcf
 800283e:	f24d 5027 	movw	r0, #54567	; 0xd527
 8002842:	f000 fc49 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD528, 0x02);
 8002846:	2102      	movs	r1, #2
 8002848:	f24d 5028 	movw	r0, #54568	; 0xd528
 800284c:	f000 fc44 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD529, 0xDE);
 8002850:	21de      	movs	r1, #222	; 0xde
 8002852:	f24d 5029 	movw	r0, #54569	; 0xd529
 8002856:	f000 fc3f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD52A, 0x02);
 800285a:	2102      	movs	r1, #2
 800285c:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8002860:	f000 fc3a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD52B, 0xF2);
 8002864:	21f2      	movs	r1, #242	; 0xf2
 8002866:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800286a:	f000 fc35 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD52C, 0x02);
 800286e:	2102      	movs	r1, #2
 8002870:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8002874:	f000 fc30 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD52D, 0xFE);
 8002878:	21fe      	movs	r1, #254	; 0xfe
 800287a:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800287e:	f000 fc2b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD52E, 0x03);
 8002882:	2103      	movs	r1, #3
 8002884:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8002888:	f000 fc26 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD52F, 0x10);
 800288c:	2110      	movs	r1, #16
 800288e:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8002892:	f000 fc21 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD530, 0x03);
 8002896:	2103      	movs	r1, #3
 8002898:	f24d 5030 	movw	r0, #54576	; 0xd530
 800289c:	f000 fc1c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD531, 0x33);
 80028a0:	2133      	movs	r1, #51	; 0x33
 80028a2:	f24d 5031 	movw	r0, #54577	; 0xd531
 80028a6:	f000 fc17 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD532, 0x03);
 80028aa:	2103      	movs	r1, #3
 80028ac:	f24d 5032 	movw	r0, #54578	; 0xd532
 80028b0:	f000 fc12 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD533, 0x6D);
 80028b4:	216d      	movs	r1, #109	; 0x6d
 80028b6:	f24d 5033 	movw	r0, #54579	; 0xd533
 80028ba:	f000 fc0d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD600, 0x00);
 80028be:	2100      	movs	r1, #0
 80028c0:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80028c4:	f000 fc08 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD601, 0x33);
 80028c8:	2133      	movs	r1, #51	; 0x33
 80028ca:	f24d 6001 	movw	r0, #54785	; 0xd601
 80028ce:	f000 fc03 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD602, 0x00);
 80028d2:	2100      	movs	r1, #0
 80028d4:	f24d 6002 	movw	r0, #54786	; 0xd602
 80028d8:	f000 fbfe 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD603, 0x34);
 80028dc:	2134      	movs	r1, #52	; 0x34
 80028de:	f24d 6003 	movw	r0, #54787	; 0xd603
 80028e2:	f000 fbf9 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD604, 0x00);
 80028e6:	2100      	movs	r1, #0
 80028e8:	f24d 6004 	movw	r0, #54788	; 0xd604
 80028ec:	f000 fbf4 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD605, 0x3A);
 80028f0:	213a      	movs	r1, #58	; 0x3a
 80028f2:	f24d 6005 	movw	r0, #54789	; 0xd605
 80028f6:	f000 fbef 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD606, 0x00);
 80028fa:	2100      	movs	r1, #0
 80028fc:	f24d 6006 	movw	r0, #54790	; 0xd606
 8002900:	f000 fbea 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD607, 0x4A);
 8002904:	214a      	movs	r1, #74	; 0x4a
 8002906:	f24d 6007 	movw	r0, #54791	; 0xd607
 800290a:	f000 fbe5 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD608, 0x00);
 800290e:	2100      	movs	r1, #0
 8002910:	f24d 6008 	movw	r0, #54792	; 0xd608
 8002914:	f000 fbe0 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD609, 0x5C);
 8002918:	215c      	movs	r1, #92	; 0x5c
 800291a:	f24d 6009 	movw	r0, #54793	; 0xd609
 800291e:	f000 fbdb 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD60A, 0x00);
 8002922:	2100      	movs	r1, #0
 8002924:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8002928:	f000 fbd6 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD60B, 0x81);
 800292c:	2181      	movs	r1, #129	; 0x81
 800292e:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8002932:	f000 fbd1 	bl	80030d8 <lcd_write_reg>

    lcd_write_reg(0xD60C, 0x00);
 8002936:	2100      	movs	r1, #0
 8002938:	f24d 600c 	movw	r0, #54796	; 0xd60c
 800293c:	f000 fbcc 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD60D, 0xA6);
 8002940:	21a6      	movs	r1, #166	; 0xa6
 8002942:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8002946:	f000 fbc7 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD60E, 0x00);
 800294a:	2100      	movs	r1, #0
 800294c:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8002950:	f000 fbc2 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD60F, 0xE5);
 8002954:	21e5      	movs	r1, #229	; 0xe5
 8002956:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800295a:	f000 fbbd 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD610, 0x01);
 800295e:	2101      	movs	r1, #1
 8002960:	f24d 6010 	movw	r0, #54800	; 0xd610
 8002964:	f000 fbb8 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD611, 0x13);
 8002968:	2113      	movs	r1, #19
 800296a:	f24d 6011 	movw	r0, #54801	; 0xd611
 800296e:	f000 fbb3 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD612, 0x01);
 8002972:	2101      	movs	r1, #1
 8002974:	f24d 6012 	movw	r0, #54802	; 0xd612
 8002978:	f000 fbae 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD613, 0x54);
 800297c:	2154      	movs	r1, #84	; 0x54
 800297e:	f24d 6013 	movw	r0, #54803	; 0xd613
 8002982:	f000 fba9 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD614, 0x01);
 8002986:	2101      	movs	r1, #1
 8002988:	f24d 6014 	movw	r0, #54804	; 0xd614
 800298c:	f000 fba4 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD615, 0x82);
 8002990:	2182      	movs	r1, #130	; 0x82
 8002992:	f24d 6015 	movw	r0, #54805	; 0xd615
 8002996:	f000 fb9f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD616, 0x01);
 800299a:	2101      	movs	r1, #1
 800299c:	f24d 6016 	movw	r0, #54806	; 0xd616
 80029a0:	f000 fb9a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD617, 0xCA);
 80029a4:	21ca      	movs	r1, #202	; 0xca
 80029a6:	f24d 6017 	movw	r0, #54807	; 0xd617
 80029aa:	f000 fb95 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD618, 0x02);
 80029ae:	2102      	movs	r1, #2
 80029b0:	f24d 6018 	movw	r0, #54808	; 0xd618
 80029b4:	f000 fb90 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD619, 0x00);
 80029b8:	2100      	movs	r1, #0
 80029ba:	f24d 6019 	movw	r0, #54809	; 0xd619
 80029be:	f000 fb8b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD61A, 0x02);
 80029c2:	2102      	movs	r1, #2
 80029c4:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80029c8:	f000 fb86 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD61B, 0x01);
 80029cc:	2101      	movs	r1, #1
 80029ce:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80029d2:	f000 fb81 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD61C, 0x02);
 80029d6:	2102      	movs	r1, #2
 80029d8:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80029dc:	f000 fb7c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD61D, 0x34);
 80029e0:	2134      	movs	r1, #52	; 0x34
 80029e2:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80029e6:	f000 fb77 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD61E, 0x02);
 80029ea:	2102      	movs	r1, #2
 80029ec:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80029f0:	f000 fb72 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD61F, 0x67);
 80029f4:	2167      	movs	r1, #103	; 0x67
 80029f6:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80029fa:	f000 fb6d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD620, 0x02);
 80029fe:	2102      	movs	r1, #2
 8002a00:	f24d 6020 	movw	r0, #54816	; 0xd620
 8002a04:	f000 fb68 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD621, 0x84);
 8002a08:	2184      	movs	r1, #132	; 0x84
 8002a0a:	f24d 6021 	movw	r0, #54817	; 0xd621
 8002a0e:	f000 fb63 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD622, 0x02);
 8002a12:	2102      	movs	r1, #2
 8002a14:	f24d 6022 	movw	r0, #54818	; 0xd622
 8002a18:	f000 fb5e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD623, 0xA4);
 8002a1c:	21a4      	movs	r1, #164	; 0xa4
 8002a1e:	f24d 6023 	movw	r0, #54819	; 0xd623
 8002a22:	f000 fb59 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD624, 0x02);
 8002a26:	2102      	movs	r1, #2
 8002a28:	f24d 6024 	movw	r0, #54820	; 0xd624
 8002a2c:	f000 fb54 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD625, 0xB7);
 8002a30:	21b7      	movs	r1, #183	; 0xb7
 8002a32:	f24d 6025 	movw	r0, #54821	; 0xd625
 8002a36:	f000 fb4f 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD626, 0x02);
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	f24d 6026 	movw	r0, #54822	; 0xd626
 8002a40:	f000 fb4a 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD627, 0xCF);
 8002a44:	21cf      	movs	r1, #207	; 0xcf
 8002a46:	f24d 6027 	movw	r0, #54823	; 0xd627
 8002a4a:	f000 fb45 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD628, 0x02);
 8002a4e:	2102      	movs	r1, #2
 8002a50:	f24d 6028 	movw	r0, #54824	; 0xd628
 8002a54:	f000 fb40 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD629, 0xDE);
 8002a58:	21de      	movs	r1, #222	; 0xde
 8002a5a:	f24d 6029 	movw	r0, #54825	; 0xd629
 8002a5e:	f000 fb3b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD62A, 0x02);
 8002a62:	2102      	movs	r1, #2
 8002a64:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8002a68:	f000 fb36 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD62B, 0xF2);
 8002a6c:	21f2      	movs	r1, #242	; 0xf2
 8002a6e:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8002a72:	f000 fb31 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD62C, 0x02);
 8002a76:	2102      	movs	r1, #2
 8002a78:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8002a7c:	f000 fb2c 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD62D, 0xFE);
 8002a80:	21fe      	movs	r1, #254	; 0xfe
 8002a82:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8002a86:	f000 fb27 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD62E, 0x03);
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8002a90:	f000 fb22 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD62F, 0x10);
 8002a94:	2110      	movs	r1, #16
 8002a96:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8002a9a:	f000 fb1d 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD630, 0x03);
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	f24d 6030 	movw	r0, #54832	; 0xd630
 8002aa4:	f000 fb18 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD631, 0x33);
 8002aa8:	2133      	movs	r1, #51	; 0x33
 8002aaa:	f24d 6031 	movw	r0, #54833	; 0xd631
 8002aae:	f000 fb13 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD632, 0x03);
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	f24d 6032 	movw	r0, #54834	; 0xd632
 8002ab8:	f000 fb0e 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xD633, 0x6D);
 8002abc:	216d      	movs	r1, #109	; 0x6d
 8002abe:	f24d 6033 	movw	r0, #54835	; 0xd633
 8002ac2:	f000 fb09 	bl	80030d8 <lcd_write_reg>
    /* LV2 Page 0 enable */
    lcd_write_reg(0xF000, 0x55);
 8002ac6:	2155      	movs	r1, #85	; 0x55
 8002ac8:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002acc:	f000 fb04 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8002ad0:	21aa      	movs	r1, #170	; 0xaa
 8002ad2:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002ad6:	f000 faff 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8002ada:	2152      	movs	r1, #82	; 0x52
 8002adc:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002ae0:	f000 fafa 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8002ae4:	2108      	movs	r1, #8
 8002ae6:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002aea:	f000 faf5 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x00);
 8002aee:	2100      	movs	r1, #0
 8002af0:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002af4:	f000 faf0 	bl	80030d8 <lcd_write_reg>
    /* Display control */
    lcd_write_reg(0xB100, 0xCC);
 8002af8:	21cc      	movs	r1, #204	; 0xcc
 8002afa:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002afe:	f000 faeb 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x00);
 8002b02:	2100      	movs	r1, #0
 8002b04:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002b08:	f000 fae6 	bl	80030d8 <lcd_write_reg>
    /* Source hold time */
    lcd_write_reg(0xB600, 0x05);
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002b12:	f000 fae1 	bl	80030d8 <lcd_write_reg>
    /* Gate EQ control */
    lcd_write_reg(0xB700, 0x70);
 8002b16:	2170      	movs	r1, #112	; 0x70
 8002b18:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002b1c:	f000 fadc 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x70);
 8002b20:	2170      	movs	r1, #112	; 0x70
 8002b22:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002b26:	f000 fad7 	bl	80030d8 <lcd_write_reg>
    /* Source EQ control (Mode 2) */
    lcd_write_reg(0xB800, 0x01);
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002b30:	f000 fad2 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x03);
 8002b34:	2103      	movs	r1, #3
 8002b36:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002b3a:	f000 facd 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x03);
 8002b3e:	2103      	movs	r1, #3
 8002b40:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002b44:	f000 fac8 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xB803, 0x03);
 8002b48:	2103      	movs	r1, #3
 8002b4a:	f64b 0003 	movw	r0, #47107	; 0xb803
 8002b4e:	f000 fac3 	bl	80030d8 <lcd_write_reg>
    /* Inversion mode (2-dot) */
    lcd_write_reg(0xBC00, 0x02);
 8002b52:	2102      	movs	r1, #2
 8002b54:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002b58:	f000 fabe 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x00);
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8002b62:	f000 fab9 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8002b66:	2100      	movs	r1, #0
 8002b68:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8002b6c:	f000 fab4 	bl	80030d8 <lcd_write_reg>
    /* Timing control 4H w/ 4-delay */
    lcd_write_reg(0xC900, 0xD0);
 8002b70:	21d0      	movs	r1, #208	; 0xd0
 8002b72:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8002b76:	f000 faaf 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xC901, 0x02);
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	f64c 1001 	movw	r0, #51457	; 0xc901
 8002b80:	f000 faaa 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xC902, 0x50);
 8002b84:	2150      	movs	r1, #80	; 0x50
 8002b86:	f64c 1002 	movw	r0, #51458	; 0xc902
 8002b8a:	f000 faa5 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xC903, 0x50);
 8002b8e:	2150      	movs	r1, #80	; 0x50
 8002b90:	f64c 1003 	movw	r0, #51459	; 0xc903
 8002b94:	f000 faa0 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0xC904, 0x50);
 8002b98:	2150      	movs	r1, #80	; 0x50
 8002b9a:	f64c 1004 	movw	r0, #51460	; 0xc904
 8002b9e:	f000 fa9b 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0x3500, 0x00);
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8002ba8:	f000 fa96 	bl	80030d8 <lcd_write_reg>
    lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8002bac:	2155      	movs	r1, #85	; 0x55
 8002bae:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8002bb2:	f000 fa91 	bl	80030d8 <lcd_write_reg>
    lcd_wr_regno(0x1100);
 8002bb6:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8002bba:	f000 fa79 	bl	80030b0 <lcd_wr_regno>
    HAL_Delay(12);
 8002bbe:	200c      	movs	r0, #12
 8002bc0:	f001 fe4c 	bl	800485c <HAL_Delay>
    lcd_wr_regno(0x2900);
 8002bc4:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8002bc8:	f000 fa72 	bl	80030b0 <lcd_wr_regno>
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <lcd_ex_ili9806_reginit>:
 * @brief  ILI9806 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9806_reginit(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
 8002bd4:	20ff      	movs	r0, #255	; 0xff
 8002bd6:	f000 fa6b 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8002bda:	20ff      	movs	r0, #255	; 0xff
 8002bdc:	f000 fa54 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x98);
 8002be0:	2098      	movs	r0, #152	; 0x98
 8002be2:	f000 fa51 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x06);
 8002be6:	2006      	movs	r0, #6
 8002be8:	f000 fa4e 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xBC); /* GIP 1 */
 8002bec:	20bc      	movs	r0, #188	; 0xbc
 8002bee:	f000 fa5f 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f000 fa48 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8002bf8:	200f      	movs	r0, #15
 8002bfa:	f000 fa45 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x61);
 8002bfe:	2061      	movs	r0, #97	; 0x61
 8002c00:	f000 fa42 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002c04:	20ff      	movs	r0, #255	; 0xff
 8002c06:	f000 fa3f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f000 fa3c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002c10:	2001      	movs	r0, #1
 8002c12:	f000 fa39 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0B);
 8002c16:	200b      	movs	r0, #11
 8002c18:	f000 fa36 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x10);
 8002c1c:	2010      	movs	r0, #16
 8002c1e:	f000 fa33 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x37);
 8002c22:	2037      	movs	r0, #55	; 0x37
 8002c24:	f000 fa30 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x63);
 8002c28:	2063      	movs	r0, #99	; 0x63
 8002c2a:	f000 fa2d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002c2e:	20ff      	movs	r0, #255	; 0xff
 8002c30:	f000 fa2a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002c34:	20ff      	movs	r0, #255	; 0xff
 8002c36:	f000 fa27 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f000 fa24 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002c40:	2001      	movs	r0, #1
 8002c42:	f000 fa21 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f000 fa1e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f000 fa1b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002c52:	20ff      	movs	r0, #255	; 0xff
 8002c54:	f000 fa18 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x52);
 8002c58:	2052      	movs	r0, #82	; 0x52
 8002c5a:	f000 fa15 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f000 fa12 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f000 fa0f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x40);
 8002c6a:	2040      	movs	r0, #64	; 0x40
 8002c6c:	f000 fa0c 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xBD); /* GIP 2 */
 8002c70:	20bd      	movs	r0, #189	; 0xbd
 8002c72:	f000 fa1d 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f000 fa06 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x23);
 8002c7c:	2023      	movs	r0, #35	; 0x23
 8002c7e:	f000 fa03 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x45);
 8002c82:	2045      	movs	r0, #69	; 0x45
 8002c84:	f000 fa00 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x67);
 8002c88:	2067      	movs	r0, #103	; 0x67
 8002c8a:	f000 f9fd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f000 f9fa 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x23);
 8002c94:	2023      	movs	r0, #35	; 0x23
 8002c96:	f000 f9f7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x45);
 8002c9a:	2045      	movs	r0, #69	; 0x45
 8002c9c:	f000 f9f4 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x67);
 8002ca0:	2067      	movs	r0, #103	; 0x67
 8002ca2:	f000 f9f1 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xBE); /* GIP 3 */
 8002ca6:	20be      	movs	r0, #190	; 0xbe
 8002ca8:	f000 fa02 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f000 f9eb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f000 f9e8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xAB);
 8002cb8:	20ab      	movs	r0, #171	; 0xab
 8002cba:	f000 f9e5 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x60);
 8002cbe:	2060      	movs	r0, #96	; 0x60
 8002cc0:	f000 f9e2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002cc4:	2022      	movs	r0, #34	; 0x22
 8002cc6:	f000 f9df 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002cca:	2022      	movs	r0, #34	; 0x22
 8002ccc:	f000 f9dc 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002cd0:	2022      	movs	r0, #34	; 0x22
 8002cd2:	f000 f9d9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002cd6:	2022      	movs	r0, #34	; 0x22
 8002cd8:	f000 f9d6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002cdc:	2022      	movs	r0, #34	; 0x22
 8002cde:	f000 f9d3 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xC7); /* VCOM Control */
 8002ce2:	20c7      	movs	r0, #199	; 0xc7
 8002ce4:	f000 f9e4 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x36);
 8002ce8:	2036      	movs	r0, #54	; 0x36
 8002cea:	f000 f9cd 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
 8002cee:	20ed      	movs	r0, #237	; 0xed
 8002cf0:	f000 f9de 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x7F);
 8002cf4:	207f      	movs	r0, #127	; 0x7f
 8002cf6:	f000 f9c7 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8002cfa:	200f      	movs	r0, #15
 8002cfc:	f000 f9c4 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
 8002d00:	20c0      	movs	r0, #192	; 0xc0
 8002d02:	f000 f9d5 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 8002d06:	200f      	movs	r0, #15
 8002d08:	f000 f9be 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0B);
 8002d0c:	200b      	movs	r0, #11
 8002d0e:	f000 f9bb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* VGH 15V,VGLO-10V */
 8002d12:	200a      	movs	r0, #10
 8002d14:	f000 f9b8 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
 8002d18:	20fc      	movs	r0, #252	; 0xfc
 8002d1a:	f000 f9c9 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x08);
 8002d1e:	2008      	movs	r0, #8
 8002d20:	f000 f9b2 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0XDF);
 8002d24:	20df      	movs	r0, #223	; 0xdf
 8002d26:	f000 f9c3 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f000 f9ac 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f000 f9a9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f000 f9a6 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f000 f9a3 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f000 f9a0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x20);
 8002d48:	2020      	movs	r0, #32
 8002d4a:	f000 f99d 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
 8002d4e:	20f3      	movs	r0, #243	; 0xf3
 8002d50:	f000 f9ae 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x74);
 8002d54:	2074      	movs	r0, #116	; 0x74
 8002d56:	f000 f997 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Inversion Type */
 8002d5a:	20b4      	movs	r0, #180	; 0xb4
 8002d5c:	f000 f9a8 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02 */
 8002d60:	2000      	movs	r0, #0
 8002d62:	f000 f991 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 8002d66:	2000      	movs	r0, #0
 8002d68:	f000 f98e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f000 f98b 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xF7); /* Resolution Control */
 8002d72:	20f7      	movs	r0, #247	; 0xf7
 8002d74:	f000 f99c 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x82);  /* 480*800 */
 8002d78:	2082      	movs	r0, #130	; 0x82
 8002d7a:	f000 f985 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB1); /* FRAME RATE Setting */
 8002d7e:	20b1      	movs	r0, #177	; 0xb1
 8002d80:	f000 f996 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f000 f97f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x13);
 8002d8a:	2013      	movs	r0, #19
 8002d8c:	f000 f97c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x13);
 8002d90:	2013      	movs	r0, #19
 8002d92:	f000 f979 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
 8002d96:	20f2      	movs	r0, #242	; 0xf2
 8002d98:	f000 f98a 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8002d9c:	2080      	movs	r0, #128	; 0x80
 8002d9e:	f000 f973 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x04);
 8002da2:	2004      	movs	r0, #4
 8002da4:	f000 f970 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x40);
 8002da8:	2040      	movs	r0, #64	; 0x40
 8002daa:	f000 f96d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x28);
 8002dae:	2028      	movs	r0, #40	; 0x28
 8002db0:	f000 f96a 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
 8002db4:	20c1      	movs	r0, #193	; 0xc1
 8002db6:	f000 f97b 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x17);
 8002dba:	2017      	movs	r0, #23
 8002dbc:	f000 f964 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMP */
 8002dc0:	2088      	movs	r0, #136	; 0x88
 8002dc2:	f000 f961 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMN */
 8002dc6:	2088      	movs	r0, #136	; 0x88
 8002dc8:	f000 f95e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x20);
 8002dcc:	2020      	movs	r0, #32
 8002dce:	f000 f95b 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Positive Gamma Control */
 8002dd2:	20e0      	movs	r0, #224	; 0xe0
 8002dd4:	f000 f96c 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f000 f955 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P2 */
 8002dde:	200a      	movs	r0, #10
 8002de0:	f000 f952 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x12);  /* P3 */
 8002de4:	2012      	movs	r0, #18
 8002de6:	f000 f94f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x10);  /* P4 */
 8002dea:	2010      	movs	r0, #16
 8002dec:	f000 f94c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 8002df0:	200e      	movs	r0, #14
 8002df2:	f000 f949 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x20);  /* P6 */
 8002df6:	2020      	movs	r0, #32
 8002df8:	f000 f946 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xCC);  /* P7 */
 8002dfc:	20cc      	movs	r0, #204	; 0xcc
 8002dfe:	f000 f943 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x07);  /* P8 */
 8002e02:	2007      	movs	r0, #7
 8002e04:	f000 f940 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 8002e08:	2006      	movs	r0, #6
 8002e0a:	f000 f93d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P10 */
 8002e0e:	200b      	movs	r0, #11
 8002e10:	f000 f93a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P11 */
 8002e14:	200e      	movs	r0, #14
 8002e16:	f000 f937 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P12 */
 8002e1a:	200f      	movs	r0, #15
 8002e1c:	f000 f934 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P13 */
 8002e20:	200d      	movs	r0, #13
 8002e22:	f000 f931 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 8002e26:	2015      	movs	r0, #21
 8002e28:	f000 f92e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x10);  /* P15 */
 8002e2c:	2010      	movs	r0, #16
 8002e2e:	f000 f92b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 8002e32:	2000      	movs	r0, #0
 8002e34:	f000 f928 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xE1); /* Negative Gamma Correction */
 8002e38:	20e1      	movs	r0, #225	; 0xe1
 8002e3a:	f000 f939 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f000 f922 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P2 */
 8002e44:	200b      	movs	r0, #11
 8002e46:	f000 f91f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x13);  /* P3 */
 8002e4a:	2013      	movs	r0, #19
 8002e4c:	f000 f91c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P4 */
 8002e50:	200d      	movs	r0, #13
 8002e52:	f000 f919 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 8002e56:	200e      	movs	r0, #14
 8002e58:	f000 f916 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x1B);  /* P6 */
 8002e5c:	201b      	movs	r0, #27
 8002e5e:	f000 f913 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x71);  /* P7 */
 8002e62:	2071      	movs	r0, #113	; 0x71
 8002e64:	f000 f910 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P8 */
 8002e68:	2006      	movs	r0, #6
 8002e6a:	f000 f90d 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 8002e6e:	2006      	movs	r0, #6
 8002e70:	f000 f90a 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P10 */
 8002e74:	200a      	movs	r0, #10
 8002e76:	f000 f907 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P11 */
 8002e7a:	200f      	movs	r0, #15
 8002e7c:	f000 f904 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P12 */
 8002e80:	200e      	movs	r0, #14
 8002e82:	f000 f901 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P13 */
 8002e86:	200f      	movs	r0, #15
 8002e88:	f000 f8fe 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 8002e8c:	2015      	movs	r0, #21
 8002e8e:	f000 f8fb 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x0C);  /* P15 */
 8002e92:	200c      	movs	r0, #12
 8002e94:	f000 f8f8 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f000 f8f5 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x2a);
 8002e9e:	202a      	movs	r0, #42	; 0x2a
 8002ea0:	f000 f906 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f000 f8ef 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f000 f8ec 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f000 f8e9 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xdf);
 8002eb6:	20df      	movs	r0, #223	; 0xdf
 8002eb8:	f000 f8e6 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x2b);
 8002ebc:	202b      	movs	r0, #43	; 0x2b
 8002ebe:	f000 f8f7 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f000 f8e0 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f000 f8dd 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x03);
 8002ece:	2003      	movs	r0, #3
 8002ed0:	f000 f8da 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x1f);
 8002ed4:	201f      	movs	r0, #31
 8002ed6:	f000 f8d7 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x3A); /* Pixel Format */
 8002eda:	203a      	movs	r0, #58	; 0x3a
 8002edc:	f000 f8e8 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8002ee0:	2055      	movs	r0, #85	; 0x55
 8002ee2:	f000 f8d1 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x36); /* Memory Access Control */
 8002ee6:	2036      	movs	r0, #54	; 0x36
 8002ee8:	f000 f8e2 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02-180 */
 8002eec:	2000      	movs	r0, #0
 8002eee:	f000 f8cb 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x11);
 8002ef2:	2011      	movs	r0, #17
 8002ef4:	f000 f8dc 	bl	80030b0 <lcd_wr_regno>
    HAL_Delay(120);
 8002ef8:	2078      	movs	r0, #120	; 0x78
 8002efa:	f001 fcaf 	bl	800485c <HAL_Delay>
    lcd_wr_regno(0x29);
 8002efe:	2029      	movs	r0, #41	; 0x29
 8002f00:	f000 f8d6 	bl	80030b0 <lcd_wr_regno>
    HAL_Delay(20);
 8002f04:	2014      	movs	r0, #20
 8002f06:	f001 fca9 	bl	800485c <HAL_Delay>
    lcd_wr_regno(0x2C);
 8002f0a:	202c      	movs	r0, #44	; 0x2c
 8002f0c:	f000 f8d0 	bl	80030b0 <lcd_wr_regno>
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <lcd_ex_ssd1963_reginit>:
 * @brief  SSD1963 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ssd1963_reginit(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
 8002f18:	20e2      	movs	r0, #226	; 0xe2
 8002f1a:	f000 f8c9 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x1D);  /* parameter 1 */
 8002f1e:	201d      	movs	r0, #29
 8002f20:	f000 f8b2 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x02);  /* parameter 2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 8002f24:	2002      	movs	r0, #2
 8002f26:	f000 f8af 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x04);  /* parameter 3 Validate M and N values */
 8002f2a:	2004      	movs	r0, #4
 8002f2c:	f000 f8ac 	bl	8003088 <lcd_wr_data>
    HAL_Delay(1);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f001 fc93 	bl	800485c <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command */
 8002f36:	20e0      	movs	r0, #224	; 0xe0
 8002f38:	f000 f8ba 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x01);  /*  enable PLL */
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f000 f8a3 	bl	8003088 <lcd_wr_data>
    HAL_Delay(10);
 8002f42:	200a      	movs	r0, #10
 8002f44:	f001 fc8a 	bl	800485c <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command again */
 8002f48:	20e0      	movs	r0, #224	; 0xe0
 8002f4a:	f000 f8b1 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x03);  /*  now, use PLL output as system clock */
 8002f4e:	2003      	movs	r0, #3
 8002f50:	f000 f89a 	bl	8003088 <lcd_wr_data>
    HAL_Delay(12);
 8002f54:	200c      	movs	r0, #12
 8002f56:	f001 fc81 	bl	800485c <HAL_Delay>
    lcd_wr_regno(0x01); /* soft reset */
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f000 f8a8 	bl	80030b0 <lcd_wr_regno>
    HAL_Delay(10);
 8002f60:	200a      	movs	r0, #10
 8002f62:	f001 fc7b 	bl	800485c <HAL_Delay>

    lcd_wr_regno(0xE6); /* Set the pixel frequency,33Mhz */
 8002f66:	20e6      	movs	r0, #230	; 0xe6
 8002f68:	f000 f8a2 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x2F);
 8002f6c:	202f      	movs	r0, #47	; 0x2f
 8002f6e:	f000 f88b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002f72:	20ff      	movs	r0, #255	; 0xff
 8002f74:	f000 f888 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002f78:	20ff      	movs	r0, #255	; 0xff
 8002f7a:	f000 f885 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB0); /* Setting LCD mode */
 8002f7e:	20b0      	movs	r0, #176	; 0xb0
 8002f80:	f000 f896 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 24 bit mode */
 8002f84:	2020      	movs	r0, #32
 8002f86:	f000 f87f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);  /* TFT pattern */
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f000 f87c 	bl	8003088 <lcd_wr_data>

    lcd_wr_data((SSD_HOR_RESOLUTION - 1) >> 8); /* Set the LCD horizontal pixels */
 8002f90:	2003      	movs	r0, #3
 8002f92:	f000 f879 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_RESOLUTION - 1);
 8002f96:	f240 301f 	movw	r0, #799	; 0x31f
 8002f9a:	f000 f875 	bl	8003088 <lcd_wr_data>
    lcd_wr_data((SSD_VER_RESOLUTION - 1) >> 8); /* Set the LCD vertical pixels */
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f000 f872 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(SSD_VER_RESOLUTION - 1);
 8002fa4:	f240 10df 	movw	r0, #479	; 0x1df
 8002fa8:	f000 f86e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);  /* RGB sequence */
 8002fac:	2000      	movs	r0, #0
 8002fae:	f000 f86b 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Set horizontal period */
 8002fb2:	20b4      	movs	r0, #180	; 0xb4
 8002fb4:	f000 f87c 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data((SSD_HT - 1) >> 8);
 8002fb8:	2004      	movs	r0, #4
 8002fba:	f000 f865 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(SSD_HT - 1);
 8002fbe:	f240 401f 	movw	r0, #1055	; 0x41f
 8002fc2:	f000 f861 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(SSD_HPS >> 8);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f000 f85e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(SSD_HPS);
 8002fcc:	202e      	movs	r0, #46	; 0x2e
 8002fce:	f000 f85b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_PULSE_WIDTH - 1);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f000 f858 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f000 f855 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f000 f852 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f000 f84f 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Set vertical perio */
 8002fea:	20b6      	movs	r0, #182	; 0xb6
 8002fec:	f000 f860 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data((SSD_VT - 1) >> 8);
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f000 f849 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(SSD_VT - 1);
 8002ff6:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8002ffa:	f000 f845 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(SSD_VPS >> 8);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f000 f842 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(SSD_VPS);
 8003004:	2017      	movs	r0, #23
 8003006:	f000 f83f 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(SSD_VER_FRONT_PORCH - 1);
 800300a:	2015      	movs	r0, #21
 800300c:	f000 f83c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f000 f839 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f000 f836 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xF0); /* Set the interface between SSD1963 and CPU to 16bit */
 800301c:	20f0      	movs	r0, #240	; 0xf0
 800301e:	f000 f847 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 16-bit(565 format) data for 16bpp */
 8003022:	2003      	movs	r0, #3
 8003024:	f000 f830 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0x29); /* Enable display */
 8003028:	2029      	movs	r0, #41	; 0x29
 800302a:	f000 f841 	bl	80030b0 <lcd_wr_regno>
    /* Setting the PWM output backlight is adjustable through the duty cycle */
    lcd_wr_regno(0xD0); /* Set the automatic white balance DBC */
 800302e:	20d0      	movs	r0, #208	; 0xd0
 8003030:	f000 f83e 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* disable */
 8003034:	2000      	movs	r0, #0
 8003036:	f000 f827 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xBE); /* Configure PWM output */
 800303a:	20be      	movs	r0, #190	; 0xbe
 800303c:	f000 f838 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x05);  /* 1 Set the PWM frequency */
 8003040:	2005      	movs	r0, #5
 8003042:	f000 f821 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xFE);  /* 2 Set the PWM duty cycle */
 8003046:	20fe      	movs	r0, #254	; 0xfe
 8003048:	f000 f81e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);  /* 3 set C */
 800304c:	2001      	movs	r0, #1
 800304e:	f000 f81b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 4 set D */
 8003052:	2000      	movs	r0, #0
 8003054:	f000 f818 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 5 set E */
 8003058:	2000      	movs	r0, #0
 800305a:	f000 f815 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 6 set F */
 800305e:	2000      	movs	r0, #0
 8003060:	f000 f812 	bl	8003088 <lcd_wr_data>

    lcd_wr_regno(0xB8); /* Set the GPIO configuration */
 8003064:	20b8      	movs	r0, #184	; 0xb8
 8003066:	f000 f823 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* Two IO ports are set as output */
 800306a:	2003      	movs	r0, #3
 800306c:	f000 f80c 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);  /* GPIO uses normal IO functionality */
 8003070:	2001      	movs	r0, #1
 8003072:	f000 f809 	bl	8003088 <lcd_wr_data>
    lcd_wr_regno(0xBA);
 8003076:	20ba      	movs	r0, #186	; 0xba
 8003078:	f000 f81a 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0X01);  /* GPIO[1:0]=01, controls LCD orientation */
 800307c:	2001      	movs	r0, #1
 800307e:	f000 f803 	bl	8003088 <lcd_wr_data>
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <lcd_wr_data>:
 * @brief   LCD write data
 * @param   data: data to be written
 * @retval  None
 */
void lcd_wr_data(volatile uint16_t data)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	80fb      	strh	r3, [r7, #6]
    data = data;
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	b29b      	uxth	r3, r3
 8003096:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <lcd_wr_data+0x24>)
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	b292      	uxth	r2, r2
 800309e:	805a      	strh	r2, [r3, #2]
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	600ffffe 	.word	0x600ffffe

080030b0 <lcd_wr_regno>:
 * @brief   LCD write register number/address function
 * @param   regno: register number/address
 * @retval  None
 */
void lcd_wr_regno(volatile uint16_t regno)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
    regno = regno;
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <lcd_wr_regno+0x24>)
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	b292      	uxth	r2, r2
 80030c6:	801a      	strh	r2, [r3, #0]

}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	600ffffe 	.word	0x600ffffe

080030d8 <lcd_write_reg>:
 * @param   regno: register number/address
 * @param   data: data to be written
 * @retval  None
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	460a      	mov	r2, r1
 80030e2:	80fb      	strh	r3, [r7, #6]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 80030e8:	4a05      	ldr	r2, [pc, #20]	; (8003100 <lcd_write_reg+0x28>)
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = data;    /* Write in data */
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <lcd_write_reg+0x28>)
 80030f0:	88bb      	ldrh	r3, [r7, #4]
 80030f2:	8053      	strh	r3, [r2, #2]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	600ffffe 	.word	0x600ffffe

08003104 <lcd_rd_data>:
 * @brief   LCD read register function
 * @param   None.
 * @retval  The data read
 */
static uint16_t lcd_rd_data(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
    volatile uint16_t ram;
    ram = LCD->LCD_RAM;
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <lcd_rd_data+0x1c>)
 800310c:	885b      	ldrh	r3, [r3, #2]
 800310e:	b29b      	uxth	r3, r3
 8003110:	80fb      	strh	r3, [r7, #6]
    return ram;
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	b29b      	uxth	r3, r3
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	600ffffe 	.word	0x600ffffe

08003124 <lcd_write_ram_prepare>:
 * @brief   LCD ready to write GRAM
 * @param   None.
 * @retval  None.
 */
void lcd_write_ram_prepare(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <lcd_write_ram_prepare+0x14>)
 800312a:	4a04      	ldr	r2, [pc, #16]	; (800313c <lcd_write_ram_prepare+0x18>)
 800312c:	8912      	ldrh	r2, [r2, #8]
 800312e:	801a      	strh	r2, [r3, #0]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	600ffffe 	.word	0x600ffffe
 800313c:	20000088 	.word	0x20000088

08003140 <lcd_set_cursor>:
 * @brief   Sets the cursor position
 * @param   x,y: coordinate
 * @retval  None.
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	460a      	mov	r2, r1
 800314a:	80fb      	strh	r3, [r7, #6]
 800314c:	4613      	mov	r3, r2
 800314e:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 8003150:	4b65      	ldr	r3, [pc, #404]	; (80032e8 <lcd_set_cursor+0x1a8>)
 8003152:	889b      	ldrh	r3, [r3, #4]
 8003154:	f641 1263 	movw	r2, #6499	; 0x1963
 8003158:	4293      	cmp	r3, r2
 800315a:	d167      	bne.n	800322c <lcd_set_cursor+0xec>
    {
        if (lcddev.dir == 0)    /* In portrait mode, the x-coordinate needs to be transformed */
 800315c:	4b62      	ldr	r3, [pc, #392]	; (80032e8 <lcd_set_cursor+0x1a8>)
 800315e:	799b      	ldrb	r3, [r3, #6]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d11e      	bne.n	80031a2 <lcd_set_cursor+0x62>
        {
            x = lcddev.width - 1 - x;
 8003164:	4b60      	ldr	r3, [pc, #384]	; (80032e8 <lcd_set_cursor+0x1a8>)
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8003172:	4b5d      	ldr	r3, [pc, #372]	; (80032e8 <lcd_set_cursor+0x1a8>)
 8003174:	895b      	ldrh	r3, [r3, #10]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff ff9a 	bl	80030b0 <lcd_wr_regno>
            lcd_wr_data(0);
 800317c:	2000      	movs	r0, #0
 800317e:	f7ff ff83 	bl	8003088 <lcd_wr_data>
            lcd_wr_data(0);
 8003182:	2000      	movs	r0, #0
 8003184:	f7ff ff80 	bl	8003088 <lcd_wr_data>
            lcd_wr_data(x >> 8);
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	b29b      	uxth	r3, r3
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ff7a 	bl	8003088 <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	b29b      	uxth	r3, r3
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ff74 	bl	8003088 <lcd_wr_data>
 80031a0:	e021      	b.n	80031e6 <lcd_set_cursor+0xa6>
        }
        else                    /* landscape mode */
        {
            lcd_wr_regno(lcddev.setxcmd);
 80031a2:	4b51      	ldr	r3, [pc, #324]	; (80032e8 <lcd_set_cursor+0x1a8>)
 80031a4:	895b      	ldrh	r3, [r3, #10]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff82 	bl	80030b0 <lcd_wr_regno>
            lcd_wr_data(x >> 8);
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff68 	bl	8003088 <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	b29b      	uxth	r3, r3
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff ff62 	bl	8003088 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) >> 8);
 80031c4:	4b48      	ldr	r3, [pc, #288]	; (80032e8 <lcd_set_cursor+0x1a8>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	121b      	asrs	r3, r3, #8
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff5a 	bl	8003088 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 80031d4:	4b44      	ldr	r3, [pc, #272]	; (80032e8 <lcd_set_cursor+0x1a8>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29b      	uxth	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	b29b      	uxth	r3, r3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff51 	bl	8003088 <lcd_wr_data>
        }

        lcd_wr_regno(lcddev.setycmd);
 80031e6:	4b40      	ldr	r3, [pc, #256]	; (80032e8 <lcd_set_cursor+0x1a8>)
 80031e8:	899b      	ldrh	r3, [r3, #12]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff60 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 80031f0:	88bb      	ldrh	r3, [r7, #4]
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff46 	bl	8003088 <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 80031fc:	88bb      	ldrh	r3, [r7, #4]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	b29b      	uxth	r3, r3
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff40 	bl	8003088 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8003208:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <lcd_set_cursor+0x1a8>)
 800320a:	885b      	ldrh	r3, [r3, #2]
 800320c:	3b01      	subs	r3, #1
 800320e:	121b      	asrs	r3, r3, #8
 8003210:	b29b      	uxth	r3, r3
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ff38 	bl	8003088 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8003218:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <lcd_set_cursor+0x1a8>)
 800321a:	885b      	ldrh	r3, [r3, #2]
 800321c:	3b01      	subs	r3, #1
 800321e:	b29b      	uxth	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	b29b      	uxth	r3, r3
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff2f 	bl	8003088 <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 800322a:	e058      	b.n	80032de <lcd_set_cursor+0x19e>
    else if (lcddev.id == 0X5510)
 800322c:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <lcd_set_cursor+0x1a8>)
 800322e:	889b      	ldrh	r3, [r3, #4]
 8003230:	f245 5210 	movw	r2, #21776	; 0x5510
 8003234:	4293      	cmp	r3, r2
 8003236:	d130      	bne.n	800329a <lcd_set_cursor+0x15a>
        lcd_wr_regno(lcddev.setxcmd);
 8003238:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <lcd_set_cursor+0x1a8>)
 800323a:	895b      	ldrh	r3, [r3, #10]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff37 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	b29b      	uxth	r3, r3
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff1d 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 800324e:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <lcd_set_cursor+0x1a8>)
 8003250:	895b      	ldrh	r3, [r3, #10]
 8003252:	3301      	adds	r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ff2a 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(x & 0XFF);
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	b29b      	uxth	r3, r3
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff10 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8003268:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <lcd_set_cursor+0x1a8>)
 800326a:	899b      	ldrh	r3, [r3, #12]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff1f 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8003272:	88bb      	ldrh	r3, [r7, #4]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	b29b      	uxth	r3, r3
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff05 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 800327e:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <lcd_set_cursor+0x1a8>)
 8003280:	899b      	ldrh	r3, [r3, #12]
 8003282:	3301      	adds	r3, #1
 8003284:	b29b      	uxth	r3, r3
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff12 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(y & 0XFF);
 800328c:	88bb      	ldrh	r3, [r7, #4]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	b29b      	uxth	r3, r3
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fef8 	bl	8003088 <lcd_wr_data>
}
 8003298:	e021      	b.n	80032de <lcd_set_cursor+0x19e>
        lcd_wr_regno(lcddev.setxcmd);
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <lcd_set_cursor+0x1a8>)
 800329c:	895b      	ldrh	r3, [r3, #10]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff06 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff feec 	bl	8003088 <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fee6 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <lcd_set_cursor+0x1a8>)
 80032be:	899b      	ldrh	r3, [r3, #12]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fef5 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 80032c6:	88bb      	ldrh	r3, [r7, #4]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fedb 	bl	8003088 <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 80032d2:	88bb      	ldrh	r3, [r7, #4]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fed5 	bl	8003088 <lcd_wr_data>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000088 	.word	0x20000088

080032ec <lcd_scan_dir>:
 * @brief   Set the automatic scanning direction of LCD
 * @param   dir: 0 to 7, representing 8 directions (see lcd.h for definitions)
 * @retval  None.
 */
void lcd_scan_dir(uint8_t dir)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	81fb      	strh	r3, [r7, #14]
    uint16_t dirreg = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	81bb      	strh	r3, [r7, #12]
    uint16_t temp;

    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 80032fe:	4b9c      	ldr	r3, [pc, #624]	; (8003570 <lcd_scan_dir+0x284>)
 8003300:	799b      	ldrb	r3, [r3, #6]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d105      	bne.n	8003312 <lcd_scan_dir+0x26>
 8003306:	4b9a      	ldr	r3, [pc, #616]	; (8003570 <lcd_scan_dir+0x284>)
 8003308:	889b      	ldrh	r3, [r3, #4]
 800330a:	f641 1263 	movw	r2, #6499	; 0x1963
 800330e:	4293      	cmp	r3, r2
 8003310:	d109      	bne.n	8003326 <lcd_scan_dir+0x3a>
 8003312:	4b97      	ldr	r3, [pc, #604]	; (8003570 <lcd_scan_dir+0x284>)
 8003314:	799b      	ldrb	r3, [r3, #6]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d134      	bne.n	8003384 <lcd_scan_dir+0x98>
 800331a:	4b95      	ldr	r3, [pc, #596]	; (8003570 <lcd_scan_dir+0x284>)
 800331c:	889b      	ldrh	r3, [r3, #4]
 800331e:	f641 1263 	movw	r2, #6499	; 0x1963
 8003322:	4293      	cmp	r3, r2
 8003324:	d12e      	bne.n	8003384 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* Change of direction */
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	2b07      	cmp	r3, #7
 800332a:	d82b      	bhi.n	8003384 <lcd_scan_dir+0x98>
 800332c:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <lcd_scan_dir+0x48>)
 800332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003332:	bf00      	nop
 8003334:	08003355 	.word	0x08003355
 8003338:	0800335b 	.word	0x0800335b
 800333c:	08003361 	.word	0x08003361
 8003340:	08003367 	.word	0x08003367
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003373 	.word	0x08003373
 800334c:	08003379 	.word	0x08003379
 8003350:	0800337f 	.word	0x0800337f
        {
            case L2R_U2D:
                dir = D2U_L2R;
 8003354:	2306      	movs	r3, #6
 8003356:	71fb      	strb	r3, [r7, #7]
                break;
 8003358:	e014      	b.n	8003384 <lcd_scan_dir+0x98>

            case L2R_D2U:
                dir = D2U_R2L;
 800335a:	2307      	movs	r3, #7
 800335c:	71fb      	strb	r3, [r7, #7]
                break;
 800335e:	e011      	b.n	8003384 <lcd_scan_dir+0x98>

            case R2L_U2D:
                dir = U2D_L2R;
 8003360:	2304      	movs	r3, #4
 8003362:	71fb      	strb	r3, [r7, #7]
                break;
 8003364:	e00e      	b.n	8003384 <lcd_scan_dir+0x98>

            case R2L_D2U:
                dir = U2D_R2L;
 8003366:	2305      	movs	r3, #5
 8003368:	71fb      	strb	r3, [r7, #7]
                break;
 800336a:	e00b      	b.n	8003384 <lcd_scan_dir+0x98>

            case U2D_L2R:
                dir = L2R_D2U;
 800336c:	2301      	movs	r3, #1
 800336e:	71fb      	strb	r3, [r7, #7]
                break;
 8003370:	e008      	b.n	8003384 <lcd_scan_dir+0x98>

            case U2D_R2L:
                dir = L2R_U2D;
 8003372:	2300      	movs	r3, #0
 8003374:	71fb      	strb	r3, [r7, #7]
                break;
 8003376:	e005      	b.n	8003384 <lcd_scan_dir+0x98>

            case D2U_L2R:
                dir = R2L_D2U;
 8003378:	2303      	movs	r3, #3
 800337a:	71fb      	strb	r3, [r7, #7]
                break;
 800337c:	e002      	b.n	8003384 <lcd_scan_dir+0x98>

            case D2U_R2L:
                dir = R2L_U2D;
 800337e:	2302      	movs	r3, #2
 8003380:	71fb      	strb	r3, [r7, #7]
                break;
 8003382:	bf00      	nop
        }
    }

    /* Set the value of 0X36/0X3600 register bit 5,6,7 according to the scan mode */
    switch (dir)
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	2b07      	cmp	r3, #7
 8003388:	d835      	bhi.n	80033f6 <lcd_scan_dir+0x10a>
 800338a:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <lcd_scan_dir+0xa4>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033f7 	.word	0x080033f7
 8003394:	080033b1 	.word	0x080033b1
 8003398:	080033bb 	.word	0x080033bb
 800339c:	080033c5 	.word	0x080033c5
 80033a0:	080033cf 	.word	0x080033cf
 80033a4:	080033d9 	.word	0x080033d9
 80033a8:	080033e3 	.word	0x080033e3
 80033ac:	080033ed 	.word	0x080033ed
        case L2R_U2D:/* From left to right, from top to bottom */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* From left to right, from bottom to top */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80033b0:	89fb      	ldrh	r3, [r7, #14]
 80033b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b6:	81fb      	strh	r3, [r7, #14]
            break;
 80033b8:	e01d      	b.n	80033f6 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* From right to left, from top to bottom */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80033ba:	89fb      	ldrh	r3, [r7, #14]
 80033bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c0:	81fb      	strh	r3, [r7, #14]
            break;
 80033c2:	e018      	b.n	80033f6 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* From right to left, from bottom to top */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033ca:	81fb      	strh	r3, [r7, #14]
            break;
 80033cc:	e013      	b.n	80033f6 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* From top to bottom, left to right */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80033ce:	89fb      	ldrh	r3, [r7, #14]
 80033d0:	f043 0320 	orr.w	r3, r3, #32
 80033d4:	81fb      	strh	r3, [r7, #14]
            break;
 80033d6:	e00e      	b.n	80033f6 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* From top to bottom, right to left */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80033d8:	89fb      	ldrh	r3, [r7, #14]
 80033da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033de:	81fb      	strh	r3, [r7, #14]
            break;
 80033e0:	e009      	b.n	80033f6 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* From bottom to top, left to right */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80033e2:	89fb      	ldrh	r3, [r7, #14]
 80033e4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80033e8:	81fb      	strh	r3, [r7, #14]
            break;
 80033ea:	e004      	b.n	80033f6 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* From bottom to top, right to left */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80033ec:	89fb      	ldrh	r3, [r7, #14]
 80033ee:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80033f2:	81fb      	strh	r3, [r7, #14]
            break;
 80033f4:	bf00      	nop
    }

    if (lcddev.id == 0X5510)
 80033f6:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <lcd_scan_dir+0x284>)
 80033f8:	889b      	ldrh	r3, [r3, #4]
 80033fa:	f245 5210 	movw	r2, #21776	; 0x5510
 80033fe:	4293      	cmp	r3, r2
 8003400:	d103      	bne.n	800340a <lcd_scan_dir+0x11e>
    {
        dirreg = 0X3600;    /* For 5510, there is a difference between the registers of the other driver ics */
 8003402:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8003406:	81bb      	strh	r3, [r7, #12]
 8003408:	e001      	b.n	800340e <lcd_scan_dir+0x122>
    }
    else
    {
    	dirreg = 0X36;  /* For most driver ics, it is controlled by the 0X36 register */
 800340a:	2336      	movs	r3, #54	; 0x36
 800340c:	81bb      	strh	r3, [r7, #12]
    }

    /* 9341 & 7789 & 7796 to set the BGR bit */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 800340e:	4b58      	ldr	r3, [pc, #352]	; (8003570 <lcd_scan_dir+0x284>)
 8003410:	889b      	ldrh	r3, [r3, #4]
 8003412:	f249 3241 	movw	r2, #37697	; 0x9341
 8003416:	4293      	cmp	r3, r2
 8003418:	d00b      	beq.n	8003432 <lcd_scan_dir+0x146>
 800341a:	4b55      	ldr	r3, [pc, #340]	; (8003570 <lcd_scan_dir+0x284>)
 800341c:	889b      	ldrh	r3, [r3, #4]
 800341e:	f247 7289 	movw	r2, #30601	; 0x7789
 8003422:	4293      	cmp	r3, r2
 8003424:	d005      	beq.n	8003432 <lcd_scan_dir+0x146>
 8003426:	4b52      	ldr	r3, [pc, #328]	; (8003570 <lcd_scan_dir+0x284>)
 8003428:	889b      	ldrh	r3, [r3, #4]
 800342a:	f247 7296 	movw	r2, #30614	; 0x7796
 800342e:	4293      	cmp	r3, r2
 8003430:	d103      	bne.n	800343a <lcd_scan_dir+0x14e>
    {
        regval |= 0X08;
 8003432:	89fb      	ldrh	r3, [r7, #14]
 8003434:	f043 0308 	orr.w	r3, r3, #8
 8003438:	81fb      	strh	r3, [r7, #14]
    }

    lcd_write_reg(dirreg, regval);
 800343a:	89fa      	ldrh	r2, [r7, #14]
 800343c:	89bb      	ldrh	r3, [r7, #12]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fe49 	bl	80030d8 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963 no coordinate manipulation */
 8003446:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <lcd_scan_dir+0x284>)
 8003448:	889b      	ldrh	r3, [r3, #4]
 800344a:	f641 1263 	movw	r2, #6499	; 0x1963
 800344e:	4293      	cmp	r3, r2
 8003450:	d025      	beq.n	800349e <lcd_scan_dir+0x1b2>
    {
        if (regval & 0X20)
 8003452:	89fb      	ldrh	r3, [r7, #14]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d010      	beq.n	800347e <lcd_scan_dir+0x192>
        {
            if (lcddev.width < lcddev.height)   /* Swap X and Y */
 800345c:	4b44      	ldr	r3, [pc, #272]	; (8003570 <lcd_scan_dir+0x284>)
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <lcd_scan_dir+0x284>)
 8003462:	885b      	ldrh	r3, [r3, #2]
 8003464:	429a      	cmp	r2, r3
 8003466:	d21a      	bcs.n	800349e <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 8003468:	4b41      	ldr	r3, [pc, #260]	; (8003570 <lcd_scan_dir+0x284>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 800346e:	4b40      	ldr	r3, [pc, #256]	; (8003570 <lcd_scan_dir+0x284>)
 8003470:	885a      	ldrh	r2, [r3, #2]
 8003472:	4b3f      	ldr	r3, [pc, #252]	; (8003570 <lcd_scan_dir+0x284>)
 8003474:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8003476:	4a3e      	ldr	r2, [pc, #248]	; (8003570 <lcd_scan_dir+0x284>)
 8003478:	897b      	ldrh	r3, [r7, #10]
 800347a:	8053      	strh	r3, [r2, #2]
 800347c:	e00f      	b.n	800349e <lcd_scan_dir+0x1b2>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* Swap X and Y */
 800347e:	4b3c      	ldr	r3, [pc, #240]	; (8003570 <lcd_scan_dir+0x284>)
 8003480:	881a      	ldrh	r2, [r3, #0]
 8003482:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <lcd_scan_dir+0x284>)
 8003484:	885b      	ldrh	r3, [r3, #2]
 8003486:	429a      	cmp	r2, r3
 8003488:	d909      	bls.n	800349e <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <lcd_scan_dir+0x284>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8003490:	4b37      	ldr	r3, [pc, #220]	; (8003570 <lcd_scan_dir+0x284>)
 8003492:	885a      	ldrh	r2, [r3, #2]
 8003494:	4b36      	ldr	r3, [pc, #216]	; (8003570 <lcd_scan_dir+0x284>)
 8003496:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8003498:	4a35      	ldr	r2, [pc, #212]	; (8003570 <lcd_scan_dir+0x284>)
 800349a:	897b      	ldrh	r3, [r7, #10]
 800349c:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* Set the size of the display area (window) */
    if (lcddev.id == 0X5510)
 800349e:	4b34      	ldr	r3, [pc, #208]	; (8003570 <lcd_scan_dir+0x284>)
 80034a0:	889b      	ldrh	r3, [r3, #4]
 80034a2:	f245 5210 	movw	r2, #21776	; 0x5510
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d164      	bne.n	8003574 <lcd_scan_dir+0x288>
    {
        lcd_wr_regno(lcddev.setxcmd);
 80034aa:	4b31      	ldr	r3, [pc, #196]	; (8003570 <lcd_scan_dir+0x284>)
 80034ac:	895b      	ldrh	r3, [r3, #10]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fdfe 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(0);
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7ff fde7 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <lcd_scan_dir+0x284>)
 80034bc:	895b      	ldrh	r3, [r3, #10]
 80034be:	3301      	adds	r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fdf4 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(0);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7ff fddd 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 2);
 80034ce:	4b28      	ldr	r3, [pc, #160]	; (8003570 <lcd_scan_dir+0x284>)
 80034d0:	895b      	ldrh	r3, [r3, #10]
 80034d2:	3302      	adds	r3, #2
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fdea 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) >> 8);
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <lcd_scan_dir+0x284>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	121b      	asrs	r3, r3, #8
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fdce 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 3);
 80034ec:	4b20      	ldr	r3, [pc, #128]	; (8003570 <lcd_scan_dir+0x284>)
 80034ee:	895b      	ldrh	r3, [r3, #10]
 80034f0:	3303      	adds	r3, #3
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fddb 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 80034fa:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <lcd_scan_dir+0x284>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29b      	uxth	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	b29b      	uxth	r3, r3
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fdbe 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <lcd_scan_dir+0x284>)
 800350e:	899b      	ldrh	r3, [r3, #12]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fdcd 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(0);
 8003516:	2000      	movs	r0, #0
 8003518:	f7ff fdb6 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <lcd_scan_dir+0x284>)
 800351e:	899b      	ldrh	r3, [r3, #12]
 8003520:	3301      	adds	r3, #1
 8003522:	b29b      	uxth	r3, r3
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fdc3 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(0);
 800352a:	2000      	movs	r0, #0
 800352c:	f7ff fdac 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 2);
 8003530:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <lcd_scan_dir+0x284>)
 8003532:	899b      	ldrh	r3, [r3, #12]
 8003534:	3302      	adds	r3, #2
 8003536:	b29b      	uxth	r3, r3
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fdb9 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) >> 8);
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <lcd_scan_dir+0x284>)
 8003540:	885b      	ldrh	r3, [r3, #2]
 8003542:	3b01      	subs	r3, #1
 8003544:	121b      	asrs	r3, r3, #8
 8003546:	b29b      	uxth	r3, r3
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fd9d 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 3);
 800354e:	4b08      	ldr	r3, [pc, #32]	; (8003570 <lcd_scan_dir+0x284>)
 8003550:	899b      	ldrh	r3, [r3, #12]
 8003552:	3303      	adds	r3, #3
 8003554:	b29b      	uxth	r3, r3
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fdaa 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <lcd_scan_dir+0x284>)
 800355e:	885b      	ldrh	r3, [r3, #2]
 8003560:	3b01      	subs	r3, #1
 8003562:	b29b      	uxth	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	b29b      	uxth	r3, r3
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fd8d 	bl	8003088 <lcd_wr_data>
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 800356e:	e039      	b.n	80035e4 <lcd_scan_dir+0x2f8>
 8003570:	20000088 	.word	0x20000088
        lcd_wr_regno(lcddev.setxcmd);
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <lcd_scan_dir+0x300>)
 8003576:	895b      	ldrh	r3, [r3, #10]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fd99 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(0);
 800357e:	2000      	movs	r0, #0
 8003580:	f7ff fd82 	bl	8003088 <lcd_wr_data>
        lcd_wr_data(0);
 8003584:	2000      	movs	r0, #0
 8003586:	f7ff fd7f 	bl	8003088 <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) >> 8);
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <lcd_scan_dir+0x300>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	3b01      	subs	r3, #1
 8003590:	121b      	asrs	r3, r3, #8
 8003592:	b29b      	uxth	r3, r3
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fd77 	bl	8003088 <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <lcd_scan_dir+0x300>)
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fd6e 	bl	8003088 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <lcd_scan_dir+0x300>)
 80035ae:	899b      	ldrh	r3, [r3, #12]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fd7d 	bl	80030b0 <lcd_wr_regno>
        lcd_wr_data(0);
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7ff fd66 	bl	8003088 <lcd_wr_data>
        lcd_wr_data(0);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7ff fd63 	bl	8003088 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <lcd_scan_dir+0x300>)
 80035c4:	885b      	ldrh	r3, [r3, #2]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	121b      	asrs	r3, r3, #8
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fd5b 	bl	8003088 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <lcd_scan_dir+0x300>)
 80035d4:	885b      	ldrh	r3, [r3, #2]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29b      	uxth	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fd52 	bl	8003088 <lcd_wr_data>
}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000088 	.word	0x20000088

080035f0 <lcd_draw_point>:
 * @param   x,y  : coordinate
 * @param   color: Point color
 * @retval  None.
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	603a      	str	r2, [r7, #0]
 80035fa:	80fb      	strh	r3, [r7, #6]
 80035fc:	460b      	mov	r3, r1
 80035fe:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* Sets the cursor position */
 8003600:	88ba      	ldrh	r2, [r7, #4]
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fd9a 	bl	8003140 <lcd_set_cursor>
    lcd_write_ram_prepare();    /* Start writing GRAM */
 800360c:	f7ff fd8a 	bl	8003124 <lcd_write_ram_prepare>
    LCD->LCD_RAM = color;
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <lcd_draw_point+0x30>)
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	b292      	uxth	r2, r2
 8003616:	805a      	strh	r2, [r3, #2]
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	600ffffe 	.word	0x600ffffe
 8003624:	00000000 	.word	0x00000000

08003628 <lcd_ssd_backlight_set>:
 * @brief   SSD1963 backlight brightness setting function
 * @param   pwm  : Backlight level,0~100. The larger the brighter.
 * @retval  None.
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
    lcd_wr_regno(0xBE);         /* Configure PWM output */
 8003632:	20be      	movs	r0, #190	; 0xbe
 8003634:	f7ff fd3c 	bl	80030b0 <lcd_wr_regno>
    lcd_wr_data(0x05);          /* 1 Set the PWM frequency */
 8003638:	2005      	movs	r0, #5
 800363a:	f7ff fd25 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(pwm * 2.55);    /* 2 Set the PWM duty cycle */
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd f86d 	bl	8000720 <__aeabi_i2d>
 8003646:	a310      	add	r3, pc, #64	; (adr r3, 8003688 <lcd_ssd_backlight_set+0x60>)
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f7fc fdec 	bl	8000228 <__aeabi_dmul>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4610      	mov	r0, r2
 8003656:	4619      	mov	r1, r3
 8003658:	f7fd f8cc 	bl	80007f4 <__aeabi_d2uiz>
 800365c:	4603      	mov	r3, r0
 800365e:	b29b      	uxth	r3, r3
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fd11 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x01);          /* 3 Setting C */
 8003666:	2001      	movs	r0, #1
 8003668:	f7ff fd0e 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0xFF);          /* 4 Setting D */
 800366c:	20ff      	movs	r0, #255	; 0xff
 800366e:	f7ff fd0b 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);          /* 5 Setting E */
 8003672:	2000      	movs	r0, #0
 8003674:	f7ff fd08 	bl	8003088 <lcd_wr_data>
    lcd_wr_data(0x00);          /* 6 Setting F */
 8003678:	2000      	movs	r0, #0
 800367a:	f7ff fd05 	bl	8003088 <lcd_wr_data>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	66666666 	.word	0x66666666
 800368c:	40046666 	.word	0x40046666

08003690 <lcd_display_dir>:
 * @brief   Set the LCD display orientation
 * @param   dir  : 0, portrait; 1. Landscape
 * @retval  None.
 */
void lcd_display_dir(uint8_t dir)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* Portrait/landscape */
 800369a:	4a68      	ldr	r2, [pc, #416]	; (800383c <lcd_display_dir+0x1ac>)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* Portrait */
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d165      	bne.n	8003772 <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 80036a6:	4b65      	ldr	r3, [pc, #404]	; (800383c <lcd_display_dir+0x1ac>)
 80036a8:	22f0      	movs	r2, #240	; 0xf0
 80036aa:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 80036ac:	4b63      	ldr	r3, [pc, #396]	; (800383c <lcd_display_dir+0x1ac>)
 80036ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036b2:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 80036b4:	4b61      	ldr	r3, [pc, #388]	; (800383c <lcd_display_dir+0x1ac>)
 80036b6:	889b      	ldrh	r3, [r3, #4]
 80036b8:	f245 5210 	movw	r2, #21776	; 0x5510
 80036bc:	4293      	cmp	r3, r2
 80036be:	d114      	bne.n	80036ea <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 80036c0:	4b5e      	ldr	r3, [pc, #376]	; (800383c <lcd_display_dir+0x1ac>)
 80036c2:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80036c6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 80036c8:	4b5c      	ldr	r3, [pc, #368]	; (800383c <lcd_display_dir+0x1ac>)
 80036ca:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80036ce:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 80036d0:	4b5a      	ldr	r3, [pc, #360]	; (800383c <lcd_display_dir+0x1ac>)
 80036d2:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80036d6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 80036d8:	4b58      	ldr	r3, [pc, #352]	; (800383c <lcd_display_dir+0x1ac>)
 80036da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80036de:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 80036e0:	4b56      	ldr	r3, [pc, #344]	; (800383c <lcd_display_dir+0x1ac>)
 80036e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80036e6:	805a      	strh	r2, [r3, #2]
 80036e8:	e020      	b.n	800372c <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 80036ea:	4b54      	ldr	r3, [pc, #336]	; (800383c <lcd_display_dir+0x1ac>)
 80036ec:	889b      	ldrh	r3, [r3, #4]
 80036ee:	f641 1263 	movw	r2, #6499	; 0x1963
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d111      	bne.n	800371a <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 80036f6:	4b51      	ldr	r3, [pc, #324]	; (800383c <lcd_display_dir+0x1ac>)
 80036f8:	222c      	movs	r2, #44	; 0x2c
 80036fa:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* Set the write x-coordinate instruction */
 80036fc:	4b4f      	ldr	r3, [pc, #316]	; (800383c <lcd_display_dir+0x1ac>)
 80036fe:	222b      	movs	r2, #43	; 0x2b
 8003700:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* Set the write y-coordinate instruction */
 8003702:	4b4e      	ldr	r3, [pc, #312]	; (800383c <lcd_display_dir+0x1ac>)
 8003704:	222a      	movs	r2, #42	; 0x2a
 8003706:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* Set width 480 */
 8003708:	4b4c      	ldr	r3, [pc, #304]	; (800383c <lcd_display_dir+0x1ac>)
 800370a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800370e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* Set height 800 */
 8003710:	4b4a      	ldr	r3, [pc, #296]	; (800383c <lcd_display_dir+0x1ac>)
 8003712:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003716:	805a      	strh	r2, [r3, #2]
 8003718:	e008      	b.n	800372c <lcd_display_dir+0x9c>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 800371a:	4b48      	ldr	r3, [pc, #288]	; (800383c <lcd_display_dir+0x1ac>)
 800371c:	222c      	movs	r2, #44	; 0x2c
 800371e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8003720:	4b46      	ldr	r3, [pc, #280]	; (800383c <lcd_display_dir+0x1ac>)
 8003722:	222a      	movs	r2, #42	; 0x2a
 8003724:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8003726:	4b45      	ldr	r3, [pc, #276]	; (800383c <lcd_display_dir+0x1ac>)
 8003728:	222b      	movs	r2, #43	; 0x2b
 800372a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 800372c:	4b43      	ldr	r3, [pc, #268]	; (800383c <lcd_display_dir+0x1ac>)
 800372e:	889b      	ldrh	r3, [r3, #4]
 8003730:	f245 3210 	movw	r2, #21264	; 0x5310
 8003734:	4293      	cmp	r3, r2
 8003736:	d005      	beq.n	8003744 <lcd_display_dir+0xb4>
 8003738:	4b40      	ldr	r3, [pc, #256]	; (800383c <lcd_display_dir+0x1ac>)
 800373a:	889b      	ldrh	r3, [r3, #4]
 800373c:	f247 7296 	movw	r2, #30614	; 0x7796
 8003740:	4293      	cmp	r3, r2
 8003742:	d107      	bne.n	8003754 <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8003744:	4b3d      	ldr	r3, [pc, #244]	; (800383c <lcd_display_dir+0x1ac>)
 8003746:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800374a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 800374c:	4b3b      	ldr	r3, [pc, #236]	; (800383c <lcd_display_dir+0x1ac>)
 800374e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003752:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* 9806 means 480*800 resolution */
 8003754:	4b39      	ldr	r3, [pc, #228]	; (800383c <lcd_display_dir+0x1ac>)
 8003756:	889b      	ldrh	r3, [r3, #4]
 8003758:	f649 0206 	movw	r2, #38918	; 0x9806
 800375c:	4293      	cmp	r3, r2
 800375e:	d165      	bne.n	800382c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <lcd_display_dir+0x1ac>)
 8003762:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003766:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8003768:	4b34      	ldr	r3, [pc, #208]	; (800383c <lcd_display_dir+0x1ac>)
 800376a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800376e:	805a      	strh	r2, [r3, #2]
 8003770:	e05c      	b.n	800382c <lcd_display_dir+0x19c>
        }
    }
    else                            /* landscape */
    {
        lcddev.width = 320;         /* Default width */
 8003772:	4b32      	ldr	r3, [pc, #200]	; (800383c <lcd_display_dir+0x1ac>)
 8003774:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003778:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Default height */
 800377a:	4b30      	ldr	r3, [pc, #192]	; (800383c <lcd_display_dir+0x1ac>)
 800377c:	22f0      	movs	r2, #240	; 0xf0
 800377e:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8003780:	4b2e      	ldr	r3, [pc, #184]	; (800383c <lcd_display_dir+0x1ac>)
 8003782:	889b      	ldrh	r3, [r3, #4]
 8003784:	f245 5210 	movw	r2, #21776	; 0x5510
 8003788:	4293      	cmp	r3, r2
 800378a:	d114      	bne.n	80037b6 <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 800378c:	4b2b      	ldr	r3, [pc, #172]	; (800383c <lcd_display_dir+0x1ac>)
 800378e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003792:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8003794:	4b29      	ldr	r3, [pc, #164]	; (800383c <lcd_display_dir+0x1ac>)
 8003796:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800379a:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <lcd_display_dir+0x1ac>)
 800379e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80037a2:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <lcd_display_dir+0x1ac>)
 80037a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80037aa:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 80037ac:	4b23      	ldr	r3, [pc, #140]	; (800383c <lcd_display_dir+0x1ac>)
 80037ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80037b2:	805a      	strh	r2, [r3, #2]
 80037b4:	e026      	b.n	8003804 <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 80037b6:	4b21      	ldr	r3, [pc, #132]	; (800383c <lcd_display_dir+0x1ac>)
 80037b8:	889b      	ldrh	r3, [r3, #4]
 80037ba:	f641 1263 	movw	r2, #6499	; 0x1963
 80037be:	4293      	cmp	r3, r2
 80037c0:	d005      	beq.n	80037ce <lcd_display_dir+0x13e>
 80037c2:	4b1e      	ldr	r3, [pc, #120]	; (800383c <lcd_display_dir+0x1ac>)
 80037c4:	889b      	ldrh	r3, [r3, #4]
 80037c6:	f649 0206 	movw	r2, #38918	; 0x9806
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d111      	bne.n	80037f2 <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <lcd_display_dir+0x1ac>)
 80037d0:	222c      	movs	r2, #44	; 0x2c
 80037d2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* Set the write x-coordinate instruction */
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <lcd_display_dir+0x1ac>)
 80037d6:	222a      	movs	r2, #42	; 0x2a
 80037d8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* Set the write y-coordinate instruction */
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <lcd_display_dir+0x1ac>)
 80037dc:	222b      	movs	r2, #43	; 0x2b
 80037de:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* Set width 800 */
 80037e0:	4b16      	ldr	r3, [pc, #88]	; (800383c <lcd_display_dir+0x1ac>)
 80037e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80037e6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* Set height 480 */
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <lcd_display_dir+0x1ac>)
 80037ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80037ee:	805a      	strh	r2, [r3, #2]
 80037f0:	e008      	b.n	8003804 <lcd_display_dir+0x174>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <lcd_display_dir+0x1ac>)
 80037f4:	222c      	movs	r2, #44	; 0x2c
 80037f6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 80037f8:	4b10      	ldr	r3, [pc, #64]	; (800383c <lcd_display_dir+0x1ac>)
 80037fa:	222a      	movs	r2, #42	; 0x2a
 80037fc:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <lcd_display_dir+0x1ac>)
 8003800:	222b      	movs	r2, #43	; 0x2b
 8003802:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <lcd_display_dir+0x1ac>)
 8003806:	889b      	ldrh	r3, [r3, #4]
 8003808:	f245 3210 	movw	r2, #21264	; 0x5310
 800380c:	4293      	cmp	r3, r2
 800380e:	d005      	beq.n	800381c <lcd_display_dir+0x18c>
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <lcd_display_dir+0x1ac>)
 8003812:	889b      	ldrh	r3, [r3, #4]
 8003814:	f247 7296 	movw	r2, #30614	; 0x7796
 8003818:	4293      	cmp	r3, r2
 800381a:	d107      	bne.n	800382c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 800381c:	4b07      	ldr	r3, [pc, #28]	; (800383c <lcd_display_dir+0x1ac>)
 800381e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003822:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <lcd_display_dir+0x1ac>)
 8003826:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800382a:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Default scan direction */
 800382c:	2000      	movs	r0, #0
 800382e:	f7ff fd5d 	bl	80032ec <lcd_scan_dir>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000088 	.word	0x20000088

08003840 <lcd_init>:
 * @note    This initialization function can initialize various types of LCD
 * @param   None.
 * @retval  None.
 */
void lcd_init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
	HAL_Delay(50);        /* After initializing the FSMC, a certain amount of time must be waited before the initialization can start */
 8003844:	2032      	movs	r0, #50	; 0x32
 8003846:	f001 f809 	bl	800485c <HAL_Delay>

    /* Try a read of 9341 ID */
    lcd_wr_regno(0XD3);
 800384a:	20d3      	movs	r0, #211	; 0xd3
 800384c:	f7ff fc30 	bl	80030b0 <lcd_wr_regno>
    lcddev.id = lcd_rd_data();  /* dummy read */
 8003850:	f7ff fc58 	bl	8003104 <lcd_rd_data>
 8003854:	4603      	mov	r3, r0
 8003856:	461a      	mov	r2, r3
 8003858:	4bb0      	ldr	r3, [pc, #704]	; (8003b1c <lcd_init+0x2dc>)
 800385a:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 800385c:	f7ff fc52 	bl	8003104 <lcd_rd_data>
 8003860:	4603      	mov	r3, r0
 8003862:	461a      	mov	r2, r3
 8003864:	4bad      	ldr	r3, [pc, #692]	; (8003b1c <lcd_init+0x2dc>)
 8003866:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read 0X93 */
 8003868:	f7ff fc4c 	bl	8003104 <lcd_rd_data>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	4baa      	ldr	r3, [pc, #680]	; (8003b1c <lcd_init+0x2dc>)
 8003872:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8003874:	4ba9      	ldr	r3, [pc, #676]	; (8003b1c <lcd_init+0x2dc>)
 8003876:	889b      	ldrh	r3, [r3, #4]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	b29a      	uxth	r2, r3
 800387c:	4ba7      	ldr	r3, [pc, #668]	; (8003b1c <lcd_init+0x2dc>)
 800387e:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* Read 0X41 */
 8003880:	f7ff fc40 	bl	8003104 <lcd_rd_data>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	4ba4      	ldr	r3, [pc, #656]	; (8003b1c <lcd_init+0x2dc>)
 800388a:	889b      	ldrh	r3, [r3, #4]
 800388c:	4313      	orrs	r3, r2
 800388e:	b29a      	uxth	r2, r3
 8003890:	4ba2      	ldr	r3, [pc, #648]	; (8003b1c <lcd_init+0x2dc>)
 8003892:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* Not 9341, try to see if it's ST7789 */
 8003894:	4ba1      	ldr	r3, [pc, #644]	; (8003b1c <lcd_init+0x2dc>)
 8003896:	889b      	ldrh	r3, [r3, #4]
 8003898:	f249 3241 	movw	r2, #37697	; 0x9341
 800389c:	4293      	cmp	r3, r2
 800389e:	f000 8122 	beq.w	8003ae6 <lcd_init+0x2a6>
    {
        lcd_wr_regno(0X04);
 80038a2:	2004      	movs	r0, #4
 80038a4:	f7ff fc04 	bl	80030b0 <lcd_wr_regno>
        lcddev.id = lcd_rd_data();      /* dummy read */
 80038a8:	f7ff fc2c 	bl	8003104 <lcd_rd_data>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b9a      	ldr	r3, [pc, #616]	; (8003b1c <lcd_init+0x2dc>)
 80038b2:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read to 0X85 */
 80038b4:	f7ff fc26 	bl	8003104 <lcd_rd_data>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	4b97      	ldr	r3, [pc, #604]	; (8003b1c <lcd_init+0x2dc>)
 80038be:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read 0X85 */
 80038c0:	f7ff fc20 	bl	8003104 <lcd_rd_data>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b94      	ldr	r3, [pc, #592]	; (8003b1c <lcd_init+0x2dc>)
 80038ca:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 80038cc:	4b93      	ldr	r3, [pc, #588]	; (8003b1c <lcd_init+0x2dc>)
 80038ce:	889b      	ldrh	r3, [r3, #4]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	4b91      	ldr	r3, [pc, #580]	; (8003b1c <lcd_init+0x2dc>)
 80038d6:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* Read 0X52 */
 80038d8:	f7ff fc14 	bl	8003104 <lcd_rd_data>
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	4b8e      	ldr	r3, [pc, #568]	; (8003b1c <lcd_init+0x2dc>)
 80038e2:	889b      	ldrh	r3, [r3, #4]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	4b8c      	ldr	r3, [pc, #560]	; (8003b1c <lcd_init+0x2dc>)
 80038ea:	809a      	strh	r2, [r3, #4]

        if (lcddev.id == 0X8552)        /* Convert the ID of 8552 to 7789 */
 80038ec:	4b8b      	ldr	r3, [pc, #556]	; (8003b1c <lcd_init+0x2dc>)
 80038ee:	889b      	ldrh	r3, [r3, #4]
 80038f0:	f248 5252 	movw	r2, #34130	; 0x8552
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <lcd_init+0xc0>
        {
            lcddev.id = 0x7789;
 80038f8:	4b88      	ldr	r3, [pc, #544]	; (8003b1c <lcd_init+0x2dc>)
 80038fa:	f247 7289 	movw	r2, #30601	; 0x7789
 80038fe:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Also not ST7789, try not NT35310 */
 8003900:	4b86      	ldr	r3, [pc, #536]	; (8003b1c <lcd_init+0x2dc>)
 8003902:	889b      	ldrh	r3, [r3, #4]
 8003904:	f247 7289 	movw	r2, #30601	; 0x7789
 8003908:	4293      	cmp	r3, r2
 800390a:	f000 80ec 	beq.w	8003ae6 <lcd_init+0x2a6>
        {
            lcd_wr_regno(0xD4);
 800390e:	20d4      	movs	r0, #212	; 0xd4
 8003910:	f7ff fbce 	bl	80030b0 <lcd_wr_regno>
            lcddev.id = lcd_rd_data();  /* dummy read */
 8003914:	f7ff fbf6 	bl	8003104 <lcd_rd_data>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	4b7f      	ldr	r3, [pc, #508]	; (8003b1c <lcd_init+0x2dc>)
 800391e:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x01 */
 8003920:	f7ff fbf0 	bl	8003104 <lcd_rd_data>
 8003924:	4603      	mov	r3, r0
 8003926:	461a      	mov	r2, r3
 8003928:	4b7c      	ldr	r3, [pc, #496]	; (8003b1c <lcd_init+0x2dc>)
 800392a:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x53 */
 800392c:	f7ff fbea 	bl	8003104 <lcd_rd_data>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	4b79      	ldr	r3, [pc, #484]	; (8003b1c <lcd_init+0x2dc>)
 8003936:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8003938:	4b78      	ldr	r3, [pc, #480]	; (8003b1c <lcd_init+0x2dc>)
 800393a:	889b      	ldrh	r3, [r3, #4]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	b29a      	uxth	r2, r3
 8003940:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <lcd_init+0x2dc>)
 8003942:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8003944:	f7ff fbde 	bl	8003104 <lcd_rd_data>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	4b73      	ldr	r3, [pc, #460]	; (8003b1c <lcd_init+0x2dc>)
 800394e:	889b      	ldrh	r3, [r3, #4]
 8003950:	4313      	orrs	r3, r2
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b71      	ldr	r3, [pc, #452]	; (8003b1c <lcd_init+0x2dc>)
 8003956:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Also not NT35310, try to see if it is ST7796 */
 8003958:	4b70      	ldr	r3, [pc, #448]	; (8003b1c <lcd_init+0x2dc>)
 800395a:	889b      	ldrh	r3, [r3, #4]
 800395c:	f245 3210 	movw	r2, #21264	; 0x5310
 8003960:	4293      	cmp	r3, r2
 8003962:	f000 80c0 	beq.w	8003ae6 <lcd_init+0x2a6>
            {
                lcd_wr_regno(0XD3);
 8003966:	20d3      	movs	r0, #211	; 0xd3
 8003968:	f7ff fba2 	bl	80030b0 <lcd_wr_regno>
                lcddev.id = lcd_rd_data();  /* dummy read */
 800396c:	f7ff fbca 	bl	8003104 <lcd_rd_data>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	4b69      	ldr	r3, [pc, #420]	; (8003b1c <lcd_init+0x2dc>)
 8003976:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8003978:	f7ff fbc4 	bl	8003104 <lcd_rd_data>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	4b66      	ldr	r3, [pc, #408]	; (8003b1c <lcd_init+0x2dc>)
 8003982:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read 0X77 */
 8003984:	f7ff fbbe 	bl	8003104 <lcd_rd_data>
 8003988:	4603      	mov	r3, r0
 800398a:	461a      	mov	r2, r3
 800398c:	4b63      	ldr	r3, [pc, #396]	; (8003b1c <lcd_init+0x2dc>)
 800398e:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8003990:	4b62      	ldr	r3, [pc, #392]	; (8003b1c <lcd_init+0x2dc>)
 8003992:	889b      	ldrh	r3, [r3, #4]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	b29a      	uxth	r2, r3
 8003998:	4b60      	ldr	r3, [pc, #384]	; (8003b1c <lcd_init+0x2dc>)
 800399a:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* Read 0X96 */
 800399c:	f7ff fbb2 	bl	8003104 <lcd_rd_data>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <lcd_init+0x2dc>)
 80039a6:	889b      	ldrh	r3, [r3, #4]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	4b5b      	ldr	r3, [pc, #364]	; (8003b1c <lcd_init+0x2dc>)
 80039ae:	809a      	strh	r2, [r3, #4]

                if (lcddev.id != 0x7796)    /* Also not ST7796, try to see if it is NT35510 */
 80039b0:	4b5a      	ldr	r3, [pc, #360]	; (8003b1c <lcd_init+0x2dc>)
 80039b2:	889b      	ldrh	r3, [r3, #4]
 80039b4:	f247 7296 	movw	r2, #30614	; 0x7796
 80039b8:	4293      	cmp	r3, r2
 80039ba:	f000 8094 	beq.w	8003ae6 <lcd_init+0x2a6>
                {
                    /* Send key (provided by manufacturer) */
                    lcd_write_reg(0xF000, 0x0055);
 80039be:	2155      	movs	r1, #85	; 0x55
 80039c0:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80039c4:	f7ff fb88 	bl	80030d8 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 80039c8:	21aa      	movs	r1, #170	; 0xaa
 80039ca:	f24f 0001 	movw	r0, #61441	; 0xf001
 80039ce:	f7ff fb83 	bl	80030d8 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 80039d2:	2152      	movs	r1, #82	; 0x52
 80039d4:	f24f 0002 	movw	r0, #61442	; 0xf002
 80039d8:	f7ff fb7e 	bl	80030d8 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 80039dc:	2108      	movs	r1, #8
 80039de:	f24f 0003 	movw	r0, #61443	; 0xf003
 80039e2:	f7ff fb79 	bl	80030d8 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 80039e6:	2101      	movs	r1, #1
 80039e8:	f24f 0004 	movw	r0, #61444	; 0xf004
 80039ec:	f7ff fb74 	bl	80030d8 <lcd_write_reg>

                    lcd_wr_regno(0xC500);       /* Read the lower eight bits of the ID */
 80039f0:	f44f 4045 	mov.w	r0, #50432	; 0xc500
 80039f4:	f7ff fb5c 	bl	80030b0 <lcd_wr_regno>
                    lcddev.id = lcd_rd_data();  /* Read back 0x55 */
 80039f8:	f7ff fb84 	bl	8003104 <lcd_rd_data>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <lcd_init+0x2dc>)
 8003a02:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8003a04:	4b45      	ldr	r3, [pc, #276]	; (8003b1c <lcd_init+0x2dc>)
 8003a06:	889b      	ldrh	r3, [r3, #4]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <lcd_init+0x2dc>)
 8003a0e:	809a      	strh	r2, [r3, #4]

                    lcd_wr_regno(0xC501);       /* Read the high eight bits of the ID */
 8003a10:	f24c 5001 	movw	r0, #50433	; 0xc501
 8003a14:	f7ff fb4c 	bl	80030b0 <lcd_wr_regno>
                    lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8003a18:	f7ff fb74 	bl	8003104 <lcd_rd_data>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4b3e      	ldr	r3, [pc, #248]	; (8003b1c <lcd_init+0x2dc>)
 8003a22:	889b      	ldrh	r3, [r3, #4]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	4b3c      	ldr	r3, [pc, #240]	; (8003b1c <lcd_init+0x2dc>)
 8003a2a:	809a      	strh	r2, [r3, #4]

                    HAL_Delay(5);                /* Wait 5ms, because instruction 0XC501 is a software reset instruction for 1963, wait 5ms for 1963 reset to complete */
 8003a2c:	2005      	movs	r0, #5
 8003a2e:	f000 ff15 	bl	800485c <HAL_Delay>

                    if (lcddev.id != 0x5510)    /* Also not NT5510, try to see if it is ILI9806 */
 8003a32:	4b3a      	ldr	r3, [pc, #232]	; (8003b1c <lcd_init+0x2dc>)
 8003a34:	889b      	ldrh	r3, [r3, #4]
 8003a36:	f245 5210 	movw	r2, #21776	; 0x5510
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d053      	beq.n	8003ae6 <lcd_init+0x2a6>
                    {
                        lcd_wr_regno(0XD3);
 8003a3e:	20d3      	movs	r0, #211	; 0xd3
 8003a40:	f7ff fb36 	bl	80030b0 <lcd_wr_regno>
                        lcddev.id = lcd_rd_data();  /* dummy read */
 8003a44:	f7ff fb5e 	bl	8003104 <lcd_rd_data>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <lcd_init+0x2dc>)
 8003a4e:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X00 */
 8003a50:	f7ff fb58 	bl	8003104 <lcd_rd_data>
 8003a54:	4603      	mov	r3, r0
 8003a56:	461a      	mov	r2, r3
 8003a58:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <lcd_init+0x2dc>)
 8003a5a:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X98 */
 8003a5c:	f7ff fb52 	bl	8003104 <lcd_rd_data>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <lcd_init+0x2dc>)
 8003a66:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 8003a68:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <lcd_init+0x2dc>)
 8003a6a:	889b      	ldrh	r3, [r3, #4]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <lcd_init+0x2dc>)
 8003a72:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* Read back 0X06 */
 8003a74:	f7ff fb46 	bl	8003104 <lcd_rd_data>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <lcd_init+0x2dc>)
 8003a7e:	889b      	ldrh	r3, [r3, #4]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	4b25      	ldr	r3, [pc, #148]	; (8003b1c <lcd_init+0x2dc>)
 8003a86:	809a      	strh	r2, [r3, #4]

                        if (lcddev.id != 0x9806)    /* Not ILI9806 either, try to see if it's SSD1963 */
 8003a88:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <lcd_init+0x2dc>)
 8003a8a:	889b      	ldrh	r3, [r3, #4]
 8003a8c:	f649 0206 	movw	r2, #38918	; 0x9806
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d028      	beq.n	8003ae6 <lcd_init+0x2a6>
                        {
                            lcd_wr_regno(0xA1);
 8003a94:	20a1      	movs	r0, #161	; 0xa1
 8003a96:	f7ff fb0b 	bl	80030b0 <lcd_wr_regno>
                            lcddev.id = lcd_rd_data();
 8003a9a:	f7ff fb33 	bl	8003104 <lcd_rd_data>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <lcd_init+0x2dc>)
 8003aa4:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* Read back 0x57 */
 8003aa6:	f7ff fb2d 	bl	8003104 <lcd_rd_data>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <lcd_init+0x2dc>)
 8003ab0:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8003ab2:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <lcd_init+0x2dc>)
 8003ab4:	889b      	ldrh	r3, [r3, #4]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <lcd_init+0x2dc>)
 8003abc:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* Read back 0x61 */
 8003abe:	f7ff fb21 	bl	8003104 <lcd_rd_data>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <lcd_init+0x2dc>)
 8003ac8:	889b      	ldrh	r3, [r3, #4]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <lcd_init+0x2dc>)
 8003ad0:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* The ID read back by SSD1963 is 5761H, which we force to be 1963 for convenience */
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <lcd_init+0x2dc>)
 8003ad4:	889b      	ldrh	r3, [r3, #4]
 8003ad6:	f245 7261 	movw	r2, #22369	; 0x5761
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d103      	bne.n	8003ae6 <lcd_init+0x2a6>
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <lcd_init+0x2dc>)
 8003ae0:	f641 1263 	movw	r2, #6499	; 0x1963
 8003ae4:	809a      	strh	r2, [r3, #4]
                }
            }
        }
    }

    if (lcddev.id == 0X7789)
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <lcd_init+0x2dc>)
 8003ae8:	889b      	ldrh	r3, [r3, #4]
 8003aea:	f247 7289 	movw	r2, #30601	; 0x7789
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d102      	bne.n	8003af8 <lcd_init+0x2b8>
    {
        lcd_ex_st7789_reginit();    /* Perform ST7789 initialization */
 8003af2:	f7fc fe9f 	bl	8000834 <lcd_ex_st7789_reginit>
 8003af6:	e039      	b.n	8003b6c <lcd_init+0x32c>
    }
    else if (lcddev.id == 0X9341)
 8003af8:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <lcd_init+0x2dc>)
 8003afa:	889b      	ldrh	r3, [r3, #4]
 8003afc:	f249 3241 	movw	r2, #37697	; 0x9341
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d102      	bne.n	8003b0a <lcd_init+0x2ca>
    {
        lcd_ex_ili9341_reginit();   /* Perform ILI9341 initialization */
 8003b04:	f7fc ff6c 	bl	80009e0 <lcd_ex_ili9341_reginit>
 8003b08:	e030      	b.n	8003b6c <lcd_init+0x32c>
    }
    else if (lcddev.id == 0x5310)
 8003b0a:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <lcd_init+0x2dc>)
 8003b0c:	889b      	ldrh	r3, [r3, #4]
 8003b0e:	f245 3210 	movw	r2, #21264	; 0x5310
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d104      	bne.n	8003b20 <lcd_init+0x2e0>
    {
        lcd_ex_nt35310_reginit();   /* Perform NT35310 initialization */
 8003b16:	f7fd f87b 	bl	8000c10 <lcd_ex_nt35310_reginit>
 8003b1a:	e027      	b.n	8003b6c <lcd_init+0x32c>
 8003b1c:	20000088 	.word	0x20000088
    }
    else if (lcddev.id == 0x7796)
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <lcd_init+0x348>)
 8003b22:	889b      	ldrh	r3, [r3, #4]
 8003b24:	f247 7296 	movw	r2, #30614	; 0x7796
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d102      	bne.n	8003b32 <lcd_init+0x2f2>
    {
        lcd_ex_st7796_reginit();    /* Perform ST7796 initialization */
 8003b2c:	f7fd ffeb 	bl	8001b06 <lcd_ex_st7796_reginit>
 8003b30:	e01c      	b.n	8003b6c <lcd_init+0x32c>
    }
    else if (lcddev.id == 0x5510)
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <lcd_init+0x348>)
 8003b34:	889b      	ldrh	r3, [r3, #4]
 8003b36:	f245 5210 	movw	r2, #21776	; 0x5510
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d102      	bne.n	8003b44 <lcd_init+0x304>
    {
        lcd_ex_nt35510_reginit();   /* Perform NT35510 initialization */
 8003b3e:	f7fe f8c7 	bl	8001cd0 <lcd_ex_nt35510_reginit>
 8003b42:	e013      	b.n	8003b6c <lcd_init+0x32c>
    }
    else if (lcddev.id == 0x9806)
 8003b44:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <lcd_init+0x348>)
 8003b46:	889b      	ldrh	r3, [r3, #4]
 8003b48:	f649 0206 	movw	r2, #38918	; 0x9806
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d102      	bne.n	8003b56 <lcd_init+0x316>
    {
        lcd_ex_ili9806_reginit();   /* Perform ILI9806 initialization */
 8003b50:	f7ff f83e 	bl	8002bd0 <lcd_ex_ili9806_reginit>
 8003b54:	e00a      	b.n	8003b6c <lcd_init+0x32c>
    }
    else if (lcddev.id == 0x1963)
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <lcd_init+0x348>)
 8003b58:	889b      	ldrh	r3, [r3, #4]
 8003b5a:	f641 1263 	movw	r2, #6499	; 0x1963
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d104      	bne.n	8003b6c <lcd_init+0x32c>
    {
        lcd_ex_ssd1963_reginit();   /* Perform SSD1963 initialization */
 8003b62:	f7ff f9d7 	bl	8002f14 <lcd_ex_ssd1963_reginit>
        lcd_ssd_backlight_set(100); /* The backlight is set to its brightest */
 8003b66:	2064      	movs	r0, #100	; 0x64
 8003b68:	f7ff fd5e 	bl	8003628 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Portrait is the default */
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f7ff fd8f 	bl	8003690 <lcd_display_dir>
    LCD_BL(1);          /* Light up the backlight */
 8003b72:	2201      	movs	r2, #1
 8003b74:	2120      	movs	r1, #32
 8003b76:	4805      	ldr	r0, [pc, #20]	; (8003b8c <lcd_init+0x34c>)
 8003b78:	f001 fa78 	bl	800506c <HAL_GPIO_WritePin>
    lcd_clear(WHITE);
 8003b7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003b80:	f000 f806 	bl	8003b90 <lcd_clear>
}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000088 	.word	0x20000088
 8003b8c:	40010c00 	.word	0x40010c00

08003b90 <lcd_clear>:
 * @brief   Screen clearing function
 * @param   color : To clear the screen color
 * @retval  None.
 */
void lcd_clear(uint16_t color)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]

    totalpoint = lcddev.width * lcddev.height;    /* Get the total points */
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <lcd_clear+0x54>)
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <lcd_clear+0x54>)
 8003baa:	885b      	ldrh	r3, [r3, #2]
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	60bb      	str	r3, [r7, #8]
    lcd_set_cursor(0x00, 0x0000);   /* Sets the cursor position */
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f7ff fac3 	bl	8003140 <lcd_set_cursor>
    lcd_write_ram_prepare();        /* Start writing GRAM */
 8003bba:	f7ff fab3 	bl	8003124 <lcd_write_ram_prepare>

    for (index = 0; index < totalpoint; index++)
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e005      	b.n	8003bd0 <lcd_clear+0x40>
    {
        LCD->LCD_RAM = color;
 8003bc4:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <lcd_clear+0x58>)
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d3f5      	bcc.n	8003bc4 <lcd_clear+0x34>
   }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000088 	.word	0x20000088
 8003be8:	600ffffe 	.word	0x600ffffe

08003bec <lcd_show_char>:
 * @param   mode  : Overlay mode (1); Non-superposition (0);
 * @param   color : The color of the character;
 * @retval  None.
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	80fb      	strh	r3, [r7, #6]
 8003bfe:	4603      	mov	r3, r0
 8003c00:	80bb      	strh	r3, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	70fb      	strb	r3, [r7, #3]
 8003c06:	4613      	mov	r3, r2
 8003c08:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8003c0a:	88bb      	ldrh	r3, [r7, #4]
 8003c0c:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]

    csize = ((size >> 3) + (((size & 0x7) != 0) ? 1 : 0)) * (size >> 1); /* Get the number of bytes of a font character corresponding to the dot matrix set */
 8003c16:	78bb      	ldrb	r3, [r7, #2]
 8003c18:	08db      	lsrs	r3, r3, #3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	78bb      	ldrb	r3, [r7, #2]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	78ba      	ldrb	r2, [r7, #2]
 8003c34:	0852      	lsrs	r2, r2, #1
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
 8003c3c:	737b      	strb	r3, [r7, #13]
    chr -= ' ';    /* Get the offset value (ASCII fonts start modulo Spaces, so - "is the font for the corresponding character) */
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	3b20      	subs	r3, #32
 8003c42:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8003c44:	78bb      	ldrb	r3, [r7, #2]
 8003c46:	3b0c      	subs	r3, #12
 8003c48:	2b14      	cmp	r3, #20
 8003c4a:	f200 809a 	bhi.w	8003d82 <lcd_show_char+0x196>
 8003c4e:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <lcd_show_char+0x68>)
 8003c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003d83 	.word	0x08003d83
 8003c5c:	08003d83 	.word	0x08003d83
 8003c60:	08003d83 	.word	0x08003d83
 8003c64:	08003cbb 	.word	0x08003cbb
 8003c68:	08003d83 	.word	0x08003d83
 8003c6c:	08003d83 	.word	0x08003d83
 8003c70:	08003d83 	.word	0x08003d83
 8003c74:	08003d83 	.word	0x08003d83
 8003c78:	08003d83 	.word	0x08003d83
 8003c7c:	08003d83 	.word	0x08003d83
 8003c80:	08003d83 	.word	0x08003d83
 8003c84:	08003cc7 	.word	0x08003cc7
 8003c88:	08003d83 	.word	0x08003d83
 8003c8c:	08003d83 	.word	0x08003d83
 8003c90:	08003d83 	.word	0x08003d83
 8003c94:	08003d83 	.word	0x08003d83
 8003c98:	08003d83 	.word	0x08003d83
 8003c9c:	08003d83 	.word	0x08003d83
 8003ca0:	08003d83 	.word	0x08003d83
 8003ca4:	08003cd9 	.word	0x08003cd9
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[(uint8_t)chr];  /* Call 1206 font */
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	4613      	mov	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4a37      	ldr	r2, [pc, #220]	; (8003d90 <lcd_show_char+0x1a4>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
            break;
 8003cb8:	e014      	b.n	8003ce4 <lcd_show_char+0xf8>

        case 16:
            pfont = (uint8_t *)asc2_1608[(uint8_t)chr];  /* Call 1608 font */
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	4a35      	ldr	r2, [pc, #212]	; (8003d94 <lcd_show_char+0x1a8>)
 8003cc0:	4413      	add	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
            break;
 8003cc4:	e00e      	b.n	8003ce4 <lcd_show_char+0xf8>

        case 24:
            pfont = (uint8_t *)asc2_2412[(uint8_t)chr];  /* Call 2412 font */
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4a31      	ldr	r2, [pc, #196]	; (8003d98 <lcd_show_char+0x1ac>)
 8003cd2:	4413      	add	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
            break;
 8003cd6:	e005      	b.n	8003ce4 <lcd_show_char+0xf8>

        case 32:
            pfont = (uint8_t *)asc2_3216[(uint8_t)chr];  /* Call 3216 font */
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	019b      	lsls	r3, r3, #6
 8003cdc:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <lcd_show_char+0x1b0>)
 8003cde:	4413      	add	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
            break;
 8003ce2:	bf00      	nop

        default:
            return ;
    }

    y0 = y;
 8003ce4:	88bb      	ldrh	r3, [r7, #4]
 8003ce6:	81fb      	strh	r3, [r7, #14]
    for (t = 0; t < csize; t++)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	757b      	strb	r3, [r7, #21]
 8003cec:	e044      	b.n	8003d78 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* Retrieves the dot matrix data of the character */
 8003cee:	7d7b      	ldrb	r3, [r7, #21]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75bb      	strb	r3, [r7, #22]
 8003cfc:	e034      	b.n	8003d68 <lcd_show_char+0x17c>
        {
            if ((temp & 0x80) != 0)        /* Valid points, need to be displayed */
 8003cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da06      	bge.n	8003d14 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* Let me draw the dot, let me show the dot */
 8003d06:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003d08:	88b9      	ldrh	r1, [r7, #4]
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fc6f 	bl	80035f0 <lcd_draw_point>
 8003d12:	e00a      	b.n	8003d2a <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* Invalid point, not shown */
 8003d14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d106      	bne.n	8003d2a <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* Drawing the background color is equivalent to not showing the point (note that the background color is controlled by a global variable). */
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <lcd_show_char+0x1b4>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	88b9      	ldrh	r1, [r7, #4]
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fc63 	bl	80035f0 <lcd_draw_point>
            }

            temp <<= 1; /* Shift in order to get the state of the next bit */
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
            y++;
 8003d30:	88bb      	ldrh	r3, [r7, #4]
 8003d32:	3301      	adds	r3, #1
 8003d34:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* Hyper region */
 8003d36:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <lcd_show_char+0x1b8>)
 8003d38:	885b      	ldrh	r3, [r3, #2]
 8003d3a:	88ba      	ldrh	r2, [r7, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d222      	bcs.n	8003d86 <lcd_show_char+0x19a>

            if ((y - y0) == size)
 8003d40:	88ba      	ldrh	r2, [r7, #4]
 8003d42:	89fb      	ldrh	r3, [r7, #14]
 8003d44:	1ad2      	subs	r2, r2, r3
 8003d46:	78bb      	ldrb	r3, [r7, #2]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d10a      	bne.n	8003d62 <lcd_show_char+0x176>
            {
                y = y0;          /* y coordinate reset */
 8003d4c:	89fb      	ldrh	r3, [r7, #14]
 8003d4e:	80bb      	strh	r3, [r7, #4]
                x++;             /* The x-coordinate is increasing */
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	3301      	adds	r3, #1
 8003d54:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)
 8003d56:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <lcd_show_char+0x1b8>)
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	88fa      	ldrh	r2, [r7, #6]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d307      	bcc.n	8003d70 <lcd_show_char+0x184>
                {
                    return;     /* The x-coordinate hyperregion */
 8003d60:	e012      	b.n	8003d88 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 8003d62:	7dbb      	ldrb	r3, [r7, #22]
 8003d64:	3301      	adds	r3, #1
 8003d66:	75bb      	strb	r3, [r7, #22]
 8003d68:	7dbb      	ldrb	r3, [r7, #22]
 8003d6a:	2b07      	cmp	r3, #7
 8003d6c:	d9c7      	bls.n	8003cfe <lcd_show_char+0x112>
 8003d6e:	e000      	b.n	8003d72 <lcd_show_char+0x186>
                }

                break;
 8003d70:	bf00      	nop
    for (t = 0; t < csize; t++)
 8003d72:	7d7b      	ldrb	r3, [r7, #21]
 8003d74:	3301      	adds	r3, #1
 8003d76:	757b      	strb	r3, [r7, #21]
 8003d78:	7d7a      	ldrb	r2, [r7, #21]
 8003d7a:	7b7b      	ldrb	r3, [r7, #13]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d3b6      	bcc.n	8003cee <lcd_show_char+0x102>
 8003d80:	e002      	b.n	8003d88 <lcd_show_char+0x19c>
            return ;
 8003d82:	bf00      	nop
 8003d84:	e000      	b.n	8003d88 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* Hyper region */
 8003d86:	bf00      	nop
            }
        }
    }
}
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	0800797c 	.word	0x0800797c
 8003d94:	08007df0 	.word	0x08007df0
 8003d98:	080083e0 	.word	0x080083e0
 8003d9c:	0800913c 	.word	0x0800913c
 8003da0:	20000000 	.word	0x20000000
 8003da4:	20000088 	.word	0x20000088

08003da8 <lcd_show_string>:
 * @param   p            : The first address of the string
 * @param   color        : The color of the string;
 * @retval  None
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	4604      	mov	r4, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	461a      	mov	r2, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	80fb      	strh	r3, [r7, #6]
 8003dba:	4603      	mov	r3, r0
 8003dbc:	80bb      	strh	r3, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	807b      	strh	r3, [r7, #2]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	73fb      	strb	r3, [r7, #15]
    width += x;
 8003dca:	887a      	ldrh	r2, [r7, #2]
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	4413      	add	r3, r2
 8003dd0:	807b      	strh	r3, [r7, #2]
    height += y;
 8003dd2:	883a      	ldrh	r2, [r7, #0]
 8003dd4:	88bb      	ldrh	r3, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 8003dda:	e027      	b.n	8003e2c <lcd_show_string+0x84>
    {
        if (x >= width)
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d307      	bcc.n	8003df4 <lcd_show_string+0x4c>
        {
            x = x0;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	80fb      	strh	r3, [r7, #6]
            y += size;
 8003de8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	88bb      	ldrh	r3, [r7, #4]
 8003df0:	4413      	add	r3, r2
 8003df2:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* quit */
 8003df4:	88ba      	ldrh	r2, [r7, #4]
 8003df6:	883b      	ldrh	r3, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d220      	bcs.n	8003e3e <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	f897 4020 	ldrb.w	r4, [r7, #32]
 8003e04:	88b9      	ldrh	r1, [r7, #4]
 8003e06:	88f8      	ldrh	r0, [r7, #6]
 8003e08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	4623      	mov	r3, r4
 8003e12:	f7ff feeb 	bl	8003bec <lcd_show_char>
        x += size / 2;
 8003e16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	4413      	add	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
        p++;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	3301      	adds	r3, #1
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b7e      	cmp	r3, #126	; 0x7e
 8003e32:	d805      	bhi.n	8003e40 <lcd_show_string+0x98>
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b1f      	cmp	r3, #31
 8003e3a:	d8cf      	bhi.n	8003ddc <lcd_show_string+0x34>
    }
}
 8003e3c:	e000      	b.n	8003e40 <lcd_show_string+0x98>
        if (y >= height)break;  /* quit */
 8003e3e:	bf00      	nop
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd90      	pop	{r4, r7, pc}

08003e48 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08e      	sub	sp, #56	; 0x38
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003e4e:	f107 031c 	add.w	r3, r7, #28
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	611a      	str	r2, [r3, #16]
 8003e5e:	615a      	str	r2, [r3, #20]
 8003e60:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8003e62:	463b      	mov	r3, r7
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	611a      	str	r2, [r3, #16]
 8003e70:	615a      	str	r2, [r3, #20]
 8003e72:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003e76:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003e7a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003e7c:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003e7e:	4a2f      	ldr	r2, [pc, #188]	; (8003f3c <MX_FSMC_Init+0xf4>)
 8003e80:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003e82:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003e8e:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003e96:	2210      	movs	r2, #16
 8003e98:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003e9a:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003eac:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003eb2:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003eba:	4b1f      	ldr	r3, [pc, #124]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003ece:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8003ed8:	230f      	movs	r3, #15
 8003eda:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 8003edc:	230f      	movs	r3, #15
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8003ee0:	230f      	movs	r3, #15
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8003ee8:	2311      	movs	r3, #17
 8003eea:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003eec:	2300      	movs	r3, #0
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8003ef4:	230f      	movs	r3, #15
 8003ef6:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 1;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8003efc:	230f      	movs	r3, #15
 8003efe:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8003f00:	2310      	movs	r3, #16
 8003f02:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8003f04:	2311      	movs	r3, #17
 8003f06:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8003f0c:	463a      	mov	r2, r7
 8003f0e:	f107 031c 	add.w	r3, r7, #28
 8003f12:	4619      	mov	r1, r3
 8003f14:	4808      	ldr	r0, [pc, #32]	; (8003f38 <MX_FSMC_Init+0xf0>)
 8003f16:	f001 fceb 	bl	80058f0 <HAL_SRAM_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8003f20:	f000 fa13 	bl	800434a <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <MX_FSMC_Init+0xf8>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	4a05      	ldr	r2, [pc, #20]	; (8003f40 <MX_FSMC_Init+0xf8>)
 8003f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f2e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003f30:	bf00      	nop
 8003f32:	3738      	adds	r7, #56	; 0x38
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000098 	.word	0x20000098
 8003f3c:	a0000104 	.word	0xa0000104
 8003f40:	40010000 	.word	0x40010000

08003f44 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4a:	f107 0308 	add.w	r3, r7, #8
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	609a      	str	r2, [r3, #8]
 8003f56:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8003f58:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <HAL_FSMC_MspInit+0x78>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d129      	bne.n	8003fb4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8003f60:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <HAL_FSMC_MspInit+0x78>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003f66:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <HAL_FSMC_MspInit+0x7c>)
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <HAL_FSMC_MspInit+0x7c>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	6153      	str	r3, [r2, #20]
 8003f72:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <HAL_FSMC_MspInit+0x7c>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	607b      	str	r3, [r7, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8003f7e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8003f82:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	2302      	movs	r3, #2
 8003f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f8c:	f107 0308 	add.w	r3, r7, #8
 8003f90:	4619      	mov	r1, r3
 8003f92:	480c      	ldr	r0, [pc, #48]	; (8003fc4 <HAL_FSMC_MspInit+0x80>)
 8003f94:	f000 fed6 	bl	8004d44 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003f98:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003f9c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	4619      	mov	r1, r3
 8003fac:	4806      	ldr	r0, [pc, #24]	; (8003fc8 <HAL_FSMC_MspInit+0x84>)
 8003fae:	f000 fec9 	bl	8004d44 <HAL_GPIO_Init>
 8003fb2:	e000      	b.n	8003fb6 <HAL_FSMC_MspInit+0x72>
    return;
 8003fb4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	200000e0 	.word	0x200000e0
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40011800 	.word	0x40011800
 8003fc8:	40011400 	.word	0x40011400

08003fcc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003fd4:	f7ff ffb6 	bl	8003f44 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe6:	f107 0318 	add.w	r3, r7, #24
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ff4:	4b39      	ldr	r3, [pc, #228]	; (80040dc <MX_GPIO_Init+0xfc>)
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	4a38      	ldr	r2, [pc, #224]	; (80040dc <MX_GPIO_Init+0xfc>)
 8003ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ffe:	6193      	str	r3, [r2, #24]
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <MX_GPIO_Init+0xfc>)
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800400c:	4b33      	ldr	r3, [pc, #204]	; (80040dc <MX_GPIO_Init+0xfc>)
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	4a32      	ldr	r2, [pc, #200]	; (80040dc <MX_GPIO_Init+0xfc>)
 8004012:	f043 0310 	orr.w	r3, r3, #16
 8004016:	6193      	str	r3, [r2, #24]
 8004018:	4b30      	ldr	r3, [pc, #192]	; (80040dc <MX_GPIO_Init+0xfc>)
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <MX_GPIO_Init+0xfc>)
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	4a2c      	ldr	r2, [pc, #176]	; (80040dc <MX_GPIO_Init+0xfc>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6193      	str	r3, [r2, #24]
 8004030:	4b2a      	ldr	r3, [pc, #168]	; (80040dc <MX_GPIO_Init+0xfc>)
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800403c:	4b27      	ldr	r3, [pc, #156]	; (80040dc <MX_GPIO_Init+0xfc>)
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4a26      	ldr	r2, [pc, #152]	; (80040dc <MX_GPIO_Init+0xfc>)
 8004042:	f043 0320 	orr.w	r3, r3, #32
 8004046:	6193      	str	r3, [r2, #24]
 8004048:	4b24      	ldr	r3, [pc, #144]	; (80040dc <MX_GPIO_Init+0xfc>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004054:	4b21      	ldr	r3, [pc, #132]	; (80040dc <MX_GPIO_Init+0xfc>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	4a20      	ldr	r2, [pc, #128]	; (80040dc <MX_GPIO_Init+0xfc>)
 800405a:	f043 0308 	orr.w	r3, r3, #8
 800405e:	6193      	str	r3, [r2, #24]
 8004060:	4b1e      	ldr	r3, [pc, #120]	; (80040dc <MX_GPIO_Init+0xfc>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 800406c:	2201      	movs	r2, #1
 800406e:	2160      	movs	r1, #96	; 0x60
 8004070:	481b      	ldr	r0, [pc, #108]	; (80040e0 <MX_GPIO_Init+0x100>)
 8004072:	f000 fffb 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8004076:	2201      	movs	r2, #1
 8004078:	2120      	movs	r1, #32
 800407a:	481a      	ldr	r0, [pc, #104]	; (80040e4 <MX_GPIO_Init+0x104>)
 800407c:	f000 fff6 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8004080:	2360      	movs	r3, #96	; 0x60
 8004082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004084:	2301      	movs	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004088:	2301      	movs	r3, #1
 800408a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800408c:	2303      	movs	r3, #3
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004090:	f107 0318 	add.w	r3, r7, #24
 8004094:	4619      	mov	r1, r3
 8004096:	4812      	ldr	r0, [pc, #72]	; (80040e0 <MX_GPIO_Init+0x100>)
 8004098:	f000 fe54 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WK_UP_Pin|KEY0_Pin;
 800409c:	f248 0301 	movw	r3, #32769	; 0x8001
 80040a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040a6:	2302      	movs	r3, #2
 80040a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040aa:	f107 0318 	add.w	r3, r7, #24
 80040ae:	4619      	mov	r1, r3
 80040b0:	480d      	ldr	r0, [pc, #52]	; (80040e8 <MX_GPIO_Init+0x108>)
 80040b2:	f000 fe47 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80040b6:	2320      	movs	r3, #32
 80040b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ba:	2301      	movs	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040be:	2301      	movs	r3, #1
 80040c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040c2:	2303      	movs	r3, #3
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80040c6:	f107 0318 	add.w	r3, r7, #24
 80040ca:	4619      	mov	r1, r3
 80040cc:	4805      	ldr	r0, [pc, #20]	; (80040e4 <MX_GPIO_Init+0x104>)
 80040ce:	f000 fe39 	bl	8004d44 <HAL_GPIO_Init>

}
 80040d2:	bf00      	nop
 80040d4:	3728      	adds	r7, #40	; 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40011800 	.word	0x40011800
 80040e4:	40010c00 	.word	0x40010c00
 80040e8:	40010800 	.word	0x40010800

080040ec <stm32f103ve_show_mesg>:
 * @brief   Displays information about the experiment
 * @param   None
 * @retval  None
 */
void stm32f103ve_show_mesg(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
	/* The serial port outputs the experimental information */
	printf("\n");
 80040f0:	200a      	movs	r0, #10
 80040f2:	f002 fc5b 	bl	80069ac <putchar>
	printf("********************************\r\n");
 80040f6:	480a      	ldr	r0, [pc, #40]	; (8004120 <stm32f103ve_show_mesg+0x34>)
 80040f8:	f002 fcb4 	bl	8006a64 <puts>
	printf("STM32F103\r\n");
 80040fc:	4809      	ldr	r0, [pc, #36]	; (8004124 <stm32f103ve_show_mesg+0x38>)
 80040fe:	f002 fcb1 	bl	8006a64 <puts>
	printf("TFTLCD_MCU Test\r\n");
 8004102:	4809      	ldr	r0, [pc, #36]	; (8004128 <stm32f103ve_show_mesg+0x3c>)
 8004104:	f002 fcae 	bl	8006a64 <puts>
	printf("ATOM@ALIENTEK\r\n");
 8004108:	4808      	ldr	r0, [pc, #32]	; (800412c <stm32f103ve_show_mesg+0x40>)
 800410a:	f002 fcab 	bl	8006a64 <puts>
	printf("********************************\r\n");
 800410e:	4804      	ldr	r0, [pc, #16]	; (8004120 <stm32f103ve_show_mesg+0x34>)
 8004110:	f002 fca8 	bl	8006a64 <puts>
	printf("\r\n");
 8004114:	4806      	ldr	r0, [pc, #24]	; (8004130 <stm32f103ve_show_mesg+0x44>)
 8004116:	f002 fca5 	bl	8006a64 <puts>
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	080078f4 	.word	0x080078f4
 8004124:	08007918 	.word	0x08007918
 8004128:	08007924 	.word	0x08007924
 800412c:	08007938 	.word	0x08007938
 8004130:	08007948 	.word	0x08007948

08004134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint8_t x = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800413e:	f000 fb2b 	bl	8004798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004142:	f000 f8bd 	bl	80042c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004146:	f7ff ff4b 	bl	8003fe0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800414a:	f000 fa21 	bl	8004590 <MX_USART1_UART_Init>
  MX_FSMC_Init();
 800414e:	f7ff fe7b 	bl	8003e48 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();                                         /* Initialize LCD */
 8004152:	f7ff fb75 	bl	8003840 <lcd_init>
  stm32f103ve_show_mesg();
 8004156:	f7ff ffc9 	bl	80040ec <stm32f103ve_show_mesg>
  sprintf((char *)lcd_id, "LCD ID:%04X", lcddev.id);  /* Print the LCD ID to the lcd id array */
 800415a:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <main+0x174>)
 800415c:	889b      	ldrh	r3, [r3, #4]
 800415e:	461a      	mov	r2, r3
 8004160:	463b      	mov	r3, r7
 8004162:	4952      	ldr	r1, [pc, #328]	; (80042ac <main+0x178>)
 8004164:	4618      	mov	r0, r3
 8004166:	f002 fc85 	bl	8006a74 <siprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (x)
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b0b      	cmp	r3, #11
 800416e:	d855      	bhi.n	800421c <main+0xe8>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <main+0x44>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	080041a9 	.word	0x080041a9
 800417c:	080041b3 	.word	0x080041b3
 8004180:	080041bb 	.word	0x080041bb
 8004184:	080041c3 	.word	0x080041c3
 8004188:	080041cd 	.word	0x080041cd
 800418c:	080041d7 	.word	0x080041d7
 8004190:	080041e1 	.word	0x080041e1
 8004194:	080041eb 	.word	0x080041eb
 8004198:	080041f5 	.word	0x080041f5
 800419c:	080041ff 	.word	0x080041ff
 80041a0:	08004209 	.word	0x08004209
 80041a4:	08004213 	.word	0x08004213
	  {
	  case 0:
		  lcd_clear(WHITE);
 80041a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80041ac:	f7ff fcf0 	bl	8003b90 <lcd_clear>
		  break;
 80041b0:	e034      	b.n	800421c <main+0xe8>

	  case 1:
		  lcd_clear(BLACK);
 80041b2:	2000      	movs	r0, #0
 80041b4:	f7ff fcec 	bl	8003b90 <lcd_clear>
		  break;
 80041b8:	e030      	b.n	800421c <main+0xe8>

	  case 2:
		  lcd_clear(BLUE);
 80041ba:	201f      	movs	r0, #31
 80041bc:	f7ff fce8 	bl	8003b90 <lcd_clear>
		  break;
 80041c0:	e02c      	b.n	800421c <main+0xe8>

	  case 3:
		  lcd_clear(RED);
 80041c2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80041c6:	f7ff fce3 	bl	8003b90 <lcd_clear>
		  break;
 80041ca:	e027      	b.n	800421c <main+0xe8>

	  case 4:
		  lcd_clear(MAGENTA);
 80041cc:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80041d0:	f7ff fcde 	bl	8003b90 <lcd_clear>
		  break;
 80041d4:	e022      	b.n	800421c <main+0xe8>

	  case 5:
		  lcd_clear(GREEN);
 80041d6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80041da:	f7ff fcd9 	bl	8003b90 <lcd_clear>
		  break;
 80041de:	e01d      	b.n	800421c <main+0xe8>

	  case 6:
		  lcd_clear(CYAN);
 80041e0:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80041e4:	f7ff fcd4 	bl	8003b90 <lcd_clear>
		  break;
 80041e8:	e018      	b.n	800421c <main+0xe8>

	  case 7:
		  lcd_clear(YELLOW);
 80041ea:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80041ee:	f7ff fccf 	bl	8003b90 <lcd_clear>
		  break;
 80041f2:	e013      	b.n	800421c <main+0xe8>

	  case 8:
		  lcd_clear(BRRED);
 80041f4:	f64f 4007 	movw	r0, #64519	; 0xfc07
 80041f8:	f7ff fcca 	bl	8003b90 <lcd_clear>
		  break;
 80041fc:	e00e      	b.n	800421c <main+0xe8>

	  case 9:
		  lcd_clear(GRAY);
 80041fe:	f248 4030 	movw	r0, #33840	; 0x8430
 8004202:	f7ff fcc5 	bl	8003b90 <lcd_clear>
		  break;
 8004206:	e009      	b.n	800421c <main+0xe8>

	  case 10:
		  lcd_clear(LGRAY);
 8004208:	f24c 6018 	movw	r0, #50712	; 0xc618
 800420c:	f7ff fcc0 	bl	8003b90 <lcd_clear>
		  break;
 8004210:	e004      	b.n	800421c <main+0xe8>

	  case 11:
		  lcd_clear(BROWN);
 8004212:	f64b 4040 	movw	r0, #48192	; 0xbc40
 8004216:	f7ff fcbb 	bl	8003b90 <lcd_clear>
		  break;
 800421a:	bf00      	nop
	  }

	  lcd_show_string(10, 40, 240, 32, 32, "STM32", RED);
 800421c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004220:	9302      	str	r3, [sp, #8]
 8004222:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <main+0x17c>)
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	2320      	movs	r3, #32
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2320      	movs	r3, #32
 800422c:	22f0      	movs	r2, #240	; 0xf0
 800422e:	2128      	movs	r1, #40	; 0x28
 8004230:	200a      	movs	r0, #10
 8004232:	f7ff fdb9 	bl	8003da8 <lcd_show_string>
	  lcd_show_string(10, 80, 240, 24, 24, "TFTLCD TEST", RED);
 8004236:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800423a:	9302      	str	r3, [sp, #8]
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <main+0x180>)
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	2318      	movs	r3, #24
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2318      	movs	r3, #24
 8004246:	22f0      	movs	r2, #240	; 0xf0
 8004248:	2150      	movs	r1, #80	; 0x50
 800424a:	200a      	movs	r0, #10
 800424c:	f7ff fdac 	bl	8003da8 <lcd_show_string>
	  lcd_show_string(10, 110, 240, 16, 16, "ATOM@ALIENTEK", RED);
 8004250:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004254:	9302      	str	r3, [sp, #8]
 8004256:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <main+0x184>)
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	2310      	movs	r3, #16
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2310      	movs	r3, #16
 8004260:	22f0      	movs	r2, #240	; 0xf0
 8004262:	216e      	movs	r1, #110	; 0x6e
 8004264:	200a      	movs	r0, #10
 8004266:	f7ff fd9f 	bl	8003da8 <lcd_show_string>
	  lcd_show_string(10, 130, 240, 16, 16, (char *)lcd_id, RED); /* Display LCD ID */
 800426a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800426e:	9302      	str	r3, [sp, #8]
 8004270:	463b      	mov	r3, r7
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	2310      	movs	r3, #16
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2310      	movs	r3, #16
 800427a:	22f0      	movs	r2, #240	; 0xf0
 800427c:	2182      	movs	r1, #130	; 0x82
 800427e:	200a      	movs	r0, #10
 8004280:	f7ff fd92 	bl	8003da8 <lcd_show_string>
	  x++;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	3301      	adds	r3, #1
 8004288:	73fb      	strb	r3, [r7, #15]

	  if (x == 12)
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d101      	bne.n	8004294 <main+0x160>
	  {
		  x = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]
	  }

	  LED0_TOGGLE();             /* flashing LED0 indicates that the system is running */
 8004294:	2120      	movs	r1, #32
 8004296:	4809      	ldr	r0, [pc, #36]	; (80042bc <main+0x188>)
 8004298:	f000 ff00 	bl	800509c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);   		 /* delay 1000ms */
 800429c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042a0:	f000 fadc 	bl	800485c <HAL_Delay>
	  switch (x)
 80042a4:	e761      	b.n	800416a <main+0x36>
 80042a6:	bf00      	nop
 80042a8:	20000088 	.word	0x20000088
 80042ac:	0800794c 	.word	0x0800794c
 80042b0:	08007958 	.word	0x08007958
 80042b4:	08007960 	.word	0x08007960
 80042b8:	0800796c 	.word	0x0800796c
 80042bc:	40011800 	.word	0x40011800

080042c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b090      	sub	sp, #64	; 0x40
 80042c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042c6:	f107 0318 	add.w	r3, r7, #24
 80042ca:	2228      	movs	r2, #40	; 0x28
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f002 fcc8 	bl	8006c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80042ec:	2300      	movs	r3, #0
 80042ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042f0:	2301      	movs	r3, #1
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042f4:	2302      	movs	r3, #2
 80042f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80042fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004304:	f107 0318 	add.w	r3, r7, #24
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fee1 	bl	80050d0 <HAL_RCC_OscConfig>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004314:	f000 f819 	bl	800434a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004318:	230f      	movs	r3, #15
 800431a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800431c:	2302      	movs	r3, #2
 800431e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	2102      	movs	r1, #2
 8004332:	4618      	mov	r0, r3
 8004334:	f001 f94e 	bl	80055d4 <HAL_RCC_ClockConfig>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800433e:	f000 f804 	bl	800434a <Error_Handler>
  }
}
 8004342:	bf00      	nop
 8004344:	3740      	adds	r7, #64	; 0x40
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800434a:	b480      	push	{r7}
 800434c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800434e:	b672      	cpsid	i
}
 8004350:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004352:	e7fe      	b.n	8004352 <Error_Handler+0x8>

08004354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800435a:	4b16      	ldr	r3, [pc, #88]	; (80043b4 <HAL_MspInit+0x60>)
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <HAL_MspInit+0x60>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6193      	str	r3, [r2, #24]
 8004366:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_MspInit+0x60>)
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_MspInit+0x60>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <HAL_MspInit+0x60>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437c:	61d3      	str	r3, [r2, #28]
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <HAL_MspInit+0x60>)
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800438a:	2005      	movs	r0, #5
 800438c:	f000 fb56 	bl	8004a3c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_MspInit+0x64>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	4a04      	ldr	r2, [pc, #16]	; (80043b8 <HAL_MspInit+0x64>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40010000 	.word	0x40010000

080043bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043c0:	e7fe      	b.n	80043c0 <NMI_Handler+0x4>

080043c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043c6:	e7fe      	b.n	80043c6 <HardFault_Handler+0x4>

080043c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043cc:	e7fe      	b.n	80043cc <MemManage_Handler+0x4>

080043ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ce:	b480      	push	{r7}
 80043d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043d2:	e7fe      	b.n	80043d2 <BusFault_Handler+0x4>

080043d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043d8:	e7fe      	b.n	80043d8 <UsageFault_Handler+0x4>

080043da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004402:	f000 fa0f 	bl	8004824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004410:	4802      	ldr	r0, [pc, #8]	; (800441c <USART1_IRQHandler+0x10>)
 8004412:	f001 fbb3 	bl	8005b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	200001b8 	.word	0x200001b8

08004420 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e00a      	b.n	8004448 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004432:	f3af 8000 	nop.w
 8004436:	4601      	mov	r1, r0
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	60ba      	str	r2, [r7, #8]
 800443e:	b2ca      	uxtb	r2, r1
 8004440:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	3301      	adds	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	dbf0      	blt.n	8004432 <_read+0x12>
  }

  return len;
 8004450:	687b      	ldr	r3, [r7, #4]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	e009      	b.n	8004480 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	60ba      	str	r2, [r7, #8]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f000 f879 	bl	800456c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	3301      	adds	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	dbf1      	blt.n	800446c <_write+0x12>
  }
  return len;
 8004488:	687b      	ldr	r3, [r7, #4]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <_close>:

int _close(int file)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044b8:	605a      	str	r2, [r3, #4]
  return 0;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <_isatty>:

int _isatty(int file)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044ce:	2301      	movs	r3, #1
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr
	...

080044f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044fc:	4a14      	ldr	r2, [pc, #80]	; (8004550 <_sbrk+0x5c>)
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <_sbrk+0x60>)
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004508:	4b13      	ldr	r3, [pc, #76]	; (8004558 <_sbrk+0x64>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d102      	bne.n	8004516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004510:	4b11      	ldr	r3, [pc, #68]	; (8004558 <_sbrk+0x64>)
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <_sbrk+0x68>)
 8004514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004516:	4b10      	ldr	r3, [pc, #64]	; (8004558 <_sbrk+0x64>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	429a      	cmp	r2, r3
 8004522:	d207      	bcs.n	8004534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004524:	f002 fbec 	bl	8006d00 <__errno>
 8004528:	4603      	mov	r3, r0
 800452a:	220c      	movs	r2, #12
 800452c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	e009      	b.n	8004548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004534:	4b08      	ldr	r3, [pc, #32]	; (8004558 <_sbrk+0x64>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <_sbrk+0x64>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	4a05      	ldr	r2, [pc, #20]	; (8004558 <_sbrk+0x64>)
 8004544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004546:	68fb      	ldr	r3, [r7, #12]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20010000 	.word	0x20010000
 8004554:	00000400 	.word	0x00000400
 8004558:	200000e4 	.word	0x200000e4
 800455c:	20000350 	.word	0x20000350

08004560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8004574:	1d39      	adds	r1, r7, #4
 8004576:	f04f 33ff 	mov.w	r3, #4294967295
 800457a:	2201      	movs	r2, #1
 800457c:	4803      	ldr	r0, [pc, #12]	; (800458c <__io_putchar+0x20>)
 800457e:	f001 fa54 	bl	8005a2a <HAL_UART_Transmit>
	return ch;
 8004582:	687b      	ldr	r3, [r7, #4]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	200001b8 	.word	0x200001b8

08004590 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004594:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <MX_USART1_UART_Init+0x54>)
 8004596:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <MX_USART1_UART_Init+0x58>)
 8004598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <MX_USART1_UART_Init+0x54>)
 800459c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <MX_USART1_UART_Init+0x54>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045a8:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <MX_USART1_UART_Init+0x54>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <MX_USART1_UART_Init+0x54>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <MX_USART1_UART_Init+0x54>)
 80045b6:	220c      	movs	r2, #12
 80045b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ba:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <MX_USART1_UART_Init+0x54>)
 80045bc:	2200      	movs	r2, #0
 80045be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <MX_USART1_UART_Init+0x54>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045c6:	4807      	ldr	r0, [pc, #28]	; (80045e4 <MX_USART1_UART_Init+0x54>)
 80045c8:	f001 f9df 	bl	800598a <HAL_UART_Init>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045d2:	f7ff feba 	bl	800434a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* This function enables the receive interrupt: flag UART_IT_RXNE and sets
   * the receive buffer and the maximum amount of data the receive buffer can receive */
   HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 80045d6:	2201      	movs	r2, #1
 80045d8:	4904      	ldr	r1, [pc, #16]	; (80045ec <MX_USART1_UART_Init+0x5c>)
 80045da:	4802      	ldr	r0, [pc, #8]	; (80045e4 <MX_USART1_UART_Init+0x54>)
 80045dc:	f001 faa8 	bl	8005b30 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 80045e0:	bf00      	nop
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200001b8 	.word	0x200001b8
 80045e8:	40013800 	.word	0x40013800
 80045ec:	200001b4 	.word	0x200001b4

080045f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f8:	f107 0310 	add.w	r3, r7, #16
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	605a      	str	r2, [r3, #4]
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a20      	ldr	r2, [pc, #128]	; (800468c <HAL_UART_MspInit+0x9c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d139      	bne.n	8004684 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004610:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <HAL_UART_MspInit+0xa0>)
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	4a1e      	ldr	r2, [pc, #120]	; (8004690 <HAL_UART_MspInit+0xa0>)
 8004616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800461a:	6193      	str	r3, [r2, #24]
 800461c:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <HAL_UART_MspInit+0xa0>)
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <HAL_UART_MspInit+0xa0>)
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_UART_MspInit+0xa0>)
 800462e:	f043 0304 	orr.w	r3, r3, #4
 8004632:	6193      	str	r3, [r2, #24]
 8004634:	4b16      	ldr	r3, [pc, #88]	; (8004690 <HAL_UART_MspInit+0xa0>)
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004644:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004646:	2302      	movs	r3, #2
 8004648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800464a:	2303      	movs	r3, #3
 800464c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464e:	f107 0310 	add.w	r3, r7, #16
 8004652:	4619      	mov	r1, r3
 8004654:	480f      	ldr	r0, [pc, #60]	; (8004694 <HAL_UART_MspInit+0xa4>)
 8004656:	f000 fb75 	bl	8004d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800465a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004668:	f107 0310 	add.w	r3, r7, #16
 800466c:	4619      	mov	r1, r3
 800466e:	4809      	ldr	r0, [pc, #36]	; (8004694 <HAL_UART_MspInit+0xa4>)
 8004670:	f000 fb68 	bl	8004d44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 2);
 8004674:	2202      	movs	r2, #2
 8004676:	2102      	movs	r1, #2
 8004678:	2025      	movs	r0, #37	; 0x25
 800467a:	f000 f9ea 	bl	8004a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800467e:	2025      	movs	r0, #37	; 0x25
 8004680:	f000 fa03 	bl	8004a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004684:	bf00      	nop
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40013800 	.word	0x40013800
 8004690:	40021000 	.word	0x40021000
 8004694:	40010800 	.word	0x40010800

08004698 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)                      /* if it is serial port USART1 */
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a24      	ldr	r2, [pc, #144]	; (8004738 <HAL_UART_RxCpltCallback+0xa0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d142      	bne.n	8004730 <HAL_UART_RxCpltCallback+0x98>
    {
        if ((g_usart_rx_sta & 0x8000) == 0)             /* receipt not completed */
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b21b      	sxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db38      	blt.n	8004726 <HAL_UART_RxCpltCallback+0x8e>
        {
            if (g_usart_rx_sta & 0x4000)                /* 0x0d has been received (the Enter key). */
 80046b4:	4b21      	ldr	r3, [pc, #132]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d011      	beq.n	80046e4 <HAL_UART_RxCpltCallback+0x4c>
            {
                if (g_rx_buffer[0] != 0x0a)             /* this is not 0x0a (that is, not a newline key) */
 80046c0:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <HAL_UART_RxCpltCallback+0xa8>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b0a      	cmp	r3, #10
 80046c6:	d003      	beq.n	80046d0 <HAL_UART_RxCpltCallback+0x38>
                {
                    g_usart_rx_sta = 0;                 /* receive error,restart */
 80046c8:	4b1c      	ldr	r3, [pc, #112]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	e02a      	b.n	8004726 <HAL_UART_RxCpltCallback+0x8e>
                }
                else                                    /* it gets 0x0a (the newline key) */
                {
                    g_usart_rx_sta |= 0x8000;           /* the reception is complete */
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046dc:	b29a      	uxth	r2, r3
 80046de:	4b17      	ldr	r3, [pc, #92]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 80046e0:	801a      	strh	r2, [r3, #0]
 80046e2:	e020      	b.n	8004726 <HAL_UART_RxCpltCallback+0x8e>
                }
            }
            else                                        /* 0X0d has not been reached yet (the Enter key) */
            {
                if (g_rx_buffer[0] == 0x0d)
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <HAL_UART_RxCpltCallback+0xa8>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b0d      	cmp	r3, #13
 80046ea:	d107      	bne.n	80046fc <HAL_UART_RxCpltCallback+0x64>
                    g_usart_rx_sta |= 0x4000;
 80046ec:	4b13      	ldr	r3, [pc, #76]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	e014      	b.n	8004726 <HAL_UART_RxCpltCallback+0x8e>
                else
                {
                    g_usart_rx_buf[g_usart_rx_sta & 0X3FFF] = g_rx_buffer[0];
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004704:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <HAL_UART_RxCpltCallback+0xa8>)
 8004706:	7811      	ldrb	r1, [r2, #0]
 8004708:	4a0e      	ldr	r2, [pc, #56]	; (8004744 <HAL_UART_RxCpltCallback+0xac>)
 800470a:	54d1      	strb	r1, [r2, r3]
                    g_usart_rx_sta++;
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	3301      	adds	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 8004716:	801a      	strh	r2, [r3, #0]

                    if (g_usart_rx_sta > (USART_REC_LEN - 1))
 8004718:	4b08      	ldr	r3, [pc, #32]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	2bc7      	cmp	r3, #199	; 0xc7
 800471e:	d902      	bls.n	8004726 <HAL_UART_RxCpltCallback+0x8e>
                    {
                        g_usart_rx_sta = 0;             /* receive data error, start receive again */
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_UART_RxCpltCallback+0xa4>)
 8004722:	2200      	movs	r2, #0
 8004724:	801a      	strh	r2, [r3, #0]
                    }
                }
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8004726:	2201      	movs	r2, #1
 8004728:	4905      	ldr	r1, [pc, #20]	; (8004740 <HAL_UART_RxCpltCallback+0xa8>)
 800472a:	4807      	ldr	r0, [pc, #28]	; (8004748 <HAL_UART_RxCpltCallback+0xb0>)
 800472c:	f001 fa00 	bl	8005b30 <HAL_UART_Receive_IT>
    }
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40013800 	.word	0x40013800
 800473c:	200001b0 	.word	0x200001b0
 8004740:	200001b4 	.word	0x200001b4
 8004744:	200000e8 	.word	0x200000e8
 8004748:	200001b8 	.word	0x200001b8

0800474c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800474c:	f7ff ff08 	bl	8004560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004750:	480b      	ldr	r0, [pc, #44]	; (8004780 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004752:	490c      	ldr	r1, [pc, #48]	; (8004784 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004754:	4a0c      	ldr	r2, [pc, #48]	; (8004788 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004758:	e002      	b.n	8004760 <LoopCopyDataInit>

0800475a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800475a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800475c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800475e:	3304      	adds	r3, #4

08004760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004764:	d3f9      	bcc.n	800475a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004766:	4a09      	ldr	r2, [pc, #36]	; (800478c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004768:	4c09      	ldr	r4, [pc, #36]	; (8004790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800476a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800476c:	e001      	b.n	8004772 <LoopFillZerobss>

0800476e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800476e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004770:	3204      	adds	r2, #4

08004772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004774:	d3fb      	bcc.n	800476e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004776:	f002 fac9 	bl	8006d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800477a:	f7ff fcdb 	bl	8004134 <main>
  bx lr
 800477e:	4770      	bx	lr
  ldr r0, =_sdata
 8004780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004784:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8004788:	0800a964 	.word	0x0800a964
  ldr r2, =_sbss
 800478c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8004790:	20000350 	.word	0x20000350

08004794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004794:	e7fe      	b.n	8004794 <ADC1_2_IRQHandler>
	...

08004798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <HAL_Init+0x28>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a07      	ldr	r2, [pc, #28]	; (80047c0 <HAL_Init+0x28>)
 80047a2:	f043 0310 	orr.w	r3, r3, #16
 80047a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047a8:	2003      	movs	r0, #3
 80047aa:	f000 f947 	bl	8004a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047ae:	2000      	movs	r0, #0
 80047b0:	f000 f808 	bl	80047c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047b4:	f7ff fdce 	bl	8004354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40022000 	.word	0x40022000

080047c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047cc:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_InitTick+0x54>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b12      	ldr	r3, [pc, #72]	; (800481c <HAL_InitTick+0x58>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	4619      	mov	r1, r3
 80047d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047da:	fbb3 f3f1 	udiv	r3, r3, r1
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f95f 	bl	8004aa6 <HAL_SYSTICK_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e00e      	b.n	8004810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b0f      	cmp	r3, #15
 80047f6:	d80a      	bhi.n	800480e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047f8:	2200      	movs	r2, #0
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004800:	f000 f927 	bl	8004a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004804:	4a06      	ldr	r2, [pc, #24]	; (8004820 <HAL_InitTick+0x5c>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e000      	b.n	8004810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20000004 	.word	0x20000004
 800481c:	2000000c 	.word	0x2000000c
 8004820:	20000008 	.word	0x20000008

08004824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_IncTick+0x1c>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_IncTick+0x20>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4413      	add	r3, r2
 8004834:	4a03      	ldr	r2, [pc, #12]	; (8004844 <HAL_IncTick+0x20>)
 8004836:	6013      	str	r3, [r2, #0]
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr
 8004840:	2000000c 	.word	0x2000000c
 8004844:	20000200 	.word	0x20000200

08004848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return uwTick;
 800484c:	4b02      	ldr	r3, [pc, #8]	; (8004858 <HAL_GetTick+0x10>)
 800484e:	681b      	ldr	r3, [r3, #0]
}
 8004850:	4618      	mov	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr
 8004858:	20000200 	.word	0x20000200

0800485c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004864:	f7ff fff0 	bl	8004848 <HAL_GetTick>
 8004868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d005      	beq.n	8004882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <HAL_Delay+0x44>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004882:	bf00      	nop
 8004884:	f7ff ffe0 	bl	8004848 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	429a      	cmp	r2, r3
 8004892:	d8f7      	bhi.n	8004884 <HAL_Delay+0x28>
  {
  }
}
 8004894:	bf00      	nop
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	2000000c 	.word	0x2000000c

080048a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <__NVIC_SetPriorityGrouping+0x44>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048c0:	4013      	ands	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048d6:	4a04      	ldr	r2, [pc, #16]	; (80048e8 <__NVIC_SetPriorityGrouping+0x44>)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	60d3      	str	r3, [r2, #12]
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	e000ed00 	.word	0xe000ed00

080048ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <__NVIC_GetPriorityGrouping+0x18>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	f003 0307 	and.w	r3, r3, #7
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004916:	2b00      	cmp	r3, #0
 8004918:	db0b      	blt.n	8004932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	f003 021f 	and.w	r2, r3, #31
 8004920:	4906      	ldr	r1, [pc, #24]	; (800493c <__NVIC_EnableIRQ+0x34>)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	2001      	movs	r0, #1
 800492a:	fa00 f202 	lsl.w	r2, r0, r2
 800492e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	e000e100 	.word	0xe000e100

08004940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800494c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004950:	2b00      	cmp	r3, #0
 8004952:	db0a      	blt.n	800496a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	490c      	ldr	r1, [pc, #48]	; (800498c <__NVIC_SetPriority+0x4c>)
 800495a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495e:	0112      	lsls	r2, r2, #4
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	440b      	add	r3, r1
 8004964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004968:	e00a      	b.n	8004980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	4908      	ldr	r1, [pc, #32]	; (8004990 <__NVIC_SetPriority+0x50>)
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	3b04      	subs	r3, #4
 8004978:	0112      	lsls	r2, r2, #4
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	440b      	add	r3, r1
 800497e:	761a      	strb	r2, [r3, #24]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	e000e100 	.word	0xe000e100
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f1c3 0307 	rsb	r3, r3, #7
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	bf28      	it	cs
 80049b2:	2304      	movcs	r3, #4
 80049b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3304      	adds	r3, #4
 80049ba:	2b06      	cmp	r3, #6
 80049bc:	d902      	bls.n	80049c4 <NVIC_EncodePriority+0x30>
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3b03      	subs	r3, #3
 80049c2:	e000      	b.n	80049c6 <NVIC_EncodePriority+0x32>
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43da      	mvns	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	401a      	ands	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049dc:	f04f 31ff 	mov.w	r1, #4294967295
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	fa01 f303 	lsl.w	r3, r1, r3
 80049e6:	43d9      	mvns	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049ec:	4313      	orrs	r3, r2
         );
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3724      	adds	r7, #36	; 0x24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a08:	d301      	bcc.n	8004a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e00f      	b.n	8004a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a0e:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <SysTick_Config+0x40>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a16:	210f      	movs	r1, #15
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	f7ff ff90 	bl	8004940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <SysTick_Config+0x40>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a26:	4b04      	ldr	r3, [pc, #16]	; (8004a38 <SysTick_Config+0x40>)
 8004a28:	2207      	movs	r2, #7
 8004a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	e000e010 	.word	0xe000e010

08004a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff ff2d 	bl	80048a4 <__NVIC_SetPriorityGrouping>
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	4603      	mov	r3, r0
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a64:	f7ff ff42 	bl	80048ec <__NVIC_GetPriorityGrouping>
 8004a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	6978      	ldr	r0, [r7, #20]
 8004a70:	f7ff ff90 	bl	8004994 <NVIC_EncodePriority>
 8004a74:	4602      	mov	r2, r0
 8004a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff ff5f 	bl	8004940 <__NVIC_SetPriority>
}
 8004a82:	bf00      	nop
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	4603      	mov	r3, r0
 8004a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff ff35 	bl	8004908 <__NVIC_EnableIRQ>
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff ffa2 	bl	80049f8 <SysTick_Config>
 8004ab4:	4603      	mov	r3, r0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d008      	beq.n	8004ae8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e020      	b.n	8004b2a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 020e 	bic.w	r2, r2, #14
 8004af6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b10:	2101      	movs	r1, #1
 8004b12:	fa01 f202 	lsl.w	r2, r1, r2
 8004b16:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d005      	beq.n	8004b58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2204      	movs	r2, #4
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
 8004b56:	e0d6      	b.n	8004d06 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 020e 	bic.w	r2, r2, #14
 8004b66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4b64      	ldr	r3, [pc, #400]	; (8004d10 <HAL_DMA_Abort_IT+0x1dc>)
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d958      	bls.n	8004c36 <HAL_DMA_Abort_IT+0x102>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a62      	ldr	r2, [pc, #392]	; (8004d14 <HAL_DMA_Abort_IT+0x1e0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d04f      	beq.n	8004c2e <HAL_DMA_Abort_IT+0xfa>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a61      	ldr	r2, [pc, #388]	; (8004d18 <HAL_DMA_Abort_IT+0x1e4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d048      	beq.n	8004c2a <HAL_DMA_Abort_IT+0xf6>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a5f      	ldr	r2, [pc, #380]	; (8004d1c <HAL_DMA_Abort_IT+0x1e8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d040      	beq.n	8004c24 <HAL_DMA_Abort_IT+0xf0>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a5e      	ldr	r2, [pc, #376]	; (8004d20 <HAL_DMA_Abort_IT+0x1ec>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d038      	beq.n	8004c1e <HAL_DMA_Abort_IT+0xea>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5c      	ldr	r2, [pc, #368]	; (8004d24 <HAL_DMA_Abort_IT+0x1f0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d030      	beq.n	8004c18 <HAL_DMA_Abort_IT+0xe4>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5b      	ldr	r2, [pc, #364]	; (8004d28 <HAL_DMA_Abort_IT+0x1f4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d028      	beq.n	8004c12 <HAL_DMA_Abort_IT+0xde>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a52      	ldr	r2, [pc, #328]	; (8004d10 <HAL_DMA_Abort_IT+0x1dc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d020      	beq.n	8004c0c <HAL_DMA_Abort_IT+0xd8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a57      	ldr	r2, [pc, #348]	; (8004d2c <HAL_DMA_Abort_IT+0x1f8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d019      	beq.n	8004c08 <HAL_DMA_Abort_IT+0xd4>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a55      	ldr	r2, [pc, #340]	; (8004d30 <HAL_DMA_Abort_IT+0x1fc>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d012      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xd0>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a54      	ldr	r2, [pc, #336]	; (8004d34 <HAL_DMA_Abort_IT+0x200>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00a      	beq.n	8004bfe <HAL_DMA_Abort_IT+0xca>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a52      	ldr	r2, [pc, #328]	; (8004d38 <HAL_DMA_Abort_IT+0x204>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d102      	bne.n	8004bf8 <HAL_DMA_Abort_IT+0xc4>
 8004bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bf6:	e01b      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bfc:	e018      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c02:	e015      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004c04:	2310      	movs	r3, #16
 8004c06:	e013      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e011      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c10:	e00e      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004c12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c16:	e00b      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c1c:	e008      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c22:	e005      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c28:	e002      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004c2a:	2310      	movs	r3, #16
 8004c2c:	e000      	b.n	8004c30 <HAL_DMA_Abort_IT+0xfc>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	4a42      	ldr	r2, [pc, #264]	; (8004d3c <HAL_DMA_Abort_IT+0x208>)
 8004c32:	6053      	str	r3, [r2, #4]
 8004c34:	e057      	b.n	8004ce6 <HAL_DMA_Abort_IT+0x1b2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a36      	ldr	r2, [pc, #216]	; (8004d14 <HAL_DMA_Abort_IT+0x1e0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d04f      	beq.n	8004ce0 <HAL_DMA_Abort_IT+0x1ac>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a34      	ldr	r2, [pc, #208]	; (8004d18 <HAL_DMA_Abort_IT+0x1e4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d048      	beq.n	8004cdc <HAL_DMA_Abort_IT+0x1a8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a33      	ldr	r2, [pc, #204]	; (8004d1c <HAL_DMA_Abort_IT+0x1e8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d040      	beq.n	8004cd6 <HAL_DMA_Abort_IT+0x1a2>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a31      	ldr	r2, [pc, #196]	; (8004d20 <HAL_DMA_Abort_IT+0x1ec>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d038      	beq.n	8004cd0 <HAL_DMA_Abort_IT+0x19c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a30      	ldr	r2, [pc, #192]	; (8004d24 <HAL_DMA_Abort_IT+0x1f0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d030      	beq.n	8004cca <HAL_DMA_Abort_IT+0x196>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2e      	ldr	r2, [pc, #184]	; (8004d28 <HAL_DMA_Abort_IT+0x1f4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d028      	beq.n	8004cc4 <HAL_DMA_Abort_IT+0x190>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <HAL_DMA_Abort_IT+0x1dc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d020      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x18a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2a      	ldr	r2, [pc, #168]	; (8004d2c <HAL_DMA_Abort_IT+0x1f8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d019      	beq.n	8004cba <HAL_DMA_Abort_IT+0x186>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a29      	ldr	r2, [pc, #164]	; (8004d30 <HAL_DMA_Abort_IT+0x1fc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d012      	beq.n	8004cb6 <HAL_DMA_Abort_IT+0x182>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a27      	ldr	r2, [pc, #156]	; (8004d34 <HAL_DMA_Abort_IT+0x200>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00a      	beq.n	8004cb0 <HAL_DMA_Abort_IT+0x17c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a26      	ldr	r2, [pc, #152]	; (8004d38 <HAL_DMA_Abort_IT+0x204>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d102      	bne.n	8004caa <HAL_DMA_Abort_IT+0x176>
 8004ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ca8:	e01b      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cae:	e018      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cb4:	e015      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004cb6:	2310      	movs	r3, #16
 8004cb8:	e013      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e011      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cc2:	e00e      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004cc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cc8:	e00b      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cce:	e008      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cd4:	e005      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cda:	e002      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	e000      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x1ae>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <HAL_DMA_Abort_IT+0x20c>)
 8004ce4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	4798      	blx	r3
    } 
  }
  return status;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40020080 	.word	0x40020080
 8004d14:	40020008 	.word	0x40020008
 8004d18:	4002001c 	.word	0x4002001c
 8004d1c:	40020030 	.word	0x40020030
 8004d20:	40020044 	.word	0x40020044
 8004d24:	40020058 	.word	0x40020058
 8004d28:	4002006c 	.word	0x4002006c
 8004d2c:	40020408 	.word	0x40020408
 8004d30:	4002041c 	.word	0x4002041c
 8004d34:	40020430 	.word	0x40020430
 8004d38:	40020444 	.word	0x40020444
 8004d3c:	40020400 	.word	0x40020400
 8004d40:	40020000 	.word	0x40020000

08004d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b08b      	sub	sp, #44	; 0x2c
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d56:	e179      	b.n	800504c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d58:	2201      	movs	r2, #1
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	f040 8168 	bne.w	8005046 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4a96      	ldr	r2, [pc, #600]	; (8004fd4 <HAL_GPIO_Init+0x290>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d05e      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004d80:	4a94      	ldr	r2, [pc, #592]	; (8004fd4 <HAL_GPIO_Init+0x290>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d875      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004d86:	4a94      	ldr	r2, [pc, #592]	; (8004fd8 <HAL_GPIO_Init+0x294>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d058      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004d8c:	4a92      	ldr	r2, [pc, #584]	; (8004fd8 <HAL_GPIO_Init+0x294>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d86f      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004d92:	4a92      	ldr	r2, [pc, #584]	; (8004fdc <HAL_GPIO_Init+0x298>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d052      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004d98:	4a90      	ldr	r2, [pc, #576]	; (8004fdc <HAL_GPIO_Init+0x298>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d869      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004d9e:	4a90      	ldr	r2, [pc, #576]	; (8004fe0 <HAL_GPIO_Init+0x29c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04c      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004da4:	4a8e      	ldr	r2, [pc, #568]	; (8004fe0 <HAL_GPIO_Init+0x29c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d863      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004daa:	4a8e      	ldr	r2, [pc, #568]	; (8004fe4 <HAL_GPIO_Init+0x2a0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d046      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
 8004db0:	4a8c      	ldr	r2, [pc, #560]	; (8004fe4 <HAL_GPIO_Init+0x2a0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d85d      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004db6:	2b12      	cmp	r3, #18
 8004db8:	d82a      	bhi.n	8004e10 <HAL_GPIO_Init+0xcc>
 8004dba:	2b12      	cmp	r3, #18
 8004dbc:	d859      	bhi.n	8004e72 <HAL_GPIO_Init+0x12e>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <HAL_GPIO_Init+0x80>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004e3f 	.word	0x08004e3f
 8004dc8:	08004e19 	.word	0x08004e19
 8004dcc:	08004e2b 	.word	0x08004e2b
 8004dd0:	08004e6d 	.word	0x08004e6d
 8004dd4:	08004e73 	.word	0x08004e73
 8004dd8:	08004e73 	.word	0x08004e73
 8004ddc:	08004e73 	.word	0x08004e73
 8004de0:	08004e73 	.word	0x08004e73
 8004de4:	08004e73 	.word	0x08004e73
 8004de8:	08004e73 	.word	0x08004e73
 8004dec:	08004e73 	.word	0x08004e73
 8004df0:	08004e73 	.word	0x08004e73
 8004df4:	08004e73 	.word	0x08004e73
 8004df8:	08004e73 	.word	0x08004e73
 8004dfc:	08004e73 	.word	0x08004e73
 8004e00:	08004e73 	.word	0x08004e73
 8004e04:	08004e73 	.word	0x08004e73
 8004e08:	08004e21 	.word	0x08004e21
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	4a75      	ldr	r2, [pc, #468]	; (8004fe8 <HAL_GPIO_Init+0x2a4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e16:	e02c      	b.n	8004e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	623b      	str	r3, [r7, #32]
          break;
 8004e1e:	e029      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	3304      	adds	r3, #4
 8004e26:	623b      	str	r3, [r7, #32]
          break;
 8004e28:	e024      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	623b      	str	r3, [r7, #32]
          break;
 8004e32:	e01f      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	623b      	str	r3, [r7, #32]
          break;
 8004e3c:	e01a      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e46:	2304      	movs	r3, #4
 8004e48:	623b      	str	r3, [r7, #32]
          break;
 8004e4a:	e013      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e54:	2308      	movs	r3, #8
 8004e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	611a      	str	r2, [r3, #16]
          break;
 8004e5e:	e009      	b.n	8004e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e60:	2308      	movs	r3, #8
 8004e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	615a      	str	r2, [r3, #20]
          break;
 8004e6a:	e003      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	623b      	str	r3, [r7, #32]
          break;
 8004e70:	e000      	b.n	8004e74 <HAL_GPIO_Init+0x130>
          break;
 8004e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2bff      	cmp	r3, #255	; 0xff
 8004e78:	d801      	bhi.n	8004e7e <HAL_GPIO_Init+0x13a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	e001      	b.n	8004e82 <HAL_GPIO_Init+0x13e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3304      	adds	r3, #4
 8004e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2bff      	cmp	r3, #255	; 0xff
 8004e88:	d802      	bhi.n	8004e90 <HAL_GPIO_Init+0x14c>
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	e002      	b.n	8004e96 <HAL_GPIO_Init+0x152>
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	3b08      	subs	r3, #8
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	210f      	movs	r1, #15
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	6a39      	ldr	r1, [r7, #32]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80c1 	beq.w	8005046 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004ec4:	4b49      	ldr	r3, [pc, #292]	; (8004fec <HAL_GPIO_Init+0x2a8>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	4a48      	ldr	r2, [pc, #288]	; (8004fec <HAL_GPIO_Init+0x2a8>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6193      	str	r3, [r2, #24]
 8004ed0:	4b46      	ldr	r3, [pc, #280]	; (8004fec <HAL_GPIO_Init+0x2a8>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004edc:	4a44      	ldr	r2, [pc, #272]	; (8004ff0 <HAL_GPIO_Init+0x2ac>)
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	089b      	lsrs	r3, r3, #2
 8004ee2:	3302      	adds	r3, #2
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	220f      	movs	r2, #15
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4013      	ands	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a3c      	ldr	r2, [pc, #240]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d01f      	beq.n	8004f48 <HAL_GPIO_Init+0x204>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3b      	ldr	r2, [pc, #236]	; (8004ff8 <HAL_GPIO_Init+0x2b4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d019      	beq.n	8004f44 <HAL_GPIO_Init+0x200>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3a      	ldr	r2, [pc, #232]	; (8004ffc <HAL_GPIO_Init+0x2b8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <HAL_GPIO_Init+0x1fc>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a39      	ldr	r2, [pc, #228]	; (8005000 <HAL_GPIO_Init+0x2bc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00d      	beq.n	8004f3c <HAL_GPIO_Init+0x1f8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a38      	ldr	r2, [pc, #224]	; (8005004 <HAL_GPIO_Init+0x2c0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <HAL_GPIO_Init+0x1f4>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a37      	ldr	r2, [pc, #220]	; (8005008 <HAL_GPIO_Init+0x2c4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d101      	bne.n	8004f34 <HAL_GPIO_Init+0x1f0>
 8004f30:	2305      	movs	r3, #5
 8004f32:	e00a      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f34:	2306      	movs	r3, #6
 8004f36:	e008      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	e006      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e004      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e002      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4c:	f002 0203 	and.w	r2, r2, #3
 8004f50:	0092      	lsls	r2, r2, #2
 8004f52:	4093      	lsls	r3, r2
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f5a:	4925      	ldr	r1, [pc, #148]	; (8004ff0 <HAL_GPIO_Init+0x2ac>)
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	089b      	lsrs	r3, r3, #2
 8004f60:	3302      	adds	r3, #2
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d006      	beq.n	8004f82 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f74:	4b25      	ldr	r3, [pc, #148]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	4924      	ldr	r1, [pc, #144]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	608b      	str	r3, [r1, #8]
 8004f80:	e006      	b.n	8004f90 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f82:	4b22      	ldr	r3, [pc, #136]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	4920      	ldr	r1, [pc, #128]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d006      	beq.n	8004faa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	491a      	ldr	r1, [pc, #104]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60cb      	str	r3, [r1, #12]
 8004fa8:	e006      	b.n	8004fb8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	4916      	ldr	r1, [pc, #88]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d025      	beq.n	8005010 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004fc4:	4b11      	ldr	r3, [pc, #68]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	4910      	ldr	r1, [pc, #64]	; (800500c <HAL_GPIO_Init+0x2c8>)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	604b      	str	r3, [r1, #4]
 8004fd0:	e025      	b.n	800501e <HAL_GPIO_Init+0x2da>
 8004fd2:	bf00      	nop
 8004fd4:	10320000 	.word	0x10320000
 8004fd8:	10310000 	.word	0x10310000
 8004fdc:	10220000 	.word	0x10220000
 8004fe0:	10210000 	.word	0x10210000
 8004fe4:	10120000 	.word	0x10120000
 8004fe8:	10110000 	.word	0x10110000
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40010800 	.word	0x40010800
 8004ff8:	40010c00 	.word	0x40010c00
 8004ffc:	40011000 	.word	0x40011000
 8005000:	40011400 	.word	0x40011400
 8005004:	40011800 	.word	0x40011800
 8005008:	40011c00 	.word	0x40011c00
 800500c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005010:	4b15      	ldr	r3, [pc, #84]	; (8005068 <HAL_GPIO_Init+0x324>)
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	43db      	mvns	r3, r3
 8005018:	4913      	ldr	r1, [pc, #76]	; (8005068 <HAL_GPIO_Init+0x324>)
 800501a:	4013      	ands	r3, r2
 800501c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d006      	beq.n	8005038 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800502a:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <HAL_GPIO_Init+0x324>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	490e      	ldr	r1, [pc, #56]	; (8005068 <HAL_GPIO_Init+0x324>)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]
 8005036:	e006      	b.n	8005046 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <HAL_GPIO_Init+0x324>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	43db      	mvns	r3, r3
 8005040:	4909      	ldr	r1, [pc, #36]	; (8005068 <HAL_GPIO_Init+0x324>)
 8005042:	4013      	ands	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	3301      	adds	r3, #1
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	f47f ae7e 	bne.w	8004d58 <HAL_GPIO_Init+0x14>
  }
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	372c      	adds	r7, #44	; 0x2c
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	40010400 	.word	0x40010400

0800506c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
 8005078:	4613      	mov	r3, r2
 800507a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800507c:	787b      	ldrb	r3, [r7, #1]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005088:	e003      	b.n	8005092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	041a      	lsls	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	611a      	str	r2, [r3, #16]
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050ae:	887a      	ldrh	r2, [r7, #2]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4013      	ands	r3, r2
 80050b4:	041a      	lsls	r2, r3, #16
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	43d9      	mvns	r1, r3
 80050ba:	887b      	ldrh	r3, [r7, #2]
 80050bc:	400b      	ands	r3, r1
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	611a      	str	r2, [r3, #16]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr
	...

080050d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e272      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 8087 	beq.w	80051fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050f0:	4b92      	ldr	r3, [pc, #584]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 030c 	and.w	r3, r3, #12
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d00c      	beq.n	8005116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050fc:	4b8f      	ldr	r3, [pc, #572]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b08      	cmp	r3, #8
 8005106:	d112      	bne.n	800512e <HAL_RCC_OscConfig+0x5e>
 8005108:	4b8c      	ldr	r3, [pc, #560]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005114:	d10b      	bne.n	800512e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005116:	4b89      	ldr	r3, [pc, #548]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d06c      	beq.n	80051fc <HAL_RCC_OscConfig+0x12c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d168      	bne.n	80051fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e24c      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005136:	d106      	bne.n	8005146 <HAL_RCC_OscConfig+0x76>
 8005138:	4b80      	ldr	r3, [pc, #512]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a7f      	ldr	r2, [pc, #508]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 800513e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	e02e      	b.n	80051a4 <HAL_RCC_OscConfig+0xd4>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10c      	bne.n	8005168 <HAL_RCC_OscConfig+0x98>
 800514e:	4b7b      	ldr	r3, [pc, #492]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a7a      	ldr	r2, [pc, #488]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	4b78      	ldr	r3, [pc, #480]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a77      	ldr	r2, [pc, #476]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e01d      	b.n	80051a4 <HAL_RCC_OscConfig+0xd4>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0xbc>
 8005172:	4b72      	ldr	r3, [pc, #456]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a71      	ldr	r2, [pc, #452]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4b6f      	ldr	r3, [pc, #444]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a6e      	ldr	r2, [pc, #440]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	e00b      	b.n	80051a4 <HAL_RCC_OscConfig+0xd4>
 800518c:	4b6b      	ldr	r3, [pc, #428]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a6a      	ldr	r2, [pc, #424]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4b68      	ldr	r3, [pc, #416]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a67      	ldr	r2, [pc, #412]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 800519e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d013      	beq.n	80051d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7ff fb4c 	bl	8004848 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b4:	f7ff fb48 	bl	8004848 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	; 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e200      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c6:	4b5d      	ldr	r3, [pc, #372]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0xe4>
 80051d2:	e014      	b.n	80051fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7ff fb38 	bl	8004848 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051dc:	f7ff fb34 	bl	8004848 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	; 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e1ec      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ee:	4b53      	ldr	r3, [pc, #332]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x10c>
 80051fa:	e000      	b.n	80051fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d063      	beq.n	80052d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800520a:	4b4c      	ldr	r3, [pc, #304]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00b      	beq.n	800522e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005216:	4b49      	ldr	r3, [pc, #292]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b08      	cmp	r3, #8
 8005220:	d11c      	bne.n	800525c <HAL_RCC_OscConfig+0x18c>
 8005222:	4b46      	ldr	r3, [pc, #280]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d116      	bne.n	800525c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522e:	4b43      	ldr	r3, [pc, #268]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_RCC_OscConfig+0x176>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d001      	beq.n	8005246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e1c0      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005246:	4b3d      	ldr	r3, [pc, #244]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	4939      	ldr	r1, [pc, #228]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005256:	4313      	orrs	r3, r2
 8005258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525a:	e03a      	b.n	80052d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d020      	beq.n	80052a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005264:	4b36      	ldr	r3, [pc, #216]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 8005266:	2201      	movs	r2, #1
 8005268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526a:	f7ff faed 	bl	8004848 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005272:	f7ff fae9 	bl	8004848 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e1a1      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005284:	4b2d      	ldr	r3, [pc, #180]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005290:	4b2a      	ldr	r3, [pc, #168]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4927      	ldr	r1, [pc, #156]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	600b      	str	r3, [r1, #0]
 80052a4:	e015      	b.n	80052d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a6:	4b26      	ldr	r3, [pc, #152]	; (8005340 <HAL_RCC_OscConfig+0x270>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ac:	f7ff facc 	bl	8004848 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b4:	f7ff fac8 	bl	8004848 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e180      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052c6:	4b1d      	ldr	r3, [pc, #116]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d03a      	beq.n	8005354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d019      	beq.n	800531a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052e6:	4b17      	ldr	r3, [pc, #92]	; (8005344 <HAL_RCC_OscConfig+0x274>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ec:	f7ff faac 	bl	8004848 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f4:	f7ff faa8 	bl	8004848 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e160      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <HAL_RCC_OscConfig+0x26c>)
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005312:	2001      	movs	r0, #1
 8005314:	f000 face 	bl	80058b4 <RCC_Delay>
 8005318:	e01c      	b.n	8005354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <HAL_RCC_OscConfig+0x274>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005320:	f7ff fa92 	bl	8004848 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005326:	e00f      	b.n	8005348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005328:	f7ff fa8e 	bl	8004848 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d908      	bls.n	8005348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e146      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
 800533a:	bf00      	nop
 800533c:	40021000 	.word	0x40021000
 8005340:	42420000 	.word	0x42420000
 8005344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005348:	4b92      	ldr	r3, [pc, #584]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e9      	bne.n	8005328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80a6 	beq.w	80054ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005362:	2300      	movs	r3, #0
 8005364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005366:	4b8b      	ldr	r3, [pc, #556]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10d      	bne.n	800538e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005372:	4b88      	ldr	r3, [pc, #544]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	4a87      	ldr	r2, [pc, #540]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537c:	61d3      	str	r3, [r2, #28]
 800537e:	4b85      	ldr	r3, [pc, #532]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005386:	60bb      	str	r3, [r7, #8]
 8005388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538e:	4b82      	ldr	r3, [pc, #520]	; (8005598 <HAL_RCC_OscConfig+0x4c8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005396:	2b00      	cmp	r3, #0
 8005398:	d118      	bne.n	80053cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800539a:	4b7f      	ldr	r3, [pc, #508]	; (8005598 <HAL_RCC_OscConfig+0x4c8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7e      	ldr	r2, [pc, #504]	; (8005598 <HAL_RCC_OscConfig+0x4c8>)
 80053a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a6:	f7ff fa4f 	bl	8004848 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ae:	f7ff fa4b 	bl	8004848 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b64      	cmp	r3, #100	; 0x64
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e103      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c0:	4b75      	ldr	r3, [pc, #468]	; (8005598 <HAL_RCC_OscConfig+0x4c8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d106      	bne.n	80053e2 <HAL_RCC_OscConfig+0x312>
 80053d4:	4b6f      	ldr	r3, [pc, #444]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	4a6e      	ldr	r2, [pc, #440]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 80053da:	f043 0301 	orr.w	r3, r3, #1
 80053de:	6213      	str	r3, [r2, #32]
 80053e0:	e02d      	b.n	800543e <HAL_RCC_OscConfig+0x36e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10c      	bne.n	8005404 <HAL_RCC_OscConfig+0x334>
 80053ea:	4b6a      	ldr	r3, [pc, #424]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	4a69      	ldr	r2, [pc, #420]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	6213      	str	r3, [r2, #32]
 80053f6:	4b67      	ldr	r3, [pc, #412]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	4a66      	ldr	r2, [pc, #408]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 80053fc:	f023 0304 	bic.w	r3, r3, #4
 8005400:	6213      	str	r3, [r2, #32]
 8005402:	e01c      	b.n	800543e <HAL_RCC_OscConfig+0x36e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2b05      	cmp	r3, #5
 800540a:	d10c      	bne.n	8005426 <HAL_RCC_OscConfig+0x356>
 800540c:	4b61      	ldr	r3, [pc, #388]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	4a60      	ldr	r2, [pc, #384]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	6213      	str	r3, [r2, #32]
 8005418:	4b5e      	ldr	r3, [pc, #376]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	4a5d      	ldr	r2, [pc, #372]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	6213      	str	r3, [r2, #32]
 8005424:	e00b      	b.n	800543e <HAL_RCC_OscConfig+0x36e>
 8005426:	4b5b      	ldr	r3, [pc, #364]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	4a5a      	ldr	r2, [pc, #360]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	6213      	str	r3, [r2, #32]
 8005432:	4b58      	ldr	r3, [pc, #352]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	4a57      	ldr	r2, [pc, #348]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005438:	f023 0304 	bic.w	r3, r3, #4
 800543c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d015      	beq.n	8005472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005446:	f7ff f9ff 	bl	8004848 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544c:	e00a      	b.n	8005464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544e:	f7ff f9fb 	bl	8004848 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	f241 3288 	movw	r2, #5000	; 0x1388
 800545c:	4293      	cmp	r3, r2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e0b1      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005464:	4b4b      	ldr	r3, [pc, #300]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0ee      	beq.n	800544e <HAL_RCC_OscConfig+0x37e>
 8005470:	e014      	b.n	800549c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005472:	f7ff f9e9 	bl	8004848 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005478:	e00a      	b.n	8005490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547a:	f7ff f9e5 	bl	8004848 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f241 3288 	movw	r2, #5000	; 0x1388
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e09b      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005490:	4b40      	ldr	r3, [pc, #256]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1ee      	bne.n	800547a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d105      	bne.n	80054ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a2:	4b3c      	ldr	r3, [pc, #240]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	4a3b      	ldr	r2, [pc, #236]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 80054a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8087 	beq.w	80055c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054b8:	4b36      	ldr	r3, [pc, #216]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 030c 	and.w	r3, r3, #12
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d061      	beq.n	8005588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d146      	bne.n	800555a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054cc:	4b33      	ldr	r3, [pc, #204]	; (800559c <HAL_RCC_OscConfig+0x4cc>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d2:	f7ff f9b9 	bl	8004848 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054da:	f7ff f9b5 	bl	8004848 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e06d      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ec:	4b29      	ldr	r3, [pc, #164]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f0      	bne.n	80054da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005500:	d108      	bne.n	8005514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005502:	4b24      	ldr	r3, [pc, #144]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	4921      	ldr	r1, [pc, #132]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005510:	4313      	orrs	r3, r2
 8005512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005514:	4b1f      	ldr	r3, [pc, #124]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a19      	ldr	r1, [r3, #32]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	430b      	orrs	r3, r1
 8005526:	491b      	ldr	r1, [pc, #108]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 8005528:	4313      	orrs	r3, r2
 800552a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800552c:	4b1b      	ldr	r3, [pc, #108]	; (800559c <HAL_RCC_OscConfig+0x4cc>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005532:	f7ff f989 	bl	8004848 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800553a:	f7ff f985 	bl	8004848 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e03d      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800554c:	4b11      	ldr	r3, [pc, #68]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <HAL_RCC_OscConfig+0x46a>
 8005558:	e035      	b.n	80055c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555a:	4b10      	ldr	r3, [pc, #64]	; (800559c <HAL_RCC_OscConfig+0x4cc>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005560:	f7ff f972 	bl	8004848 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005568:	f7ff f96e 	bl	8004848 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e026      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800557a:	4b06      	ldr	r3, [pc, #24]	; (8005594 <HAL_RCC_OscConfig+0x4c4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0x498>
 8005586:	e01e      	b.n	80055c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d107      	bne.n	80055a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e019      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
 8005594:	40021000 	.word	0x40021000
 8005598:	40007000 	.word	0x40007000
 800559c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_OscConfig+0x500>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d106      	bne.n	80055c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000

080055d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0d0      	b.n	800578a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e8:	4b6a      	ldr	r3, [pc, #424]	; (8005794 <HAL_RCC_ClockConfig+0x1c0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d910      	bls.n	8005618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b67      	ldr	r3, [pc, #412]	; (8005794 <HAL_RCC_ClockConfig+0x1c0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 0207 	bic.w	r2, r3, #7
 80055fe:	4965      	ldr	r1, [pc, #404]	; (8005794 <HAL_RCC_ClockConfig+0x1c0>)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b63      	ldr	r3, [pc, #396]	; (8005794 <HAL_RCC_ClockConfig+0x1c0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0b8      	b.n	800578a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d020      	beq.n	8005666 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005630:	4b59      	ldr	r3, [pc, #356]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a58      	ldr	r2, [pc, #352]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 8005636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800563a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005648:	4b53      	ldr	r3, [pc, #332]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	4a52      	ldr	r2, [pc, #328]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 800564e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005652:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005654:	4b50      	ldr	r3, [pc, #320]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	494d      	ldr	r1, [pc, #308]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 8005662:	4313      	orrs	r3, r2
 8005664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d040      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	4b47      	ldr	r3, [pc, #284]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d115      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e07f      	b.n	800578a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d107      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005692:	4b41      	ldr	r3, [pc, #260]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e073      	b.n	800578a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a2:	4b3d      	ldr	r3, [pc, #244]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e06b      	b.n	800578a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056b2:	4b39      	ldr	r3, [pc, #228]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f023 0203 	bic.w	r2, r3, #3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	4936      	ldr	r1, [pc, #216]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c4:	f7ff f8c0 	bl	8004848 <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ca:	e00a      	b.n	80056e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056cc:	f7ff f8bc 	bl	8004848 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e053      	b.n	800578a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e2:	4b2d      	ldr	r3, [pc, #180]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f003 020c 	and.w	r2, r3, #12
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d1eb      	bne.n	80056cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f4:	4b27      	ldr	r3, [pc, #156]	; (8005794 <HAL_RCC_ClockConfig+0x1c0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d210      	bcs.n	8005724 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005702:	4b24      	ldr	r3, [pc, #144]	; (8005794 <HAL_RCC_ClockConfig+0x1c0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f023 0207 	bic.w	r2, r3, #7
 800570a:	4922      	ldr	r1, [pc, #136]	; (8005794 <HAL_RCC_ClockConfig+0x1c0>)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b20      	ldr	r3, [pc, #128]	; (8005794 <HAL_RCC_ClockConfig+0x1c0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e032      	b.n	800578a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005730:	4b19      	ldr	r3, [pc, #100]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4916      	ldr	r1, [pc, #88]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 800573e:	4313      	orrs	r3, r2
 8005740:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	490e      	ldr	r1, [pc, #56]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 800575e:	4313      	orrs	r3, r2
 8005760:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005762:	f000 f821 	bl	80057a8 <HAL_RCC_GetSysClockFreq>
 8005766:	4602      	mov	r2, r0
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <HAL_RCC_ClockConfig+0x1c4>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	490a      	ldr	r1, [pc, #40]	; (800579c <HAL_RCC_ClockConfig+0x1c8>)
 8005774:	5ccb      	ldrb	r3, [r1, r3]
 8005776:	fa22 f303 	lsr.w	r3, r2, r3
 800577a:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <HAL_RCC_ClockConfig+0x1cc>)
 800577c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800577e:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff f81e 	bl	80047c4 <HAL_InitTick>

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40022000 	.word	0x40022000
 8005798:	40021000 	.word	0x40021000
 800579c:	0800a8fc 	.word	0x0800a8fc
 80057a0:	20000004 	.word	0x20000004
 80057a4:	20000008 	.word	0x20000008

080057a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	2300      	movs	r3, #0
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	2300      	movs	r3, #0
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80057c2:	4b1e      	ldr	r3, [pc, #120]	; (800583c <HAL_RCC_GetSysClockFreq+0x94>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d002      	beq.n	80057d8 <HAL_RCC_GetSysClockFreq+0x30>
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d003      	beq.n	80057de <HAL_RCC_GetSysClockFreq+0x36>
 80057d6:	e027      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057d8:	4b19      	ldr	r3, [pc, #100]	; (8005840 <HAL_RCC_GetSysClockFreq+0x98>)
 80057da:	613b      	str	r3, [r7, #16]
      break;
 80057dc:	e027      	b.n	800582e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	0c9b      	lsrs	r3, r3, #18
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	4a17      	ldr	r2, [pc, #92]	; (8005844 <HAL_RCC_GetSysClockFreq+0x9c>)
 80057e8:	5cd3      	ldrb	r3, [r2, r3]
 80057ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057f6:	4b11      	ldr	r3, [pc, #68]	; (800583c <HAL_RCC_GetSysClockFreq+0x94>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	0c5b      	lsrs	r3, r3, #17
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	4a11      	ldr	r2, [pc, #68]	; (8005848 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005802:	5cd3      	ldrb	r3, [r2, r3]
 8005804:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a0d      	ldr	r2, [pc, #52]	; (8005840 <HAL_RCC_GetSysClockFreq+0x98>)
 800580a:	fb03 f202 	mul.w	r2, r3, r2
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	fbb2 f3f3 	udiv	r3, r2, r3
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	e004      	b.n	8005822 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a0c      	ldr	r2, [pc, #48]	; (800584c <HAL_RCC_GetSysClockFreq+0xa4>)
 800581c:	fb02 f303 	mul.w	r3, r2, r3
 8005820:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	613b      	str	r3, [r7, #16]
      break;
 8005826:	e002      	b.n	800582e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_RCC_GetSysClockFreq+0x98>)
 800582a:	613b      	str	r3, [r7, #16]
      break;
 800582c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800582e:	693b      	ldr	r3, [r7, #16]
}
 8005830:	4618      	mov	r0, r3
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000
 8005840:	007a1200 	.word	0x007a1200
 8005844:	0800a914 	.word	0x0800a914
 8005848:	0800a924 	.word	0x0800a924
 800584c:	003d0900 	.word	0x003d0900

08005850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005854:	4b02      	ldr	r3, [pc, #8]	; (8005860 <HAL_RCC_GetHCLKFreq+0x10>)
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr
 8005860:	20000004 	.word	0x20000004

08005864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005868:	f7ff fff2 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 800586c:	4602      	mov	r2, r0
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	0a1b      	lsrs	r3, r3, #8
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	4903      	ldr	r1, [pc, #12]	; (8005888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800587a:	5ccb      	ldrb	r3, [r1, r3]
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40021000 	.word	0x40021000
 8005888:	0800a90c 	.word	0x0800a90c

0800588c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005890:	f7ff ffde 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 8005894:	4602      	mov	r2, r0
 8005896:	4b05      	ldr	r3, [pc, #20]	; (80058ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	0adb      	lsrs	r3, r3, #11
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	4903      	ldr	r1, [pc, #12]	; (80058b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a2:	5ccb      	ldrb	r3, [r1, r3]
 80058a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40021000 	.word	0x40021000
 80058b0:	0800a90c 	.word	0x0800a90c

080058b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80058bc:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <RCC_Delay+0x34>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <RCC_Delay+0x38>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	0a5b      	lsrs	r3, r3, #9
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80058d0:	bf00      	nop
  }
  while (Delay --);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1e5a      	subs	r2, r3, #1
 80058d6:	60fa      	str	r2, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f9      	bne.n	80058d0 <RCC_Delay+0x1c>
}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr
 80058e8:	20000004 	.word	0x20000004
 80058ec:	10624dd3 	.word	0x10624dd3

080058f0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <HAL_SRAM_Init+0x1c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590a:	d101      	bne.n	8005910 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e038      	b.n	8005982 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7fe fb51 	bl	8003fcc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3308      	adds	r3, #8
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f000 fea1 	bl	800667c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	461a      	mov	r2, r3
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	f000 ff03 	bl	8006750 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6858      	ldr	r0, [r3, #4]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	f000 ff2e 	bl	80067b8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	6892      	ldr	r2, [r2, #8]
 8005964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	6892      	ldr	r2, [r2, #8]
 8005970:	f041 0101 	orr.w	r1, r1, #1
 8005974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e042      	b.n	8005a22 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7fe fe1d 	bl	80045f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2224      	movs	r2, #36	; 0x24
 80059ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fdc6 	bl	8006560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b08a      	sub	sp, #40	; 0x28
 8005a2e:	af02      	add	r7, sp, #8
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d16d      	bne.n	8005b26 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_UART_Transmit+0x2c>
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e066      	b.n	8005b28 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2221      	movs	r2, #33	; 0x21
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a68:	f7fe feee 	bl	8004848 <HAL_GetTick>
 8005a6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	88fa      	ldrh	r2, [r7, #6]
 8005a72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	88fa      	ldrh	r2, [r7, #6]
 8005a78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a82:	d108      	bne.n	8005a96 <HAL_UART_Transmit+0x6c>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	e003      	b.n	8005a9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a9e:	e02a      	b.n	8005af6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fb15 	bl	80060da <UART_WaitOnFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e036      	b.n	8005b28 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10b      	bne.n	8005ad8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ace:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	e007      	b.n	8005ae8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	781a      	ldrb	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1cf      	bne.n	8005aa0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2200      	movs	r2, #0
 8005b08:	2140      	movs	r1, #64	; 0x40
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fae5 	bl	80060da <UART_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e006      	b.n	8005b28 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e000      	b.n	8005b28 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b26:	2302      	movs	r3, #2
  }
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d112      	bne.n	8005b70 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_UART_Receive_IT+0x26>
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e00b      	b.n	8005b72 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	461a      	mov	r2, r3
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fb25 	bl	80061b6 <UART_Start_Receive_IT>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	e000      	b.n	8005b72 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b70:	2302      	movs	r3, #2
  }
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b0ba      	sub	sp, #232	; 0xe8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10f      	bne.n	8005be2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <HAL_UART_IRQHandler+0x66>
 8005bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fc01 	bl	80063e2 <UART_Receive_IT>
      return;
 8005be0:	e25b      	b.n	800609a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 80de 	beq.w	8005da8 <HAL_UART_IRQHandler+0x22c>
 8005bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80d1 	beq.w	8005da8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00b      	beq.n	8005c2a <HAL_UART_IRQHandler+0xae>
 8005c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00b      	beq.n	8005c4e <HAL_UART_IRQHandler+0xd2>
 8005c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d005      	beq.n	8005c4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c46:	f043 0202 	orr.w	r2, r3, #2
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <HAL_UART_IRQHandler+0xf6>
 8005c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	f043 0204 	orr.w	r2, r3, #4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d011      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x126>
 8005c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d105      	bne.n	8005c96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d005      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	f043 0208 	orr.w	r2, r3, #8
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 81f2 	beq.w	8006090 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_UART_IRQHandler+0x14e>
 8005cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fb8c 	bl	80063e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bf14      	ite	ne
 8005cd8:	2301      	movne	r3, #1
 8005cda:	2300      	moveq	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x17a>
 8005cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d04f      	beq.n	8005d96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa96 	bl	8006228 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d041      	beq.n	8005d8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3314      	adds	r3, #20
 8005d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3314      	adds	r3, #20
 8005d32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1d9      	bne.n	8005d0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d013      	beq.n	8005d86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d62:	4a7e      	ldr	r2, [pc, #504]	; (8005f5c <HAL_UART_IRQHandler+0x3e0>)
 8005d64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe fee2 	bl	8004b34 <HAL_DMA_Abort_IT>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d016      	beq.n	8005da4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d80:	4610      	mov	r0, r2
 8005d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d84:	e00e      	b.n	8005da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f993 	bl	80060b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	e00a      	b.n	8005da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f98f 	bl	80060b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	e006      	b.n	8005da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f98b 	bl	80060b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005da2:	e175      	b.n	8006090 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	bf00      	nop
    return;
 8005da6:	e173      	b.n	8006090 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	f040 814f 	bne.w	8006050 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db6:	f003 0310 	and.w	r3, r3, #16
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8148 	beq.w	8006050 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8141 	beq.w	8006050 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80b6 	beq.w	8005f60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8145 	beq.w	8006094 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e12:	429a      	cmp	r2, r3
 8005e14:	f080 813e 	bcs.w	8006094 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	f000 8088 	beq.w	8005f3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e58:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1d9      	bne.n	8005e2c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3314      	adds	r3, #20
 8005e7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3314      	adds	r3, #20
 8005e98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ea4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e1      	bne.n	8005e78 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3314      	adds	r3, #20
 8005eba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3314      	adds	r3, #20
 8005ed4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ed8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005eda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ede:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e3      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	330c      	adds	r3, #12
 8005f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f0c:	f023 0310 	bic.w	r3, r3, #16
 8005f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	330c      	adds	r3, #12
 8005f1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f20:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e3      	bne.n	8005efa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe fdc1 	bl	8004abe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f8b6 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f58:	e09c      	b.n	8006094 <HAL_UART_IRQHandler+0x518>
 8005f5a:	bf00      	nop
 8005f5c:	080062ed 	.word	0x080062ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 808e 	beq.w	8006098 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 8089 	beq.w	8006098 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	330c      	adds	r3, #12
 8005f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005faa:	647a      	str	r2, [r7, #68]	; 0x44
 8005fac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e3      	bne.n	8005f86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3314      	adds	r3, #20
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	f023 0301 	bic.w	r3, r3, #1
 8005fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3314      	adds	r3, #20
 8005fde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fe2:	633a      	str	r2, [r7, #48]	; 0x30
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e3      	bne.n	8005fbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	330c      	adds	r3, #12
 800600a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	60fb      	str	r3, [r7, #12]
   return(result);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0310 	bic.w	r3, r3, #16
 800601a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	330c      	adds	r3, #12
 8006024:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006028:	61fa      	str	r2, [r7, #28]
 800602a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	69b9      	ldr	r1, [r7, #24]
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	617b      	str	r3, [r7, #20]
   return(result);
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e3      	bne.n	8006004 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006042:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f83b 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800604e:	e023      	b.n	8006098 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	2b00      	cmp	r3, #0
 800605a:	d009      	beq.n	8006070 <HAL_UART_IRQHandler+0x4f4>
 800605c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f953 	bl	8006314 <UART_Transmit_IT>
    return;
 800606e:	e014      	b.n	800609a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00e      	beq.n	800609a <HAL_UART_IRQHandler+0x51e>
 800607c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f992 	bl	80063b2 <UART_EndTransmit_IT>
    return;
 800608e:	e004      	b.n	800609a <HAL_UART_IRQHandler+0x51e>
    return;
 8006090:	bf00      	nop
 8006092:	e002      	b.n	800609a <HAL_UART_IRQHandler+0x51e>
      return;
 8006094:	bf00      	nop
 8006096:	e000      	b.n	800609a <HAL_UART_IRQHandler+0x51e>
      return;
 8006098:	bf00      	nop
  }
}
 800609a:	37e8      	adds	r7, #232	; 0xe8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr

080060b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr

080060da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b090      	sub	sp, #64	; 0x40
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	603b      	str	r3, [r7, #0]
 80060e6:	4613      	mov	r3, r2
 80060e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ea:	e050      	b.n	800618e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d04c      	beq.n	800618e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <UART_WaitOnFlagUntilTimeout+0x30>
 80060fa:	f7fe fba5 	bl	8004848 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006106:	429a      	cmp	r2, r3
 8006108:	d241      	bcs.n	800618e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	330c      	adds	r3, #12
 8006110:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	330c      	adds	r3, #12
 8006128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800612a:	637a      	str	r2, [r7, #52]	; 0x34
 800612c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e5      	bne.n	800610a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3314      	adds	r3, #20
 8006144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	613b      	str	r3, [r7, #16]
   return(result);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f023 0301 	bic.w	r3, r3, #1
 8006154:	63bb      	str	r3, [r7, #56]	; 0x38
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3314      	adds	r3, #20
 800615c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800615e:	623a      	str	r2, [r7, #32]
 8006160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	69f9      	ldr	r1, [r7, #28]
 8006164:	6a3a      	ldr	r2, [r7, #32]
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	61bb      	str	r3, [r7, #24]
   return(result);
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e5      	bne.n	800613e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e00f      	b.n	80061ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4013      	ands	r3, r2
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	429a      	cmp	r2, r3
 800619c:	bf0c      	ite	eq
 800619e:	2301      	moveq	r3, #1
 80061a0:	2300      	movne	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	79fb      	ldrb	r3, [r7, #7]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d09f      	beq.n	80060ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3740      	adds	r7, #64	; 0x40
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	88fa      	ldrh	r2, [r7, #6]
 80061d4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2222      	movs	r2, #34	; 0x22
 80061e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d007      	beq.n	80061fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695a      	ldr	r2, [r3, #20]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0220 	orr.w	r2, r2, #32
 800621a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr

08006228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b095      	sub	sp, #84	; 0x54
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	330c      	adds	r3, #12
 800624e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006250:	643a      	str	r2, [r7, #64]	; 0x40
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e5      	bne.n	8006230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3314      	adds	r3, #20
 800626a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	61fb      	str	r3, [r7, #28]
   return(result);
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f023 0301 	bic.w	r3, r3, #1
 800627a:	64bb      	str	r3, [r7, #72]	; 0x48
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3314      	adds	r3, #20
 8006282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800628a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e5      	bne.n	8006264 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	2b01      	cmp	r3, #1
 800629e:	d119      	bne.n	80062d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	330c      	adds	r3, #12
 80062a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f023 0310 	bic.w	r3, r3, #16
 80062b6:	647b      	str	r3, [r7, #68]	; 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	330c      	adds	r3, #12
 80062be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062c0:	61ba      	str	r2, [r7, #24]
 80062c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6979      	ldr	r1, [r7, #20]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	613b      	str	r3, [r7, #16]
   return(result);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e5      	bne.n	80062a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062e2:	bf00      	nop
 80062e4:	3754      	adds	r7, #84	; 0x54
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr

080062ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f7ff fed3 	bl	80060b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b21      	cmp	r3, #33	; 0x21
 8006326:	d13e      	bne.n	80063a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006330:	d114      	bne.n	800635c <UART_Transmit_IT+0x48>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d110      	bne.n	800635c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800634e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	1c9a      	adds	r2, r3, #2
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	621a      	str	r2, [r3, #32]
 800635a:	e008      	b.n	800636e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	1c59      	adds	r1, r3, #1
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6211      	str	r1, [r2, #32]
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29b      	uxth	r3, r3
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	4619      	mov	r1, r3
 800637c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10f      	bne.n	80063a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006390:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e000      	b.n	80063a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063a6:	2302      	movs	r3, #2
  }
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr

080063b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fe64 	bl	80060a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b08c      	sub	sp, #48	; 0x30
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b22      	cmp	r3, #34	; 0x22
 80063f4:	f040 80ae 	bne.w	8006554 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006400:	d117      	bne.n	8006432 <UART_Receive_IT+0x50>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d113      	bne.n	8006432 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006420:	b29a      	uxth	r2, r3
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	1c9a      	adds	r2, r3, #2
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	629a      	str	r2, [r3, #40]	; 0x28
 8006430:	e026      	b.n	8006480 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006444:	d007      	beq.n	8006456 <UART_Receive_IT+0x74>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <UART_Receive_IT+0x82>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	e008      	b.n	8006476 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006470:	b2da      	uxtb	r2, r3
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29b      	uxth	r3, r3
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	4619      	mov	r1, r3
 800648e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006490:	2b00      	cmp	r3, #0
 8006492:	d15d      	bne.n	8006550 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0220 	bic.w	r2, r2, #32
 80064a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0201 	bic.w	r2, r2, #1
 80064c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d135      	bne.n	8006546 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	613b      	str	r3, [r7, #16]
   return(result);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f023 0310 	bic.w	r3, r3, #16
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006500:	623a      	str	r2, [r7, #32]
 8006502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	69f9      	ldr	r1, [r7, #28]
 8006506:	6a3a      	ldr	r2, [r7, #32]
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	61bb      	str	r3, [r7, #24]
   return(result);
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e5      	bne.n	80064e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b10      	cmp	r3, #16
 8006520:	d10a      	bne.n	8006538 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff fdc0 	bl	80060c4 <HAL_UARTEx_RxEventCallback>
 8006544:	e002      	b.n	800654c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fe f8a6 	bl	8004698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	e002      	b.n	8006556 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	e000      	b.n	8006556 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006554:	2302      	movs	r3, #2
  }
}
 8006556:	4618      	mov	r0, r3
 8006558:	3730      	adds	r7, #48	; 0x30
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800659a:	f023 030c 	bic.w	r3, r3, #12
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	430b      	orrs	r3, r1
 80065a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a2c      	ldr	r2, [pc, #176]	; (8006674 <UART_SetConfig+0x114>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d103      	bne.n	80065d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065c8:	f7ff f960 	bl	800588c <HAL_RCC_GetPCLK2Freq>
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	e002      	b.n	80065d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80065d0:	f7ff f948 	bl	8005864 <HAL_RCC_GetPCLK1Freq>
 80065d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009a      	lsls	r2, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	4a22      	ldr	r2, [pc, #136]	; (8006678 <UART_SetConfig+0x118>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	095b      	lsrs	r3, r3, #5
 80065f4:	0119      	lsls	r1, r3, #4
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	009a      	lsls	r2, r3, #2
 8006600:	441a      	add	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	fbb2 f2f3 	udiv	r2, r2, r3
 800660c:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <UART_SetConfig+0x118>)
 800660e:	fba3 0302 	umull	r0, r3, r3, r2
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	2064      	movs	r0, #100	; 0x64
 8006616:	fb00 f303 	mul.w	r3, r0, r3
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	3332      	adds	r3, #50	; 0x32
 8006620:	4a15      	ldr	r2, [pc, #84]	; (8006678 <UART_SetConfig+0x118>)
 8006622:	fba2 2303 	umull	r2, r3, r2, r3
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800662c:	4419      	add	r1, r3
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009a      	lsls	r2, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	fbb2 f2f3 	udiv	r2, r2, r3
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <UART_SetConfig+0x118>)
 8006646:	fba3 0302 	umull	r0, r3, r3, r2
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	2064      	movs	r0, #100	; 0x64
 800664e:	fb00 f303 	mul.w	r3, r0, r3
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	3332      	adds	r3, #50	; 0x32
 8006658:	4a07      	ldr	r2, [pc, #28]	; (8006678 <UART_SetConfig+0x118>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	f003 020f 	and.w	r2, r3, #15
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	440a      	add	r2, r1
 800666a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40013800 	.word	0x40013800
 8006678:	51eb851f 	.word	0x51eb851f

0800667c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	f023 0101 	bic.w	r1, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d102      	bne.n	80066ac <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80066a6:	2340      	movs	r3, #64	; 0x40
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e001      	b.n	80066b0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80066bc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80066c2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80066c8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80066ce:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80066d4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80066da:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80066e0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80066e6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80066ec:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800670a:	4b10      	ldr	r3, [pc, #64]	; (800674c <FSMC_NORSRAM_Init+0xd0>)
 800670c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006714:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800671c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	43db      	mvns	r3, r3
 800672c:	ea02 0103 	and.w	r1, r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	4319      	orrs	r1, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	0008fb7f 	.word	0x0008fb7f

08006750 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006766:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	431a      	orrs	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	431a      	orrs	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	431a      	orrs	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	3b01      	subs	r3, #1
 800678c:	051b      	lsls	r3, r3, #20
 800678e:	431a      	orrs	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	3b02      	subs	r3, #2
 8006796:	061b      	lsls	r3, r3, #24
 8006798:	431a      	orrs	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	4313      	orrs	r3, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	3201      	adds	r2, #1
 80067a4:	4319      	orrs	r1, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr

080067b8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067cc:	d11d      	bne.n	800680a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067d6:	4b13      	ldr	r3, [pc, #76]	; (8006824 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80067d8:	4013      	ands	r3, r2
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	6811      	ldr	r1, [r2, #0]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	6852      	ldr	r2, [r2, #4]
 80067e2:	0112      	lsls	r2, r2, #4
 80067e4:	4311      	orrs	r1, r2
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	6892      	ldr	r2, [r2, #8]
 80067ea:	0212      	lsls	r2, r2, #8
 80067ec:	4311      	orrs	r1, r2
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	6992      	ldr	r2, [r2, #24]
 80067f2:	4311      	orrs	r1, r2
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	68d2      	ldr	r2, [r2, #12]
 80067f8:	0412      	lsls	r2, r2, #16
 80067fa:	430a      	orrs	r2, r1
 80067fc:	ea43 0102 	orr.w	r1, r3, r2
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006808:	e005      	b.n	8006816 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	cff00000 	.word	0xcff00000

08006828 <std>:
 8006828:	2300      	movs	r3, #0
 800682a:	b510      	push	{r4, lr}
 800682c:	4604      	mov	r4, r0
 800682e:	e9c0 3300 	strd	r3, r3, [r0]
 8006832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006836:	6083      	str	r3, [r0, #8]
 8006838:	8181      	strh	r1, [r0, #12]
 800683a:	6643      	str	r3, [r0, #100]	; 0x64
 800683c:	81c2      	strh	r2, [r0, #14]
 800683e:	6183      	str	r3, [r0, #24]
 8006840:	4619      	mov	r1, r3
 8006842:	2208      	movs	r2, #8
 8006844:	305c      	adds	r0, #92	; 0x5c
 8006846:	f000 fa0d 	bl	8006c64 <memset>
 800684a:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <std+0x58>)
 800684c:	6224      	str	r4, [r4, #32]
 800684e:	6263      	str	r3, [r4, #36]	; 0x24
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <std+0x5c>)
 8006852:	62a3      	str	r3, [r4, #40]	; 0x28
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <std+0x60>)
 8006856:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006858:	4b0c      	ldr	r3, [pc, #48]	; (800688c <std+0x64>)
 800685a:	6323      	str	r3, [r4, #48]	; 0x30
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <std+0x68>)
 800685e:	429c      	cmp	r4, r3
 8006860:	d006      	beq.n	8006870 <std+0x48>
 8006862:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006866:	4294      	cmp	r4, r2
 8006868:	d002      	beq.n	8006870 <std+0x48>
 800686a:	33d0      	adds	r3, #208	; 0xd0
 800686c:	429c      	cmp	r4, r3
 800686e:	d105      	bne.n	800687c <std+0x54>
 8006870:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006878:	f000 ba6c 	b.w	8006d54 <__retarget_lock_init_recursive>
 800687c:	bd10      	pop	{r4, pc}
 800687e:	bf00      	nop
 8006880:	08006ab5 	.word	0x08006ab5
 8006884:	08006ad7 	.word	0x08006ad7
 8006888:	08006b0f 	.word	0x08006b0f
 800688c:	08006b33 	.word	0x08006b33
 8006890:	20000204 	.word	0x20000204

08006894 <stdio_exit_handler>:
 8006894:	4a02      	ldr	r2, [pc, #8]	; (80068a0 <stdio_exit_handler+0xc>)
 8006896:	4903      	ldr	r1, [pc, #12]	; (80068a4 <stdio_exit_handler+0x10>)
 8006898:	4803      	ldr	r0, [pc, #12]	; (80068a8 <stdio_exit_handler+0x14>)
 800689a:	f000 b869 	b.w	8006970 <_fwalk_sglue>
 800689e:	bf00      	nop
 80068a0:	20000010 	.word	0x20000010
 80068a4:	08007621 	.word	0x08007621
 80068a8:	2000001c 	.word	0x2000001c

080068ac <cleanup_stdio>:
 80068ac:	6841      	ldr	r1, [r0, #4]
 80068ae:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <cleanup_stdio+0x34>)
 80068b0:	b510      	push	{r4, lr}
 80068b2:	4299      	cmp	r1, r3
 80068b4:	4604      	mov	r4, r0
 80068b6:	d001      	beq.n	80068bc <cleanup_stdio+0x10>
 80068b8:	f000 feb2 	bl	8007620 <_fflush_r>
 80068bc:	68a1      	ldr	r1, [r4, #8]
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <cleanup_stdio+0x38>)
 80068c0:	4299      	cmp	r1, r3
 80068c2:	d002      	beq.n	80068ca <cleanup_stdio+0x1e>
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 feab 	bl	8007620 <_fflush_r>
 80068ca:	68e1      	ldr	r1, [r4, #12]
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <cleanup_stdio+0x3c>)
 80068ce:	4299      	cmp	r1, r3
 80068d0:	d004      	beq.n	80068dc <cleanup_stdio+0x30>
 80068d2:	4620      	mov	r0, r4
 80068d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d8:	f000 bea2 	b.w	8007620 <_fflush_r>
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	bf00      	nop
 80068e0:	20000204 	.word	0x20000204
 80068e4:	2000026c 	.word	0x2000026c
 80068e8:	200002d4 	.word	0x200002d4

080068ec <global_stdio_init.part.0>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	4b0b      	ldr	r3, [pc, #44]	; (800691c <global_stdio_init.part.0+0x30>)
 80068f0:	4c0b      	ldr	r4, [pc, #44]	; (8006920 <global_stdio_init.part.0+0x34>)
 80068f2:	4a0c      	ldr	r2, [pc, #48]	; (8006924 <global_stdio_init.part.0+0x38>)
 80068f4:	4620      	mov	r0, r4
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	2104      	movs	r1, #4
 80068fa:	2200      	movs	r2, #0
 80068fc:	f7ff ff94 	bl	8006828 <std>
 8006900:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006904:	2201      	movs	r2, #1
 8006906:	2109      	movs	r1, #9
 8006908:	f7ff ff8e 	bl	8006828 <std>
 800690c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006910:	2202      	movs	r2, #2
 8006912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006916:	2112      	movs	r1, #18
 8006918:	f7ff bf86 	b.w	8006828 <std>
 800691c:	2000033c 	.word	0x2000033c
 8006920:	20000204 	.word	0x20000204
 8006924:	08006895 	.word	0x08006895

08006928 <__sfp_lock_acquire>:
 8006928:	4801      	ldr	r0, [pc, #4]	; (8006930 <__sfp_lock_acquire+0x8>)
 800692a:	f000 ba14 	b.w	8006d56 <__retarget_lock_acquire_recursive>
 800692e:	bf00      	nop
 8006930:	20000345 	.word	0x20000345

08006934 <__sfp_lock_release>:
 8006934:	4801      	ldr	r0, [pc, #4]	; (800693c <__sfp_lock_release+0x8>)
 8006936:	f000 ba0f 	b.w	8006d58 <__retarget_lock_release_recursive>
 800693a:	bf00      	nop
 800693c:	20000345 	.word	0x20000345

08006940 <__sinit>:
 8006940:	b510      	push	{r4, lr}
 8006942:	4604      	mov	r4, r0
 8006944:	f7ff fff0 	bl	8006928 <__sfp_lock_acquire>
 8006948:	6a23      	ldr	r3, [r4, #32]
 800694a:	b11b      	cbz	r3, 8006954 <__sinit+0x14>
 800694c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006950:	f7ff bff0 	b.w	8006934 <__sfp_lock_release>
 8006954:	4b04      	ldr	r3, [pc, #16]	; (8006968 <__sinit+0x28>)
 8006956:	6223      	str	r3, [r4, #32]
 8006958:	4b04      	ldr	r3, [pc, #16]	; (800696c <__sinit+0x2c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1f5      	bne.n	800694c <__sinit+0xc>
 8006960:	f7ff ffc4 	bl	80068ec <global_stdio_init.part.0>
 8006964:	e7f2      	b.n	800694c <__sinit+0xc>
 8006966:	bf00      	nop
 8006968:	080068ad 	.word	0x080068ad
 800696c:	2000033c 	.word	0x2000033c

08006970 <_fwalk_sglue>:
 8006970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006974:	4607      	mov	r7, r0
 8006976:	4688      	mov	r8, r1
 8006978:	4614      	mov	r4, r2
 800697a:	2600      	movs	r6, #0
 800697c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006980:	f1b9 0901 	subs.w	r9, r9, #1
 8006984:	d505      	bpl.n	8006992 <_fwalk_sglue+0x22>
 8006986:	6824      	ldr	r4, [r4, #0]
 8006988:	2c00      	cmp	r4, #0
 800698a:	d1f7      	bne.n	800697c <_fwalk_sglue+0xc>
 800698c:	4630      	mov	r0, r6
 800698e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006992:	89ab      	ldrh	r3, [r5, #12]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d907      	bls.n	80069a8 <_fwalk_sglue+0x38>
 8006998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800699c:	3301      	adds	r3, #1
 800699e:	d003      	beq.n	80069a8 <_fwalk_sglue+0x38>
 80069a0:	4629      	mov	r1, r5
 80069a2:	4638      	mov	r0, r7
 80069a4:	47c0      	blx	r8
 80069a6:	4306      	orrs	r6, r0
 80069a8:	3568      	adds	r5, #104	; 0x68
 80069aa:	e7e9      	b.n	8006980 <_fwalk_sglue+0x10>

080069ac <putchar>:
 80069ac:	4b02      	ldr	r3, [pc, #8]	; (80069b8 <putchar+0xc>)
 80069ae:	4601      	mov	r1, r0
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	6882      	ldr	r2, [r0, #8]
 80069b4:	f000 bebd 	b.w	8007732 <_putc_r>
 80069b8:	20000068 	.word	0x20000068

080069bc <_puts_r>:
 80069bc:	6a03      	ldr	r3, [r0, #32]
 80069be:	b570      	push	{r4, r5, r6, lr}
 80069c0:	4605      	mov	r5, r0
 80069c2:	460e      	mov	r6, r1
 80069c4:	6884      	ldr	r4, [r0, #8]
 80069c6:	b90b      	cbnz	r3, 80069cc <_puts_r+0x10>
 80069c8:	f7ff ffba 	bl	8006940 <__sinit>
 80069cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069ce:	07db      	lsls	r3, r3, #31
 80069d0:	d405      	bmi.n	80069de <_puts_r+0x22>
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	0598      	lsls	r0, r3, #22
 80069d6:	d402      	bmi.n	80069de <_puts_r+0x22>
 80069d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069da:	f000 f9bc 	bl	8006d56 <__retarget_lock_acquire_recursive>
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	0719      	lsls	r1, r3, #28
 80069e2:	d513      	bpl.n	8006a0c <_puts_r+0x50>
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	b18b      	cbz	r3, 8006a0c <_puts_r+0x50>
 80069e8:	3e01      	subs	r6, #1
 80069ea:	68a3      	ldr	r3, [r4, #8]
 80069ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069f0:	3b01      	subs	r3, #1
 80069f2:	60a3      	str	r3, [r4, #8]
 80069f4:	b9e9      	cbnz	r1, 8006a32 <_puts_r+0x76>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da2e      	bge.n	8006a58 <_puts_r+0x9c>
 80069fa:	4622      	mov	r2, r4
 80069fc:	210a      	movs	r1, #10
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 f89b 	bl	8006b3a <__swbuf_r>
 8006a04:	3001      	adds	r0, #1
 8006a06:	d007      	beq.n	8006a18 <_puts_r+0x5c>
 8006a08:	250a      	movs	r5, #10
 8006a0a:	e007      	b.n	8006a1c <_puts_r+0x60>
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 f8d0 	bl	8006bb4 <__swsetup_r>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d0e7      	beq.n	80069e8 <_puts_r+0x2c>
 8006a18:	f04f 35ff 	mov.w	r5, #4294967295
 8006a1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a1e:	07da      	lsls	r2, r3, #31
 8006a20:	d405      	bmi.n	8006a2e <_puts_r+0x72>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	059b      	lsls	r3, r3, #22
 8006a26:	d402      	bmi.n	8006a2e <_puts_r+0x72>
 8006a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a2a:	f000 f995 	bl	8006d58 <__retarget_lock_release_recursive>
 8006a2e:	4628      	mov	r0, r5
 8006a30:	bd70      	pop	{r4, r5, r6, pc}
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da04      	bge.n	8006a40 <_puts_r+0x84>
 8006a36:	69a2      	ldr	r2, [r4, #24]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	dc06      	bgt.n	8006a4a <_puts_r+0x8e>
 8006a3c:	290a      	cmp	r1, #10
 8006a3e:	d004      	beq.n	8006a4a <_puts_r+0x8e>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	6022      	str	r2, [r4, #0]
 8006a46:	7019      	strb	r1, [r3, #0]
 8006a48:	e7cf      	b.n	80069ea <_puts_r+0x2e>
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 f874 	bl	8006b3a <__swbuf_r>
 8006a52:	3001      	adds	r0, #1
 8006a54:	d1c9      	bne.n	80069ea <_puts_r+0x2e>
 8006a56:	e7df      	b.n	8006a18 <_puts_r+0x5c>
 8006a58:	250a      	movs	r5, #10
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	6022      	str	r2, [r4, #0]
 8006a60:	701d      	strb	r5, [r3, #0]
 8006a62:	e7db      	b.n	8006a1c <_puts_r+0x60>

08006a64 <puts>:
 8006a64:	4b02      	ldr	r3, [pc, #8]	; (8006a70 <puts+0xc>)
 8006a66:	4601      	mov	r1, r0
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	f7ff bfa7 	b.w	80069bc <_puts_r>
 8006a6e:	bf00      	nop
 8006a70:	20000068 	.word	0x20000068

08006a74 <siprintf>:
 8006a74:	b40e      	push	{r1, r2, r3}
 8006a76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a7a:	b500      	push	{lr}
 8006a7c:	b09c      	sub	sp, #112	; 0x70
 8006a7e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a80:	9002      	str	r0, [sp, #8]
 8006a82:	9006      	str	r0, [sp, #24]
 8006a84:	9107      	str	r1, [sp, #28]
 8006a86:	9104      	str	r1, [sp, #16]
 8006a88:	4808      	ldr	r0, [pc, #32]	; (8006aac <siprintf+0x38>)
 8006a8a:	4909      	ldr	r1, [pc, #36]	; (8006ab0 <siprintf+0x3c>)
 8006a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a90:	9105      	str	r1, [sp, #20]
 8006a92:	6800      	ldr	r0, [r0, #0]
 8006a94:	a902      	add	r1, sp, #8
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	f000 faae 	bl	8006ff8 <_svfiprintf_r>
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	9b02      	ldr	r3, [sp, #8]
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	b01c      	add	sp, #112	; 0x70
 8006aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa8:	b003      	add	sp, #12
 8006aaa:	4770      	bx	lr
 8006aac:	20000068 	.word	0x20000068
 8006ab0:	ffff0208 	.word	0xffff0208

08006ab4 <__sread>:
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006abc:	f000 f8fc 	bl	8006cb8 <_read_r>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	bfab      	itete	ge
 8006ac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ac6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ac8:	181b      	addge	r3, r3, r0
 8006aca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ace:	bfac      	ite	ge
 8006ad0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ad2:	81a3      	strhlt	r3, [r4, #12]
 8006ad4:	bd10      	pop	{r4, pc}

08006ad6 <__swrite>:
 8006ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ada:	461f      	mov	r7, r3
 8006adc:	898b      	ldrh	r3, [r1, #12]
 8006ade:	4605      	mov	r5, r0
 8006ae0:	05db      	lsls	r3, r3, #23
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	d505      	bpl.n	8006af4 <__swrite+0x1e>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	2200      	movs	r2, #0
 8006aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af0:	f000 f8d0 	bl	8006c94 <_lseek_r>
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	4632      	mov	r2, r6
 8006af8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	4628      	mov	r0, r5
 8006b00:	463b      	mov	r3, r7
 8006b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0a:	f000 b8e7 	b.w	8006cdc <_write_r>

08006b0e <__sseek>:
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	460c      	mov	r4, r1
 8006b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b16:	f000 f8bd 	bl	8006c94 <_lseek_r>
 8006b1a:	1c43      	adds	r3, r0, #1
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	bf15      	itete	ne
 8006b20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b2a:	81a3      	strheq	r3, [r4, #12]
 8006b2c:	bf18      	it	ne
 8006b2e:	81a3      	strhne	r3, [r4, #12]
 8006b30:	bd10      	pop	{r4, pc}

08006b32 <__sclose>:
 8006b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b36:	f000 b89d 	b.w	8006c74 <_close_r>

08006b3a <__swbuf_r>:
 8006b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3c:	460e      	mov	r6, r1
 8006b3e:	4614      	mov	r4, r2
 8006b40:	4605      	mov	r5, r0
 8006b42:	b118      	cbz	r0, 8006b4c <__swbuf_r+0x12>
 8006b44:	6a03      	ldr	r3, [r0, #32]
 8006b46:	b90b      	cbnz	r3, 8006b4c <__swbuf_r+0x12>
 8006b48:	f7ff fefa 	bl	8006940 <__sinit>
 8006b4c:	69a3      	ldr	r3, [r4, #24]
 8006b4e:	60a3      	str	r3, [r4, #8]
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	071a      	lsls	r2, r3, #28
 8006b54:	d525      	bpl.n	8006ba2 <__swbuf_r+0x68>
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	b31b      	cbz	r3, 8006ba2 <__swbuf_r+0x68>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	b2f6      	uxtb	r6, r6
 8006b60:	1a98      	subs	r0, r3, r2
 8006b62:	6963      	ldr	r3, [r4, #20]
 8006b64:	4637      	mov	r7, r6
 8006b66:	4283      	cmp	r3, r0
 8006b68:	dc04      	bgt.n	8006b74 <__swbuf_r+0x3a>
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f000 fd57 	bl	8007620 <_fflush_r>
 8006b72:	b9e0      	cbnz	r0, 8006bae <__swbuf_r+0x74>
 8006b74:	68a3      	ldr	r3, [r4, #8]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	60a3      	str	r3, [r4, #8]
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	701e      	strb	r6, [r3, #0]
 8006b82:	6962      	ldr	r2, [r4, #20]
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d004      	beq.n	8006b94 <__swbuf_r+0x5a>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	07db      	lsls	r3, r3, #31
 8006b8e:	d506      	bpl.n	8006b9e <__swbuf_r+0x64>
 8006b90:	2e0a      	cmp	r6, #10
 8006b92:	d104      	bne.n	8006b9e <__swbuf_r+0x64>
 8006b94:	4621      	mov	r1, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 fd42 	bl	8007620 <_fflush_r>
 8006b9c:	b938      	cbnz	r0, 8006bae <__swbuf_r+0x74>
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 f805 	bl	8006bb4 <__swsetup_r>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d0d5      	beq.n	8006b5a <__swbuf_r+0x20>
 8006bae:	f04f 37ff 	mov.w	r7, #4294967295
 8006bb2:	e7f4      	b.n	8006b9e <__swbuf_r+0x64>

08006bb4 <__swsetup_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4b2a      	ldr	r3, [pc, #168]	; (8006c60 <__swsetup_r+0xac>)
 8006bb8:	4605      	mov	r5, r0
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	b118      	cbz	r0, 8006bc8 <__swsetup_r+0x14>
 8006bc0:	6a03      	ldr	r3, [r0, #32]
 8006bc2:	b90b      	cbnz	r3, 8006bc8 <__swsetup_r+0x14>
 8006bc4:	f7ff febc 	bl	8006940 <__sinit>
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bce:	0718      	lsls	r0, r3, #28
 8006bd0:	d422      	bmi.n	8006c18 <__swsetup_r+0x64>
 8006bd2:	06d9      	lsls	r1, r3, #27
 8006bd4:	d407      	bmi.n	8006be6 <__swsetup_r+0x32>
 8006bd6:	2309      	movs	r3, #9
 8006bd8:	602b      	str	r3, [r5, #0]
 8006bda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bde:	f04f 30ff 	mov.w	r0, #4294967295
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	e034      	b.n	8006c50 <__swsetup_r+0x9c>
 8006be6:	0758      	lsls	r0, r3, #29
 8006be8:	d512      	bpl.n	8006c10 <__swsetup_r+0x5c>
 8006bea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bec:	b141      	cbz	r1, 8006c00 <__swsetup_r+0x4c>
 8006bee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf2:	4299      	cmp	r1, r3
 8006bf4:	d002      	beq.n	8006bfc <__swsetup_r+0x48>
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 f8b0 	bl	8006d5c <_free_r>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	6363      	str	r3, [r4, #52]	; 0x34
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6063      	str	r3, [r4, #4]
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f043 0308 	orr.w	r3, r3, #8
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	b94b      	cbnz	r3, 8006c30 <__swsetup_r+0x7c>
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c26:	d003      	beq.n	8006c30 <__swsetup_r+0x7c>
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 fd45 	bl	80076ba <__smakebuf_r>
 8006c30:	89a0      	ldrh	r0, [r4, #12]
 8006c32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c36:	f010 0301 	ands.w	r3, r0, #1
 8006c3a:	d00a      	beq.n	8006c52 <__swsetup_r+0x9e>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60a3      	str	r3, [r4, #8]
 8006c40:	6963      	ldr	r3, [r4, #20]
 8006c42:	425b      	negs	r3, r3
 8006c44:	61a3      	str	r3, [r4, #24]
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	b943      	cbnz	r3, 8006c5c <__swsetup_r+0xa8>
 8006c4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c4e:	d1c4      	bne.n	8006bda <__swsetup_r+0x26>
 8006c50:	bd38      	pop	{r3, r4, r5, pc}
 8006c52:	0781      	lsls	r1, r0, #30
 8006c54:	bf58      	it	pl
 8006c56:	6963      	ldrpl	r3, [r4, #20]
 8006c58:	60a3      	str	r3, [r4, #8]
 8006c5a:	e7f4      	b.n	8006c46 <__swsetup_r+0x92>
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	e7f7      	b.n	8006c50 <__swsetup_r+0x9c>
 8006c60:	20000068 	.word	0x20000068

08006c64 <memset>:
 8006c64:	4603      	mov	r3, r0
 8006c66:	4402      	add	r2, r0
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d100      	bne.n	8006c6e <memset+0xa>
 8006c6c:	4770      	bx	lr
 8006c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c72:	e7f9      	b.n	8006c68 <memset+0x4>

08006c74 <_close_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	2300      	movs	r3, #0
 8006c78:	4d05      	ldr	r5, [pc, #20]	; (8006c90 <_close_r+0x1c>)
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	602b      	str	r3, [r5, #0]
 8006c80:	f7fd fc07 	bl	8004492 <_close>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d102      	bne.n	8006c8e <_close_r+0x1a>
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b103      	cbz	r3, 8006c8e <_close_r+0x1a>
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
 8006c90:	20000340 	.word	0x20000340

08006c94 <_lseek_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	4604      	mov	r4, r0
 8006c98:	4608      	mov	r0, r1
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4d05      	ldr	r5, [pc, #20]	; (8006cb4 <_lseek_r+0x20>)
 8006ca0:	602a      	str	r2, [r5, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f7fd fc19 	bl	80044da <_lseek>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_lseek_r+0x1e>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_lseek_r+0x1e>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	20000340 	.word	0x20000340

08006cb8 <_read_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4604      	mov	r4, r0
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	4d05      	ldr	r5, [pc, #20]	; (8006cd8 <_read_r+0x20>)
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f7fd fbaa 	bl	8004420 <_read>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_read_r+0x1e>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_read_r+0x1e>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20000340 	.word	0x20000340

08006cdc <_write_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4d05      	ldr	r5, [pc, #20]	; (8006cfc <_write_r+0x20>)
 8006ce8:	602a      	str	r2, [r5, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	f7fd fbb5 	bl	800445a <_write>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d102      	bne.n	8006cfa <_write_r+0x1e>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	b103      	cbz	r3, 8006cfa <_write_r+0x1e>
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
 8006cfc:	20000340 	.word	0x20000340

08006d00 <__errno>:
 8006d00:	4b01      	ldr	r3, [pc, #4]	; (8006d08 <__errno+0x8>)
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000068 	.word	0x20000068

08006d0c <__libc_init_array>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	2600      	movs	r6, #0
 8006d10:	4d0c      	ldr	r5, [pc, #48]	; (8006d44 <__libc_init_array+0x38>)
 8006d12:	4c0d      	ldr	r4, [pc, #52]	; (8006d48 <__libc_init_array+0x3c>)
 8006d14:	1b64      	subs	r4, r4, r5
 8006d16:	10a4      	asrs	r4, r4, #2
 8006d18:	42a6      	cmp	r6, r4
 8006d1a:	d109      	bne.n	8006d30 <__libc_init_array+0x24>
 8006d1c:	f000 fdde 	bl	80078dc <_init>
 8006d20:	2600      	movs	r6, #0
 8006d22:	4d0a      	ldr	r5, [pc, #40]	; (8006d4c <__libc_init_array+0x40>)
 8006d24:	4c0a      	ldr	r4, [pc, #40]	; (8006d50 <__libc_init_array+0x44>)
 8006d26:	1b64      	subs	r4, r4, r5
 8006d28:	10a4      	asrs	r4, r4, #2
 8006d2a:	42a6      	cmp	r6, r4
 8006d2c:	d105      	bne.n	8006d3a <__libc_init_array+0x2e>
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d34:	4798      	blx	r3
 8006d36:	3601      	adds	r6, #1
 8006d38:	e7ee      	b.n	8006d18 <__libc_init_array+0xc>
 8006d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3e:	4798      	blx	r3
 8006d40:	3601      	adds	r6, #1
 8006d42:	e7f2      	b.n	8006d2a <__libc_init_array+0x1e>
 8006d44:	0800a95c 	.word	0x0800a95c
 8006d48:	0800a95c 	.word	0x0800a95c
 8006d4c:	0800a95c 	.word	0x0800a95c
 8006d50:	0800a960 	.word	0x0800a960

08006d54 <__retarget_lock_init_recursive>:
 8006d54:	4770      	bx	lr

08006d56 <__retarget_lock_acquire_recursive>:
 8006d56:	4770      	bx	lr

08006d58 <__retarget_lock_release_recursive>:
 8006d58:	4770      	bx	lr
	...

08006d5c <_free_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4605      	mov	r5, r0
 8006d60:	2900      	cmp	r1, #0
 8006d62:	d040      	beq.n	8006de6 <_free_r+0x8a>
 8006d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d68:	1f0c      	subs	r4, r1, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bfb8      	it	lt
 8006d6e:	18e4      	addlt	r4, r4, r3
 8006d70:	f000 f8dc 	bl	8006f2c <__malloc_lock>
 8006d74:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <_free_r+0x8c>)
 8006d76:	6813      	ldr	r3, [r2, #0]
 8006d78:	b933      	cbnz	r3, 8006d88 <_free_r+0x2c>
 8006d7a:	6063      	str	r3, [r4, #4]
 8006d7c:	6014      	str	r4, [r2, #0]
 8006d7e:	4628      	mov	r0, r5
 8006d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d84:	f000 b8d8 	b.w	8006f38 <__malloc_unlock>
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	d908      	bls.n	8006d9e <_free_r+0x42>
 8006d8c:	6820      	ldr	r0, [r4, #0]
 8006d8e:	1821      	adds	r1, r4, r0
 8006d90:	428b      	cmp	r3, r1
 8006d92:	bf01      	itttt	eq
 8006d94:	6819      	ldreq	r1, [r3, #0]
 8006d96:	685b      	ldreq	r3, [r3, #4]
 8006d98:	1809      	addeq	r1, r1, r0
 8006d9a:	6021      	streq	r1, [r4, #0]
 8006d9c:	e7ed      	b.n	8006d7a <_free_r+0x1e>
 8006d9e:	461a      	mov	r2, r3
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	b10b      	cbz	r3, 8006da8 <_free_r+0x4c>
 8006da4:	42a3      	cmp	r3, r4
 8006da6:	d9fa      	bls.n	8006d9e <_free_r+0x42>
 8006da8:	6811      	ldr	r1, [r2, #0]
 8006daa:	1850      	adds	r0, r2, r1
 8006dac:	42a0      	cmp	r0, r4
 8006dae:	d10b      	bne.n	8006dc8 <_free_r+0x6c>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	4401      	add	r1, r0
 8006db4:	1850      	adds	r0, r2, r1
 8006db6:	4283      	cmp	r3, r0
 8006db8:	6011      	str	r1, [r2, #0]
 8006dba:	d1e0      	bne.n	8006d7e <_free_r+0x22>
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4408      	add	r0, r1
 8006dc2:	6010      	str	r0, [r2, #0]
 8006dc4:	6053      	str	r3, [r2, #4]
 8006dc6:	e7da      	b.n	8006d7e <_free_r+0x22>
 8006dc8:	d902      	bls.n	8006dd0 <_free_r+0x74>
 8006dca:	230c      	movs	r3, #12
 8006dcc:	602b      	str	r3, [r5, #0]
 8006dce:	e7d6      	b.n	8006d7e <_free_r+0x22>
 8006dd0:	6820      	ldr	r0, [r4, #0]
 8006dd2:	1821      	adds	r1, r4, r0
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	bf01      	itttt	eq
 8006dd8:	6819      	ldreq	r1, [r3, #0]
 8006dda:	685b      	ldreq	r3, [r3, #4]
 8006ddc:	1809      	addeq	r1, r1, r0
 8006dde:	6021      	streq	r1, [r4, #0]
 8006de0:	6063      	str	r3, [r4, #4]
 8006de2:	6054      	str	r4, [r2, #4]
 8006de4:	e7cb      	b.n	8006d7e <_free_r+0x22>
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	20000348 	.word	0x20000348

08006dec <sbrk_aligned>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	4e0e      	ldr	r6, [pc, #56]	; (8006e28 <sbrk_aligned+0x3c>)
 8006df0:	460c      	mov	r4, r1
 8006df2:	6831      	ldr	r1, [r6, #0]
 8006df4:	4605      	mov	r5, r0
 8006df6:	b911      	cbnz	r1, 8006dfe <sbrk_aligned+0x12>
 8006df8:	f000 fd0c 	bl	8007814 <_sbrk_r>
 8006dfc:	6030      	str	r0, [r6, #0]
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4628      	mov	r0, r5
 8006e02:	f000 fd07 	bl	8007814 <_sbrk_r>
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	d00a      	beq.n	8006e20 <sbrk_aligned+0x34>
 8006e0a:	1cc4      	adds	r4, r0, #3
 8006e0c:	f024 0403 	bic.w	r4, r4, #3
 8006e10:	42a0      	cmp	r0, r4
 8006e12:	d007      	beq.n	8006e24 <sbrk_aligned+0x38>
 8006e14:	1a21      	subs	r1, r4, r0
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 fcfc 	bl	8007814 <_sbrk_r>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d101      	bne.n	8006e24 <sbrk_aligned+0x38>
 8006e20:	f04f 34ff 	mov.w	r4, #4294967295
 8006e24:	4620      	mov	r0, r4
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	2000034c 	.word	0x2000034c

08006e2c <_malloc_r>:
 8006e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e30:	1ccd      	adds	r5, r1, #3
 8006e32:	f025 0503 	bic.w	r5, r5, #3
 8006e36:	3508      	adds	r5, #8
 8006e38:	2d0c      	cmp	r5, #12
 8006e3a:	bf38      	it	cc
 8006e3c:	250c      	movcc	r5, #12
 8006e3e:	2d00      	cmp	r5, #0
 8006e40:	4607      	mov	r7, r0
 8006e42:	db01      	blt.n	8006e48 <_malloc_r+0x1c>
 8006e44:	42a9      	cmp	r1, r5
 8006e46:	d905      	bls.n	8006e54 <_malloc_r+0x28>
 8006e48:	230c      	movs	r3, #12
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	603b      	str	r3, [r7, #0]
 8006e4e:	4630      	mov	r0, r6
 8006e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f28 <_malloc_r+0xfc>
 8006e58:	f000 f868 	bl	8006f2c <__malloc_lock>
 8006e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e60:	461c      	mov	r4, r3
 8006e62:	bb5c      	cbnz	r4, 8006ebc <_malloc_r+0x90>
 8006e64:	4629      	mov	r1, r5
 8006e66:	4638      	mov	r0, r7
 8006e68:	f7ff ffc0 	bl	8006dec <sbrk_aligned>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	4604      	mov	r4, r0
 8006e70:	d155      	bne.n	8006f1e <_malloc_r+0xf2>
 8006e72:	f8d8 4000 	ldr.w	r4, [r8]
 8006e76:	4626      	mov	r6, r4
 8006e78:	2e00      	cmp	r6, #0
 8006e7a:	d145      	bne.n	8006f08 <_malloc_r+0xdc>
 8006e7c:	2c00      	cmp	r4, #0
 8006e7e:	d048      	beq.n	8006f12 <_malloc_r+0xe6>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	4631      	mov	r1, r6
 8006e84:	4638      	mov	r0, r7
 8006e86:	eb04 0903 	add.w	r9, r4, r3
 8006e8a:	f000 fcc3 	bl	8007814 <_sbrk_r>
 8006e8e:	4581      	cmp	r9, r0
 8006e90:	d13f      	bne.n	8006f12 <_malloc_r+0xe6>
 8006e92:	6821      	ldr	r1, [r4, #0]
 8006e94:	4638      	mov	r0, r7
 8006e96:	1a6d      	subs	r5, r5, r1
 8006e98:	4629      	mov	r1, r5
 8006e9a:	f7ff ffa7 	bl	8006dec <sbrk_aligned>
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d037      	beq.n	8006f12 <_malloc_r+0xe6>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	442b      	add	r3, r5
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d038      	beq.n	8006f22 <_malloc_r+0xf6>
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	42a2      	cmp	r2, r4
 8006eb4:	d12b      	bne.n	8006f0e <_malloc_r+0xe2>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	e00f      	b.n	8006edc <_malloc_r+0xb0>
 8006ebc:	6822      	ldr	r2, [r4, #0]
 8006ebe:	1b52      	subs	r2, r2, r5
 8006ec0:	d41f      	bmi.n	8006f02 <_malloc_r+0xd6>
 8006ec2:	2a0b      	cmp	r2, #11
 8006ec4:	d917      	bls.n	8006ef6 <_malloc_r+0xca>
 8006ec6:	1961      	adds	r1, r4, r5
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	6025      	str	r5, [r4, #0]
 8006ecc:	bf18      	it	ne
 8006ece:	6059      	strne	r1, [r3, #4]
 8006ed0:	6863      	ldr	r3, [r4, #4]
 8006ed2:	bf08      	it	eq
 8006ed4:	f8c8 1000 	streq.w	r1, [r8]
 8006ed8:	5162      	str	r2, [r4, r5]
 8006eda:	604b      	str	r3, [r1, #4]
 8006edc:	4638      	mov	r0, r7
 8006ede:	f104 060b 	add.w	r6, r4, #11
 8006ee2:	f000 f829 	bl	8006f38 <__malloc_unlock>
 8006ee6:	f026 0607 	bic.w	r6, r6, #7
 8006eea:	1d23      	adds	r3, r4, #4
 8006eec:	1af2      	subs	r2, r6, r3
 8006eee:	d0ae      	beq.n	8006e4e <_malloc_r+0x22>
 8006ef0:	1b9b      	subs	r3, r3, r6
 8006ef2:	50a3      	str	r3, [r4, r2]
 8006ef4:	e7ab      	b.n	8006e4e <_malloc_r+0x22>
 8006ef6:	42a3      	cmp	r3, r4
 8006ef8:	6862      	ldr	r2, [r4, #4]
 8006efa:	d1dd      	bne.n	8006eb8 <_malloc_r+0x8c>
 8006efc:	f8c8 2000 	str.w	r2, [r8]
 8006f00:	e7ec      	b.n	8006edc <_malloc_r+0xb0>
 8006f02:	4623      	mov	r3, r4
 8006f04:	6864      	ldr	r4, [r4, #4]
 8006f06:	e7ac      	b.n	8006e62 <_malloc_r+0x36>
 8006f08:	4634      	mov	r4, r6
 8006f0a:	6876      	ldr	r6, [r6, #4]
 8006f0c:	e7b4      	b.n	8006e78 <_malloc_r+0x4c>
 8006f0e:	4613      	mov	r3, r2
 8006f10:	e7cc      	b.n	8006eac <_malloc_r+0x80>
 8006f12:	230c      	movs	r3, #12
 8006f14:	4638      	mov	r0, r7
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	f000 f80e 	bl	8006f38 <__malloc_unlock>
 8006f1c:	e797      	b.n	8006e4e <_malloc_r+0x22>
 8006f1e:	6025      	str	r5, [r4, #0]
 8006f20:	e7dc      	b.n	8006edc <_malloc_r+0xb0>
 8006f22:	605b      	str	r3, [r3, #4]
 8006f24:	deff      	udf	#255	; 0xff
 8006f26:	bf00      	nop
 8006f28:	20000348 	.word	0x20000348

08006f2c <__malloc_lock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__malloc_lock+0x8>)
 8006f2e:	f7ff bf12 	b.w	8006d56 <__retarget_lock_acquire_recursive>
 8006f32:	bf00      	nop
 8006f34:	20000344 	.word	0x20000344

08006f38 <__malloc_unlock>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__malloc_unlock+0x8>)
 8006f3a:	f7ff bf0d 	b.w	8006d58 <__retarget_lock_release_recursive>
 8006f3e:	bf00      	nop
 8006f40:	20000344 	.word	0x20000344

08006f44 <__ssputs_r>:
 8006f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	461f      	mov	r7, r3
 8006f4a:	688e      	ldr	r6, [r1, #8]
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	42be      	cmp	r6, r7
 8006f50:	460c      	mov	r4, r1
 8006f52:	4690      	mov	r8, r2
 8006f54:	680b      	ldr	r3, [r1, #0]
 8006f56:	d82c      	bhi.n	8006fb2 <__ssputs_r+0x6e>
 8006f58:	898a      	ldrh	r2, [r1, #12]
 8006f5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f5e:	d026      	beq.n	8006fae <__ssputs_r+0x6a>
 8006f60:	6965      	ldr	r5, [r4, #20]
 8006f62:	6909      	ldr	r1, [r1, #16]
 8006f64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f68:	eba3 0901 	sub.w	r9, r3, r1
 8006f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f70:	1c7b      	adds	r3, r7, #1
 8006f72:	444b      	add	r3, r9
 8006f74:	106d      	asrs	r5, r5, #1
 8006f76:	429d      	cmp	r5, r3
 8006f78:	bf38      	it	cc
 8006f7a:	461d      	movcc	r5, r3
 8006f7c:	0553      	lsls	r3, r2, #21
 8006f7e:	d527      	bpl.n	8006fd0 <__ssputs_r+0x8c>
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7ff ff53 	bl	8006e2c <_malloc_r>
 8006f86:	4606      	mov	r6, r0
 8006f88:	b360      	cbz	r0, 8006fe4 <__ssputs_r+0xa0>
 8006f8a:	464a      	mov	r2, r9
 8006f8c:	6921      	ldr	r1, [r4, #16]
 8006f8e:	f000 fc5f 	bl	8007850 <memcpy>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f9c:	81a3      	strh	r3, [r4, #12]
 8006f9e:	6126      	str	r6, [r4, #16]
 8006fa0:	444e      	add	r6, r9
 8006fa2:	6026      	str	r6, [r4, #0]
 8006fa4:	463e      	mov	r6, r7
 8006fa6:	6165      	str	r5, [r4, #20]
 8006fa8:	eba5 0509 	sub.w	r5, r5, r9
 8006fac:	60a5      	str	r5, [r4, #8]
 8006fae:	42be      	cmp	r6, r7
 8006fb0:	d900      	bls.n	8006fb4 <__ssputs_r+0x70>
 8006fb2:	463e      	mov	r6, r7
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4641      	mov	r1, r8
 8006fb8:	6820      	ldr	r0, [r4, #0]
 8006fba:	f000 fbee 	bl	800779a <memmove>
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	68a3      	ldr	r3, [r4, #8]
 8006fc2:	1b9b      	subs	r3, r3, r6
 8006fc4:	60a3      	str	r3, [r4, #8]
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	4433      	add	r3, r6
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd0:	462a      	mov	r2, r5
 8006fd2:	f000 fc4b 	bl	800786c <_realloc_r>
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d1e0      	bne.n	8006f9e <__ssputs_r+0x5a>
 8006fdc:	4650      	mov	r0, sl
 8006fde:	6921      	ldr	r1, [r4, #16]
 8006fe0:	f7ff febc 	bl	8006d5c <_free_r>
 8006fe4:	230c      	movs	r3, #12
 8006fe6:	f8ca 3000 	str.w	r3, [sl]
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	e7e9      	b.n	8006fcc <__ssputs_r+0x88>

08006ff8 <_svfiprintf_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	4698      	mov	r8, r3
 8006ffe:	898b      	ldrh	r3, [r1, #12]
 8007000:	4607      	mov	r7, r0
 8007002:	061b      	lsls	r3, r3, #24
 8007004:	460d      	mov	r5, r1
 8007006:	4614      	mov	r4, r2
 8007008:	b09d      	sub	sp, #116	; 0x74
 800700a:	d50e      	bpl.n	800702a <_svfiprintf_r+0x32>
 800700c:	690b      	ldr	r3, [r1, #16]
 800700e:	b963      	cbnz	r3, 800702a <_svfiprintf_r+0x32>
 8007010:	2140      	movs	r1, #64	; 0x40
 8007012:	f7ff ff0b 	bl	8006e2c <_malloc_r>
 8007016:	6028      	str	r0, [r5, #0]
 8007018:	6128      	str	r0, [r5, #16]
 800701a:	b920      	cbnz	r0, 8007026 <_svfiprintf_r+0x2e>
 800701c:	230c      	movs	r3, #12
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	e0d0      	b.n	80071c8 <_svfiprintf_r+0x1d0>
 8007026:	2340      	movs	r3, #64	; 0x40
 8007028:	616b      	str	r3, [r5, #20]
 800702a:	2300      	movs	r3, #0
 800702c:	9309      	str	r3, [sp, #36]	; 0x24
 800702e:	2320      	movs	r3, #32
 8007030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007034:	2330      	movs	r3, #48	; 0x30
 8007036:	f04f 0901 	mov.w	r9, #1
 800703a:	f8cd 800c 	str.w	r8, [sp, #12]
 800703e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80071e0 <_svfiprintf_r+0x1e8>
 8007042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007046:	4623      	mov	r3, r4
 8007048:	469a      	mov	sl, r3
 800704a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800704e:	b10a      	cbz	r2, 8007054 <_svfiprintf_r+0x5c>
 8007050:	2a25      	cmp	r2, #37	; 0x25
 8007052:	d1f9      	bne.n	8007048 <_svfiprintf_r+0x50>
 8007054:	ebba 0b04 	subs.w	fp, sl, r4
 8007058:	d00b      	beq.n	8007072 <_svfiprintf_r+0x7a>
 800705a:	465b      	mov	r3, fp
 800705c:	4622      	mov	r2, r4
 800705e:	4629      	mov	r1, r5
 8007060:	4638      	mov	r0, r7
 8007062:	f7ff ff6f 	bl	8006f44 <__ssputs_r>
 8007066:	3001      	adds	r0, #1
 8007068:	f000 80a9 	beq.w	80071be <_svfiprintf_r+0x1c6>
 800706c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800706e:	445a      	add	r2, fp
 8007070:	9209      	str	r2, [sp, #36]	; 0x24
 8007072:	f89a 3000 	ldrb.w	r3, [sl]
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80a1 	beq.w	80071be <_svfiprintf_r+0x1c6>
 800707c:	2300      	movs	r3, #0
 800707e:	f04f 32ff 	mov.w	r2, #4294967295
 8007082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007086:	f10a 0a01 	add.w	sl, sl, #1
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	9307      	str	r3, [sp, #28]
 800708e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007092:	931a      	str	r3, [sp, #104]	; 0x68
 8007094:	4654      	mov	r4, sl
 8007096:	2205      	movs	r2, #5
 8007098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800709c:	4850      	ldr	r0, [pc, #320]	; (80071e0 <_svfiprintf_r+0x1e8>)
 800709e:	f000 fbc9 	bl	8007834 <memchr>
 80070a2:	9a04      	ldr	r2, [sp, #16]
 80070a4:	b9d8      	cbnz	r0, 80070de <_svfiprintf_r+0xe6>
 80070a6:	06d0      	lsls	r0, r2, #27
 80070a8:	bf44      	itt	mi
 80070aa:	2320      	movmi	r3, #32
 80070ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b0:	0711      	lsls	r1, r2, #28
 80070b2:	bf44      	itt	mi
 80070b4:	232b      	movmi	r3, #43	; 0x2b
 80070b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ba:	f89a 3000 	ldrb.w	r3, [sl]
 80070be:	2b2a      	cmp	r3, #42	; 0x2a
 80070c0:	d015      	beq.n	80070ee <_svfiprintf_r+0xf6>
 80070c2:	4654      	mov	r4, sl
 80070c4:	2000      	movs	r0, #0
 80070c6:	f04f 0c0a 	mov.w	ip, #10
 80070ca:	9a07      	ldr	r2, [sp, #28]
 80070cc:	4621      	mov	r1, r4
 80070ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070d2:	3b30      	subs	r3, #48	; 0x30
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	d94d      	bls.n	8007174 <_svfiprintf_r+0x17c>
 80070d8:	b1b0      	cbz	r0, 8007108 <_svfiprintf_r+0x110>
 80070da:	9207      	str	r2, [sp, #28]
 80070dc:	e014      	b.n	8007108 <_svfiprintf_r+0x110>
 80070de:	eba0 0308 	sub.w	r3, r0, r8
 80070e2:	fa09 f303 	lsl.w	r3, r9, r3
 80070e6:	4313      	orrs	r3, r2
 80070e8:	46a2      	mov	sl, r4
 80070ea:	9304      	str	r3, [sp, #16]
 80070ec:	e7d2      	b.n	8007094 <_svfiprintf_r+0x9c>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	1d19      	adds	r1, r3, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	9103      	str	r1, [sp, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfbb      	ittet	lt
 80070fa:	425b      	neglt	r3, r3
 80070fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007100:	9307      	strge	r3, [sp, #28]
 8007102:	9307      	strlt	r3, [sp, #28]
 8007104:	bfb8      	it	lt
 8007106:	9204      	strlt	r2, [sp, #16]
 8007108:	7823      	ldrb	r3, [r4, #0]
 800710a:	2b2e      	cmp	r3, #46	; 0x2e
 800710c:	d10c      	bne.n	8007128 <_svfiprintf_r+0x130>
 800710e:	7863      	ldrb	r3, [r4, #1]
 8007110:	2b2a      	cmp	r3, #42	; 0x2a
 8007112:	d134      	bne.n	800717e <_svfiprintf_r+0x186>
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	3402      	adds	r4, #2
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	9203      	str	r2, [sp, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfb8      	it	lt
 8007122:	f04f 33ff 	movlt.w	r3, #4294967295
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80071e4 <_svfiprintf_r+0x1ec>
 800712c:	2203      	movs	r2, #3
 800712e:	4650      	mov	r0, sl
 8007130:	7821      	ldrb	r1, [r4, #0]
 8007132:	f000 fb7f 	bl	8007834 <memchr>
 8007136:	b138      	cbz	r0, 8007148 <_svfiprintf_r+0x150>
 8007138:	2240      	movs	r2, #64	; 0x40
 800713a:	9b04      	ldr	r3, [sp, #16]
 800713c:	eba0 000a 	sub.w	r0, r0, sl
 8007140:	4082      	lsls	r2, r0
 8007142:	4313      	orrs	r3, r2
 8007144:	3401      	adds	r4, #1
 8007146:	9304      	str	r3, [sp, #16]
 8007148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800714c:	2206      	movs	r2, #6
 800714e:	4826      	ldr	r0, [pc, #152]	; (80071e8 <_svfiprintf_r+0x1f0>)
 8007150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007154:	f000 fb6e 	bl	8007834 <memchr>
 8007158:	2800      	cmp	r0, #0
 800715a:	d038      	beq.n	80071ce <_svfiprintf_r+0x1d6>
 800715c:	4b23      	ldr	r3, [pc, #140]	; (80071ec <_svfiprintf_r+0x1f4>)
 800715e:	bb1b      	cbnz	r3, 80071a8 <_svfiprintf_r+0x1b0>
 8007160:	9b03      	ldr	r3, [sp, #12]
 8007162:	3307      	adds	r3, #7
 8007164:	f023 0307 	bic.w	r3, r3, #7
 8007168:	3308      	adds	r3, #8
 800716a:	9303      	str	r3, [sp, #12]
 800716c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716e:	4433      	add	r3, r6
 8007170:	9309      	str	r3, [sp, #36]	; 0x24
 8007172:	e768      	b.n	8007046 <_svfiprintf_r+0x4e>
 8007174:	460c      	mov	r4, r1
 8007176:	2001      	movs	r0, #1
 8007178:	fb0c 3202 	mla	r2, ip, r2, r3
 800717c:	e7a6      	b.n	80070cc <_svfiprintf_r+0xd4>
 800717e:	2300      	movs	r3, #0
 8007180:	f04f 0c0a 	mov.w	ip, #10
 8007184:	4619      	mov	r1, r3
 8007186:	3401      	adds	r4, #1
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	4620      	mov	r0, r4
 800718c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007190:	3a30      	subs	r2, #48	; 0x30
 8007192:	2a09      	cmp	r2, #9
 8007194:	d903      	bls.n	800719e <_svfiprintf_r+0x1a6>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0c6      	beq.n	8007128 <_svfiprintf_r+0x130>
 800719a:	9105      	str	r1, [sp, #20]
 800719c:	e7c4      	b.n	8007128 <_svfiprintf_r+0x130>
 800719e:	4604      	mov	r4, r0
 80071a0:	2301      	movs	r3, #1
 80071a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80071a6:	e7f0      	b.n	800718a <_svfiprintf_r+0x192>
 80071a8:	ab03      	add	r3, sp, #12
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	462a      	mov	r2, r5
 80071ae:	4638      	mov	r0, r7
 80071b0:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <_svfiprintf_r+0x1f8>)
 80071b2:	a904      	add	r1, sp, #16
 80071b4:	f3af 8000 	nop.w
 80071b8:	1c42      	adds	r2, r0, #1
 80071ba:	4606      	mov	r6, r0
 80071bc:	d1d6      	bne.n	800716c <_svfiprintf_r+0x174>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	065b      	lsls	r3, r3, #25
 80071c2:	f53f af2d 	bmi.w	8007020 <_svfiprintf_r+0x28>
 80071c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071c8:	b01d      	add	sp, #116	; 0x74
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	ab03      	add	r3, sp, #12
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	462a      	mov	r2, r5
 80071d4:	4638      	mov	r0, r7
 80071d6:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <_svfiprintf_r+0x1f8>)
 80071d8:	a904      	add	r1, sp, #16
 80071da:	f000 f87d 	bl	80072d8 <_printf_i>
 80071de:	e7eb      	b.n	80071b8 <_svfiprintf_r+0x1c0>
 80071e0:	0800a926 	.word	0x0800a926
 80071e4:	0800a92c 	.word	0x0800a92c
 80071e8:	0800a930 	.word	0x0800a930
 80071ec:	00000000 	.word	0x00000000
 80071f0:	08006f45 	.word	0x08006f45

080071f4 <_printf_common>:
 80071f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	4616      	mov	r6, r2
 80071fa:	4699      	mov	r9, r3
 80071fc:	688a      	ldr	r2, [r1, #8]
 80071fe:	690b      	ldr	r3, [r1, #16]
 8007200:	4607      	mov	r7, r0
 8007202:	4293      	cmp	r3, r2
 8007204:	bfb8      	it	lt
 8007206:	4613      	movlt	r3, r2
 8007208:	6033      	str	r3, [r6, #0]
 800720a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800720e:	460c      	mov	r4, r1
 8007210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007214:	b10a      	cbz	r2, 800721a <_printf_common+0x26>
 8007216:	3301      	adds	r3, #1
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	0699      	lsls	r1, r3, #26
 800721e:	bf42      	ittt	mi
 8007220:	6833      	ldrmi	r3, [r6, #0]
 8007222:	3302      	addmi	r3, #2
 8007224:	6033      	strmi	r3, [r6, #0]
 8007226:	6825      	ldr	r5, [r4, #0]
 8007228:	f015 0506 	ands.w	r5, r5, #6
 800722c:	d106      	bne.n	800723c <_printf_common+0x48>
 800722e:	f104 0a19 	add.w	sl, r4, #25
 8007232:	68e3      	ldr	r3, [r4, #12]
 8007234:	6832      	ldr	r2, [r6, #0]
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	42ab      	cmp	r3, r5
 800723a:	dc2b      	bgt.n	8007294 <_printf_common+0xa0>
 800723c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007240:	1e13      	subs	r3, r2, #0
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	bf18      	it	ne
 8007246:	2301      	movne	r3, #1
 8007248:	0692      	lsls	r2, r2, #26
 800724a:	d430      	bmi.n	80072ae <_printf_common+0xba>
 800724c:	4649      	mov	r1, r9
 800724e:	4638      	mov	r0, r7
 8007250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007254:	47c0      	blx	r8
 8007256:	3001      	adds	r0, #1
 8007258:	d023      	beq.n	80072a2 <_printf_common+0xae>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	6922      	ldr	r2, [r4, #16]
 800725e:	f003 0306 	and.w	r3, r3, #6
 8007262:	2b04      	cmp	r3, #4
 8007264:	bf14      	ite	ne
 8007266:	2500      	movne	r5, #0
 8007268:	6833      	ldreq	r3, [r6, #0]
 800726a:	f04f 0600 	mov.w	r6, #0
 800726e:	bf08      	it	eq
 8007270:	68e5      	ldreq	r5, [r4, #12]
 8007272:	f104 041a 	add.w	r4, r4, #26
 8007276:	bf08      	it	eq
 8007278:	1aed      	subeq	r5, r5, r3
 800727a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800727e:	bf08      	it	eq
 8007280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007284:	4293      	cmp	r3, r2
 8007286:	bfc4      	itt	gt
 8007288:	1a9b      	subgt	r3, r3, r2
 800728a:	18ed      	addgt	r5, r5, r3
 800728c:	42b5      	cmp	r5, r6
 800728e:	d11a      	bne.n	80072c6 <_printf_common+0xd2>
 8007290:	2000      	movs	r0, #0
 8007292:	e008      	b.n	80072a6 <_printf_common+0xb2>
 8007294:	2301      	movs	r3, #1
 8007296:	4652      	mov	r2, sl
 8007298:	4649      	mov	r1, r9
 800729a:	4638      	mov	r0, r7
 800729c:	47c0      	blx	r8
 800729e:	3001      	adds	r0, #1
 80072a0:	d103      	bne.n	80072aa <_printf_common+0xb6>
 80072a2:	f04f 30ff 	mov.w	r0, #4294967295
 80072a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072aa:	3501      	adds	r5, #1
 80072ac:	e7c1      	b.n	8007232 <_printf_common+0x3e>
 80072ae:	2030      	movs	r0, #48	; 0x30
 80072b0:	18e1      	adds	r1, r4, r3
 80072b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072bc:	4422      	add	r2, r4
 80072be:	3302      	adds	r3, #2
 80072c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072c4:	e7c2      	b.n	800724c <_printf_common+0x58>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4622      	mov	r2, r4
 80072ca:	4649      	mov	r1, r9
 80072cc:	4638      	mov	r0, r7
 80072ce:	47c0      	blx	r8
 80072d0:	3001      	adds	r0, #1
 80072d2:	d0e6      	beq.n	80072a2 <_printf_common+0xae>
 80072d4:	3601      	adds	r6, #1
 80072d6:	e7d9      	b.n	800728c <_printf_common+0x98>

080072d8 <_printf_i>:
 80072d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	7e0f      	ldrb	r7, [r1, #24]
 80072de:	4691      	mov	r9, r2
 80072e0:	2f78      	cmp	r7, #120	; 0x78
 80072e2:	4680      	mov	r8, r0
 80072e4:	460c      	mov	r4, r1
 80072e6:	469a      	mov	sl, r3
 80072e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072ee:	d807      	bhi.n	8007300 <_printf_i+0x28>
 80072f0:	2f62      	cmp	r7, #98	; 0x62
 80072f2:	d80a      	bhi.n	800730a <_printf_i+0x32>
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	f000 80d5 	beq.w	80074a4 <_printf_i+0x1cc>
 80072fa:	2f58      	cmp	r7, #88	; 0x58
 80072fc:	f000 80c1 	beq.w	8007482 <_printf_i+0x1aa>
 8007300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007308:	e03a      	b.n	8007380 <_printf_i+0xa8>
 800730a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800730e:	2b15      	cmp	r3, #21
 8007310:	d8f6      	bhi.n	8007300 <_printf_i+0x28>
 8007312:	a101      	add	r1, pc, #4	; (adr r1, 8007318 <_printf_i+0x40>)
 8007314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007318:	08007371 	.word	0x08007371
 800731c:	08007385 	.word	0x08007385
 8007320:	08007301 	.word	0x08007301
 8007324:	08007301 	.word	0x08007301
 8007328:	08007301 	.word	0x08007301
 800732c:	08007301 	.word	0x08007301
 8007330:	08007385 	.word	0x08007385
 8007334:	08007301 	.word	0x08007301
 8007338:	08007301 	.word	0x08007301
 800733c:	08007301 	.word	0x08007301
 8007340:	08007301 	.word	0x08007301
 8007344:	0800748b 	.word	0x0800748b
 8007348:	080073b1 	.word	0x080073b1
 800734c:	08007445 	.word	0x08007445
 8007350:	08007301 	.word	0x08007301
 8007354:	08007301 	.word	0x08007301
 8007358:	080074ad 	.word	0x080074ad
 800735c:	08007301 	.word	0x08007301
 8007360:	080073b1 	.word	0x080073b1
 8007364:	08007301 	.word	0x08007301
 8007368:	08007301 	.word	0x08007301
 800736c:	0800744d 	.word	0x0800744d
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	1d1a      	adds	r2, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	602a      	str	r2, [r5, #0]
 8007378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800737c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007380:	2301      	movs	r3, #1
 8007382:	e0a0      	b.n	80074c6 <_printf_i+0x1ee>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	682b      	ldr	r3, [r5, #0]
 8007388:	0607      	lsls	r7, r0, #24
 800738a:	f103 0104 	add.w	r1, r3, #4
 800738e:	6029      	str	r1, [r5, #0]
 8007390:	d501      	bpl.n	8007396 <_printf_i+0xbe>
 8007392:	681e      	ldr	r6, [r3, #0]
 8007394:	e003      	b.n	800739e <_printf_i+0xc6>
 8007396:	0646      	lsls	r6, r0, #25
 8007398:	d5fb      	bpl.n	8007392 <_printf_i+0xba>
 800739a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800739e:	2e00      	cmp	r6, #0
 80073a0:	da03      	bge.n	80073aa <_printf_i+0xd2>
 80073a2:	232d      	movs	r3, #45	; 0x2d
 80073a4:	4276      	negs	r6, r6
 80073a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073aa:	230a      	movs	r3, #10
 80073ac:	4859      	ldr	r0, [pc, #356]	; (8007514 <_printf_i+0x23c>)
 80073ae:	e012      	b.n	80073d6 <_printf_i+0xfe>
 80073b0:	682b      	ldr	r3, [r5, #0]
 80073b2:	6820      	ldr	r0, [r4, #0]
 80073b4:	1d19      	adds	r1, r3, #4
 80073b6:	6029      	str	r1, [r5, #0]
 80073b8:	0605      	lsls	r5, r0, #24
 80073ba:	d501      	bpl.n	80073c0 <_printf_i+0xe8>
 80073bc:	681e      	ldr	r6, [r3, #0]
 80073be:	e002      	b.n	80073c6 <_printf_i+0xee>
 80073c0:	0641      	lsls	r1, r0, #25
 80073c2:	d5fb      	bpl.n	80073bc <_printf_i+0xe4>
 80073c4:	881e      	ldrh	r6, [r3, #0]
 80073c6:	2f6f      	cmp	r7, #111	; 0x6f
 80073c8:	bf0c      	ite	eq
 80073ca:	2308      	moveq	r3, #8
 80073cc:	230a      	movne	r3, #10
 80073ce:	4851      	ldr	r0, [pc, #324]	; (8007514 <_printf_i+0x23c>)
 80073d0:	2100      	movs	r1, #0
 80073d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073d6:	6865      	ldr	r5, [r4, #4]
 80073d8:	2d00      	cmp	r5, #0
 80073da:	bfa8      	it	ge
 80073dc:	6821      	ldrge	r1, [r4, #0]
 80073de:	60a5      	str	r5, [r4, #8]
 80073e0:	bfa4      	itt	ge
 80073e2:	f021 0104 	bicge.w	r1, r1, #4
 80073e6:	6021      	strge	r1, [r4, #0]
 80073e8:	b90e      	cbnz	r6, 80073ee <_printf_i+0x116>
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	d04b      	beq.n	8007486 <_printf_i+0x1ae>
 80073ee:	4615      	mov	r5, r2
 80073f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80073f4:	fb03 6711 	mls	r7, r3, r1, r6
 80073f8:	5dc7      	ldrb	r7, [r0, r7]
 80073fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073fe:	4637      	mov	r7, r6
 8007400:	42bb      	cmp	r3, r7
 8007402:	460e      	mov	r6, r1
 8007404:	d9f4      	bls.n	80073f0 <_printf_i+0x118>
 8007406:	2b08      	cmp	r3, #8
 8007408:	d10b      	bne.n	8007422 <_printf_i+0x14a>
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	07de      	lsls	r6, r3, #31
 800740e:	d508      	bpl.n	8007422 <_printf_i+0x14a>
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	6861      	ldr	r1, [r4, #4]
 8007414:	4299      	cmp	r1, r3
 8007416:	bfde      	ittt	le
 8007418:	2330      	movle	r3, #48	; 0x30
 800741a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800741e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007422:	1b52      	subs	r2, r2, r5
 8007424:	6122      	str	r2, [r4, #16]
 8007426:	464b      	mov	r3, r9
 8007428:	4621      	mov	r1, r4
 800742a:	4640      	mov	r0, r8
 800742c:	f8cd a000 	str.w	sl, [sp]
 8007430:	aa03      	add	r2, sp, #12
 8007432:	f7ff fedf 	bl	80071f4 <_printf_common>
 8007436:	3001      	adds	r0, #1
 8007438:	d14a      	bne.n	80074d0 <_printf_i+0x1f8>
 800743a:	f04f 30ff 	mov.w	r0, #4294967295
 800743e:	b004      	add	sp, #16
 8007440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	f043 0320 	orr.w	r3, r3, #32
 800744a:	6023      	str	r3, [r4, #0]
 800744c:	2778      	movs	r7, #120	; 0x78
 800744e:	4832      	ldr	r0, [pc, #200]	; (8007518 <_printf_i+0x240>)
 8007450:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	6829      	ldr	r1, [r5, #0]
 8007458:	061f      	lsls	r7, r3, #24
 800745a:	f851 6b04 	ldr.w	r6, [r1], #4
 800745e:	d402      	bmi.n	8007466 <_printf_i+0x18e>
 8007460:	065f      	lsls	r7, r3, #25
 8007462:	bf48      	it	mi
 8007464:	b2b6      	uxthmi	r6, r6
 8007466:	07df      	lsls	r7, r3, #31
 8007468:	bf48      	it	mi
 800746a:	f043 0320 	orrmi.w	r3, r3, #32
 800746e:	6029      	str	r1, [r5, #0]
 8007470:	bf48      	it	mi
 8007472:	6023      	strmi	r3, [r4, #0]
 8007474:	b91e      	cbnz	r6, 800747e <_printf_i+0x1a6>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	f023 0320 	bic.w	r3, r3, #32
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	2310      	movs	r3, #16
 8007480:	e7a6      	b.n	80073d0 <_printf_i+0xf8>
 8007482:	4824      	ldr	r0, [pc, #144]	; (8007514 <_printf_i+0x23c>)
 8007484:	e7e4      	b.n	8007450 <_printf_i+0x178>
 8007486:	4615      	mov	r5, r2
 8007488:	e7bd      	b.n	8007406 <_printf_i+0x12e>
 800748a:	682b      	ldr	r3, [r5, #0]
 800748c:	6826      	ldr	r6, [r4, #0]
 800748e:	1d18      	adds	r0, r3, #4
 8007490:	6961      	ldr	r1, [r4, #20]
 8007492:	6028      	str	r0, [r5, #0]
 8007494:	0635      	lsls	r5, r6, #24
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	d501      	bpl.n	800749e <_printf_i+0x1c6>
 800749a:	6019      	str	r1, [r3, #0]
 800749c:	e002      	b.n	80074a4 <_printf_i+0x1cc>
 800749e:	0670      	lsls	r0, r6, #25
 80074a0:	d5fb      	bpl.n	800749a <_printf_i+0x1c2>
 80074a2:	8019      	strh	r1, [r3, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	4615      	mov	r5, r2
 80074a8:	6123      	str	r3, [r4, #16]
 80074aa:	e7bc      	b.n	8007426 <_printf_i+0x14e>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	2100      	movs	r1, #0
 80074b0:	1d1a      	adds	r2, r3, #4
 80074b2:	602a      	str	r2, [r5, #0]
 80074b4:	681d      	ldr	r5, [r3, #0]
 80074b6:	6862      	ldr	r2, [r4, #4]
 80074b8:	4628      	mov	r0, r5
 80074ba:	f000 f9bb 	bl	8007834 <memchr>
 80074be:	b108      	cbz	r0, 80074c4 <_printf_i+0x1ec>
 80074c0:	1b40      	subs	r0, r0, r5
 80074c2:	6060      	str	r0, [r4, #4]
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	6123      	str	r3, [r4, #16]
 80074c8:	2300      	movs	r3, #0
 80074ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ce:	e7aa      	b.n	8007426 <_printf_i+0x14e>
 80074d0:	462a      	mov	r2, r5
 80074d2:	4649      	mov	r1, r9
 80074d4:	4640      	mov	r0, r8
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	47d0      	blx	sl
 80074da:	3001      	adds	r0, #1
 80074dc:	d0ad      	beq.n	800743a <_printf_i+0x162>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	079b      	lsls	r3, r3, #30
 80074e2:	d413      	bmi.n	800750c <_printf_i+0x234>
 80074e4:	68e0      	ldr	r0, [r4, #12]
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	4298      	cmp	r0, r3
 80074ea:	bfb8      	it	lt
 80074ec:	4618      	movlt	r0, r3
 80074ee:	e7a6      	b.n	800743e <_printf_i+0x166>
 80074f0:	2301      	movs	r3, #1
 80074f2:	4632      	mov	r2, r6
 80074f4:	4649      	mov	r1, r9
 80074f6:	4640      	mov	r0, r8
 80074f8:	47d0      	blx	sl
 80074fa:	3001      	adds	r0, #1
 80074fc:	d09d      	beq.n	800743a <_printf_i+0x162>
 80074fe:	3501      	adds	r5, #1
 8007500:	68e3      	ldr	r3, [r4, #12]
 8007502:	9903      	ldr	r1, [sp, #12]
 8007504:	1a5b      	subs	r3, r3, r1
 8007506:	42ab      	cmp	r3, r5
 8007508:	dcf2      	bgt.n	80074f0 <_printf_i+0x218>
 800750a:	e7eb      	b.n	80074e4 <_printf_i+0x20c>
 800750c:	2500      	movs	r5, #0
 800750e:	f104 0619 	add.w	r6, r4, #25
 8007512:	e7f5      	b.n	8007500 <_printf_i+0x228>
 8007514:	0800a937 	.word	0x0800a937
 8007518:	0800a948 	.word	0x0800a948

0800751c <__sflush_r>:
 800751c:	898a      	ldrh	r2, [r1, #12]
 800751e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007520:	4605      	mov	r5, r0
 8007522:	0710      	lsls	r0, r2, #28
 8007524:	460c      	mov	r4, r1
 8007526:	d457      	bmi.n	80075d8 <__sflush_r+0xbc>
 8007528:	684b      	ldr	r3, [r1, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	dc04      	bgt.n	8007538 <__sflush_r+0x1c>
 800752e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	dc01      	bgt.n	8007538 <__sflush_r+0x1c>
 8007534:	2000      	movs	r0, #0
 8007536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800753a:	2e00      	cmp	r6, #0
 800753c:	d0fa      	beq.n	8007534 <__sflush_r+0x18>
 800753e:	2300      	movs	r3, #0
 8007540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007544:	682f      	ldr	r7, [r5, #0]
 8007546:	6a21      	ldr	r1, [r4, #32]
 8007548:	602b      	str	r3, [r5, #0]
 800754a:	d032      	beq.n	80075b2 <__sflush_r+0x96>
 800754c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	075a      	lsls	r2, r3, #29
 8007552:	d505      	bpl.n	8007560 <__sflush_r+0x44>
 8007554:	6863      	ldr	r3, [r4, #4]
 8007556:	1ac0      	subs	r0, r0, r3
 8007558:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800755a:	b10b      	cbz	r3, 8007560 <__sflush_r+0x44>
 800755c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800755e:	1ac0      	subs	r0, r0, r3
 8007560:	2300      	movs	r3, #0
 8007562:	4602      	mov	r2, r0
 8007564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007566:	4628      	mov	r0, r5
 8007568:	6a21      	ldr	r1, [r4, #32]
 800756a:	47b0      	blx	r6
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	d106      	bne.n	8007580 <__sflush_r+0x64>
 8007572:	6829      	ldr	r1, [r5, #0]
 8007574:	291d      	cmp	r1, #29
 8007576:	d82b      	bhi.n	80075d0 <__sflush_r+0xb4>
 8007578:	4a28      	ldr	r2, [pc, #160]	; (800761c <__sflush_r+0x100>)
 800757a:	410a      	asrs	r2, r1
 800757c:	07d6      	lsls	r6, r2, #31
 800757e:	d427      	bmi.n	80075d0 <__sflush_r+0xb4>
 8007580:	2200      	movs	r2, #0
 8007582:	6062      	str	r2, [r4, #4]
 8007584:	6922      	ldr	r2, [r4, #16]
 8007586:	04d9      	lsls	r1, r3, #19
 8007588:	6022      	str	r2, [r4, #0]
 800758a:	d504      	bpl.n	8007596 <__sflush_r+0x7a>
 800758c:	1c42      	adds	r2, r0, #1
 800758e:	d101      	bne.n	8007594 <__sflush_r+0x78>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b903      	cbnz	r3, 8007596 <__sflush_r+0x7a>
 8007594:	6560      	str	r0, [r4, #84]	; 0x54
 8007596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007598:	602f      	str	r7, [r5, #0]
 800759a:	2900      	cmp	r1, #0
 800759c:	d0ca      	beq.n	8007534 <__sflush_r+0x18>
 800759e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075a2:	4299      	cmp	r1, r3
 80075a4:	d002      	beq.n	80075ac <__sflush_r+0x90>
 80075a6:	4628      	mov	r0, r5
 80075a8:	f7ff fbd8 	bl	8006d5c <_free_r>
 80075ac:	2000      	movs	r0, #0
 80075ae:	6360      	str	r0, [r4, #52]	; 0x34
 80075b0:	e7c1      	b.n	8007536 <__sflush_r+0x1a>
 80075b2:	2301      	movs	r3, #1
 80075b4:	4628      	mov	r0, r5
 80075b6:	47b0      	blx	r6
 80075b8:	1c41      	adds	r1, r0, #1
 80075ba:	d1c8      	bne.n	800754e <__sflush_r+0x32>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0c5      	beq.n	800754e <__sflush_r+0x32>
 80075c2:	2b1d      	cmp	r3, #29
 80075c4:	d001      	beq.n	80075ca <__sflush_r+0xae>
 80075c6:	2b16      	cmp	r3, #22
 80075c8:	d101      	bne.n	80075ce <__sflush_r+0xb2>
 80075ca:	602f      	str	r7, [r5, #0]
 80075cc:	e7b2      	b.n	8007534 <__sflush_r+0x18>
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	e7ae      	b.n	8007536 <__sflush_r+0x1a>
 80075d8:	690f      	ldr	r7, [r1, #16]
 80075da:	2f00      	cmp	r7, #0
 80075dc:	d0aa      	beq.n	8007534 <__sflush_r+0x18>
 80075de:	0793      	lsls	r3, r2, #30
 80075e0:	bf18      	it	ne
 80075e2:	2300      	movne	r3, #0
 80075e4:	680e      	ldr	r6, [r1, #0]
 80075e6:	bf08      	it	eq
 80075e8:	694b      	ldreq	r3, [r1, #20]
 80075ea:	1bf6      	subs	r6, r6, r7
 80075ec:	600f      	str	r7, [r1, #0]
 80075ee:	608b      	str	r3, [r1, #8]
 80075f0:	2e00      	cmp	r6, #0
 80075f2:	dd9f      	ble.n	8007534 <__sflush_r+0x18>
 80075f4:	4633      	mov	r3, r6
 80075f6:	463a      	mov	r2, r7
 80075f8:	4628      	mov	r0, r5
 80075fa:	6a21      	ldr	r1, [r4, #32]
 80075fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007600:	47e0      	blx	ip
 8007602:	2800      	cmp	r0, #0
 8007604:	dc06      	bgt.n	8007614 <__sflush_r+0xf8>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007610:	81a3      	strh	r3, [r4, #12]
 8007612:	e790      	b.n	8007536 <__sflush_r+0x1a>
 8007614:	4407      	add	r7, r0
 8007616:	1a36      	subs	r6, r6, r0
 8007618:	e7ea      	b.n	80075f0 <__sflush_r+0xd4>
 800761a:	bf00      	nop
 800761c:	dfbffffe 	.word	0xdfbffffe

08007620 <_fflush_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	690b      	ldr	r3, [r1, #16]
 8007624:	4605      	mov	r5, r0
 8007626:	460c      	mov	r4, r1
 8007628:	b913      	cbnz	r3, 8007630 <_fflush_r+0x10>
 800762a:	2500      	movs	r5, #0
 800762c:	4628      	mov	r0, r5
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	b118      	cbz	r0, 800763a <_fflush_r+0x1a>
 8007632:	6a03      	ldr	r3, [r0, #32]
 8007634:	b90b      	cbnz	r3, 800763a <_fflush_r+0x1a>
 8007636:	f7ff f983 	bl	8006940 <__sinit>
 800763a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0f3      	beq.n	800762a <_fflush_r+0xa>
 8007642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007644:	07d0      	lsls	r0, r2, #31
 8007646:	d404      	bmi.n	8007652 <_fflush_r+0x32>
 8007648:	0599      	lsls	r1, r3, #22
 800764a:	d402      	bmi.n	8007652 <_fflush_r+0x32>
 800764c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800764e:	f7ff fb82 	bl	8006d56 <__retarget_lock_acquire_recursive>
 8007652:	4628      	mov	r0, r5
 8007654:	4621      	mov	r1, r4
 8007656:	f7ff ff61 	bl	800751c <__sflush_r>
 800765a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800765c:	4605      	mov	r5, r0
 800765e:	07da      	lsls	r2, r3, #31
 8007660:	d4e4      	bmi.n	800762c <_fflush_r+0xc>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	059b      	lsls	r3, r3, #22
 8007666:	d4e1      	bmi.n	800762c <_fflush_r+0xc>
 8007668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800766a:	f7ff fb75 	bl	8006d58 <__retarget_lock_release_recursive>
 800766e:	e7dd      	b.n	800762c <_fflush_r+0xc>

08007670 <__swhatbuf_r>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	460c      	mov	r4, r1
 8007674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007678:	4615      	mov	r5, r2
 800767a:	2900      	cmp	r1, #0
 800767c:	461e      	mov	r6, r3
 800767e:	b096      	sub	sp, #88	; 0x58
 8007680:	da0c      	bge.n	800769c <__swhatbuf_r+0x2c>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	2100      	movs	r1, #0
 8007686:	f013 0f80 	tst.w	r3, #128	; 0x80
 800768a:	bf0c      	ite	eq
 800768c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007690:	2340      	movne	r3, #64	; 0x40
 8007692:	2000      	movs	r0, #0
 8007694:	6031      	str	r1, [r6, #0]
 8007696:	602b      	str	r3, [r5, #0]
 8007698:	b016      	add	sp, #88	; 0x58
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	466a      	mov	r2, sp
 800769e:	f000 f897 	bl	80077d0 <_fstat_r>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	dbed      	blt.n	8007682 <__swhatbuf_r+0x12>
 80076a6:	9901      	ldr	r1, [sp, #4]
 80076a8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80076ac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80076b0:	4259      	negs	r1, r3
 80076b2:	4159      	adcs	r1, r3
 80076b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b8:	e7eb      	b.n	8007692 <__swhatbuf_r+0x22>

080076ba <__smakebuf_r>:
 80076ba:	898b      	ldrh	r3, [r1, #12]
 80076bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076be:	079d      	lsls	r5, r3, #30
 80076c0:	4606      	mov	r6, r0
 80076c2:	460c      	mov	r4, r1
 80076c4:	d507      	bpl.n	80076d6 <__smakebuf_r+0x1c>
 80076c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	2301      	movs	r3, #1
 80076d0:	6163      	str	r3, [r4, #20]
 80076d2:	b002      	add	sp, #8
 80076d4:	bd70      	pop	{r4, r5, r6, pc}
 80076d6:	466a      	mov	r2, sp
 80076d8:	ab01      	add	r3, sp, #4
 80076da:	f7ff ffc9 	bl	8007670 <__swhatbuf_r>
 80076de:	9900      	ldr	r1, [sp, #0]
 80076e0:	4605      	mov	r5, r0
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7ff fba2 	bl	8006e2c <_malloc_r>
 80076e8:	b948      	cbnz	r0, 80076fe <__smakebuf_r+0x44>
 80076ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ee:	059a      	lsls	r2, r3, #22
 80076f0:	d4ef      	bmi.n	80076d2 <__smakebuf_r+0x18>
 80076f2:	f023 0303 	bic.w	r3, r3, #3
 80076f6:	f043 0302 	orr.w	r3, r3, #2
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	e7e3      	b.n	80076c6 <__smakebuf_r+0xc>
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	6020      	str	r0, [r4, #0]
 8007702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	9b00      	ldr	r3, [sp, #0]
 800770a:	6120      	str	r0, [r4, #16]
 800770c:	6163      	str	r3, [r4, #20]
 800770e:	9b01      	ldr	r3, [sp, #4]
 8007710:	b15b      	cbz	r3, 800772a <__smakebuf_r+0x70>
 8007712:	4630      	mov	r0, r6
 8007714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007718:	f000 f86c 	bl	80077f4 <_isatty_r>
 800771c:	b128      	cbz	r0, 800772a <__smakebuf_r+0x70>
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	f023 0303 	bic.w	r3, r3, #3
 8007724:	f043 0301 	orr.w	r3, r3, #1
 8007728:	81a3      	strh	r3, [r4, #12]
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	431d      	orrs	r5, r3
 800772e:	81a5      	strh	r5, [r4, #12]
 8007730:	e7cf      	b.n	80076d2 <__smakebuf_r+0x18>

08007732 <_putc_r>:
 8007732:	b570      	push	{r4, r5, r6, lr}
 8007734:	460d      	mov	r5, r1
 8007736:	4614      	mov	r4, r2
 8007738:	4606      	mov	r6, r0
 800773a:	b118      	cbz	r0, 8007744 <_putc_r+0x12>
 800773c:	6a03      	ldr	r3, [r0, #32]
 800773e:	b90b      	cbnz	r3, 8007744 <_putc_r+0x12>
 8007740:	f7ff f8fe 	bl	8006940 <__sinit>
 8007744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007746:	07d8      	lsls	r0, r3, #31
 8007748:	d405      	bmi.n	8007756 <_putc_r+0x24>
 800774a:	89a3      	ldrh	r3, [r4, #12]
 800774c:	0599      	lsls	r1, r3, #22
 800774e:	d402      	bmi.n	8007756 <_putc_r+0x24>
 8007750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007752:	f7ff fb00 	bl	8006d56 <__retarget_lock_acquire_recursive>
 8007756:	68a3      	ldr	r3, [r4, #8]
 8007758:	3b01      	subs	r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	da05      	bge.n	800776c <_putc_r+0x3a>
 8007760:	69a2      	ldr	r2, [r4, #24]
 8007762:	4293      	cmp	r3, r2
 8007764:	db12      	blt.n	800778c <_putc_r+0x5a>
 8007766:	b2eb      	uxtb	r3, r5
 8007768:	2b0a      	cmp	r3, #10
 800776a:	d00f      	beq.n	800778c <_putc_r+0x5a>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	6022      	str	r2, [r4, #0]
 8007772:	701d      	strb	r5, [r3, #0]
 8007774:	b2ed      	uxtb	r5, r5
 8007776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007778:	07da      	lsls	r2, r3, #31
 800777a:	d405      	bmi.n	8007788 <_putc_r+0x56>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	059b      	lsls	r3, r3, #22
 8007780:	d402      	bmi.n	8007788 <_putc_r+0x56>
 8007782:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007784:	f7ff fae8 	bl	8006d58 <__retarget_lock_release_recursive>
 8007788:	4628      	mov	r0, r5
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	4629      	mov	r1, r5
 800778e:	4622      	mov	r2, r4
 8007790:	4630      	mov	r0, r6
 8007792:	f7ff f9d2 	bl	8006b3a <__swbuf_r>
 8007796:	4605      	mov	r5, r0
 8007798:	e7ed      	b.n	8007776 <_putc_r+0x44>

0800779a <memmove>:
 800779a:	4288      	cmp	r0, r1
 800779c:	b510      	push	{r4, lr}
 800779e:	eb01 0402 	add.w	r4, r1, r2
 80077a2:	d902      	bls.n	80077aa <memmove+0x10>
 80077a4:	4284      	cmp	r4, r0
 80077a6:	4623      	mov	r3, r4
 80077a8:	d807      	bhi.n	80077ba <memmove+0x20>
 80077aa:	1e43      	subs	r3, r0, #1
 80077ac:	42a1      	cmp	r1, r4
 80077ae:	d008      	beq.n	80077c2 <memmove+0x28>
 80077b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077b8:	e7f8      	b.n	80077ac <memmove+0x12>
 80077ba:	4601      	mov	r1, r0
 80077bc:	4402      	add	r2, r0
 80077be:	428a      	cmp	r2, r1
 80077c0:	d100      	bne.n	80077c4 <memmove+0x2a>
 80077c2:	bd10      	pop	{r4, pc}
 80077c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077cc:	e7f7      	b.n	80077be <memmove+0x24>
	...

080077d0 <_fstat_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	2300      	movs	r3, #0
 80077d4:	4d06      	ldr	r5, [pc, #24]	; (80077f0 <_fstat_r+0x20>)
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	4611      	mov	r1, r2
 80077dc:	602b      	str	r3, [r5, #0]
 80077de:	f7fc fe63 	bl	80044a8 <_fstat>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	d102      	bne.n	80077ec <_fstat_r+0x1c>
 80077e6:	682b      	ldr	r3, [r5, #0]
 80077e8:	b103      	cbz	r3, 80077ec <_fstat_r+0x1c>
 80077ea:	6023      	str	r3, [r4, #0]
 80077ec:	bd38      	pop	{r3, r4, r5, pc}
 80077ee:	bf00      	nop
 80077f0:	20000340 	.word	0x20000340

080077f4 <_isatty_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	2300      	movs	r3, #0
 80077f8:	4d05      	ldr	r5, [pc, #20]	; (8007810 <_isatty_r+0x1c>)
 80077fa:	4604      	mov	r4, r0
 80077fc:	4608      	mov	r0, r1
 80077fe:	602b      	str	r3, [r5, #0]
 8007800:	f7fc fe61 	bl	80044c6 <_isatty>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d102      	bne.n	800780e <_isatty_r+0x1a>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	b103      	cbz	r3, 800780e <_isatty_r+0x1a>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	20000340 	.word	0x20000340

08007814 <_sbrk_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	2300      	movs	r3, #0
 8007818:	4d05      	ldr	r5, [pc, #20]	; (8007830 <_sbrk_r+0x1c>)
 800781a:	4604      	mov	r4, r0
 800781c:	4608      	mov	r0, r1
 800781e:	602b      	str	r3, [r5, #0]
 8007820:	f7fc fe68 	bl	80044f4 <_sbrk>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d102      	bne.n	800782e <_sbrk_r+0x1a>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	b103      	cbz	r3, 800782e <_sbrk_r+0x1a>
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	20000340 	.word	0x20000340

08007834 <memchr>:
 8007834:	4603      	mov	r3, r0
 8007836:	b510      	push	{r4, lr}
 8007838:	b2c9      	uxtb	r1, r1
 800783a:	4402      	add	r2, r0
 800783c:	4293      	cmp	r3, r2
 800783e:	4618      	mov	r0, r3
 8007840:	d101      	bne.n	8007846 <memchr+0x12>
 8007842:	2000      	movs	r0, #0
 8007844:	e003      	b.n	800784e <memchr+0x1a>
 8007846:	7804      	ldrb	r4, [r0, #0]
 8007848:	3301      	adds	r3, #1
 800784a:	428c      	cmp	r4, r1
 800784c:	d1f6      	bne.n	800783c <memchr+0x8>
 800784e:	bd10      	pop	{r4, pc}

08007850 <memcpy>:
 8007850:	440a      	add	r2, r1
 8007852:	4291      	cmp	r1, r2
 8007854:	f100 33ff 	add.w	r3, r0, #4294967295
 8007858:	d100      	bne.n	800785c <memcpy+0xc>
 800785a:	4770      	bx	lr
 800785c:	b510      	push	{r4, lr}
 800785e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007862:	4291      	cmp	r1, r2
 8007864:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007868:	d1f9      	bne.n	800785e <memcpy+0xe>
 800786a:	bd10      	pop	{r4, pc}

0800786c <_realloc_r>:
 800786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007870:	4680      	mov	r8, r0
 8007872:	4614      	mov	r4, r2
 8007874:	460e      	mov	r6, r1
 8007876:	b921      	cbnz	r1, 8007882 <_realloc_r+0x16>
 8007878:	4611      	mov	r1, r2
 800787a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800787e:	f7ff bad5 	b.w	8006e2c <_malloc_r>
 8007882:	b92a      	cbnz	r2, 8007890 <_realloc_r+0x24>
 8007884:	f7ff fa6a 	bl	8006d5c <_free_r>
 8007888:	4625      	mov	r5, r4
 800788a:	4628      	mov	r0, r5
 800788c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007890:	f000 f81b 	bl	80078ca <_malloc_usable_size_r>
 8007894:	4284      	cmp	r4, r0
 8007896:	4607      	mov	r7, r0
 8007898:	d802      	bhi.n	80078a0 <_realloc_r+0x34>
 800789a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800789e:	d812      	bhi.n	80078c6 <_realloc_r+0x5a>
 80078a0:	4621      	mov	r1, r4
 80078a2:	4640      	mov	r0, r8
 80078a4:	f7ff fac2 	bl	8006e2c <_malloc_r>
 80078a8:	4605      	mov	r5, r0
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d0ed      	beq.n	800788a <_realloc_r+0x1e>
 80078ae:	42bc      	cmp	r4, r7
 80078b0:	4622      	mov	r2, r4
 80078b2:	4631      	mov	r1, r6
 80078b4:	bf28      	it	cs
 80078b6:	463a      	movcs	r2, r7
 80078b8:	f7ff ffca 	bl	8007850 <memcpy>
 80078bc:	4631      	mov	r1, r6
 80078be:	4640      	mov	r0, r8
 80078c0:	f7ff fa4c 	bl	8006d5c <_free_r>
 80078c4:	e7e1      	b.n	800788a <_realloc_r+0x1e>
 80078c6:	4635      	mov	r5, r6
 80078c8:	e7df      	b.n	800788a <_realloc_r+0x1e>

080078ca <_malloc_usable_size_r>:
 80078ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ce:	1f18      	subs	r0, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	bfbc      	itt	lt
 80078d4:	580b      	ldrlt	r3, [r1, r0]
 80078d6:	18c0      	addlt	r0, r0, r3
 80078d8:	4770      	bx	lr
	...

080078dc <_init>:
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	bf00      	nop
 80078e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e2:	bc08      	pop	{r3}
 80078e4:	469e      	mov	lr, r3
 80078e6:	4770      	bx	lr

080078e8 <_fini>:
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	bf00      	nop
 80078ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ee:	bc08      	pop	{r3}
 80078f0:	469e      	mov	lr, r3
 80078f2:	4770      	bx	lr
