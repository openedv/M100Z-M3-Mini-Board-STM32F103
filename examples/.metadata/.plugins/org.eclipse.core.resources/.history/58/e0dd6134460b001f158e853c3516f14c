
11_usmart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f84  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003840  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9ac  0800c9ac  0002019c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c9ac  0800c9ac  0002019c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c9ac  0800c9ac  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9ac  0800c9ac  0001c9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9b0  0800c9b0  0001c9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  0800c9b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000019c  0800cb50  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800cb50  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010928  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003203  00000000  00000000  00030b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfa  00000000  00000000  00034e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c9ad  00000000  00000000  00035b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017da4  00000000  00000000  000524c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e3f8  00000000  00000000  0006a26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dac  00000000  00000000  00108664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010d410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000019c 	.word	0x2000019c
 8000204:	00000000 	.word	0x00000000
 8000208:	08009154 	.word	0x08009154

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001a0 	.word	0x200001a0
 8000224:	08009154 	.word	0x08009154

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <usmart_sys_cmd_exe>:
 * @brief   handles system instructions
 * @param   str : String pointer
 * @retval  0, processed successfully; Other, error code
 */
uint8_t usmart_sys_cmd_exe(char *str)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    char sfname[MAX_FNAME_LEN];                   /* Store local function names */
    uint8_t pnum;
    uint8_t rval;
    uint32_t res;
    res = usmart_get_cmdname(str, sfname, &i, MAX_FNAME_LEN);   /* Get the instruction and its length */
 800083c:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000840:	f107 0110 	add.w	r1, r7, #16
 8000844:	231e      	movs	r3, #30
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 fe5e 	bl	8001508 <usmart_get_cmdname>
 800084c:	4603      	mov	r3, r0
 800084e:	60bb      	str	r3, [r7, #8]

    if (res)return USMART_FUNCERR;                /* Wrong instruction */
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <usmart_sys_cmd_exe+0x26>
 8000856:	2301      	movs	r3, #1
 8000858:	e176      	b.n	8000b48 <usmart_sys_cmd_exe+0x314>

    str += i;
 800085a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800085e:	461a      	mov	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	607b      	str	r3, [r7, #4]

    for (i = 0; i < sizeof(sys_cmd_tab) / 4; i++) /* Supported system commands */
 8000866:	2300      	movs	r3, #0
 8000868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800086c:	e014      	b.n	8000898 <usmart_sys_cmd_exe+0x64>
    {
        if (usmart_strcmp(sfname, sys_cmd_tab[i]) == 0)break;
 800086e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000872:	461a      	mov	r2, r3
 8000874:	4bb6      	ldr	r3, [pc, #728]	; (8000b50 <usmart_sys_cmd_exe+0x31c>)
 8000876:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fd1b 	bl	80012bc <usmart_strcmp>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00a      	beq.n	80008a2 <usmart_sys_cmd_exe+0x6e>
    for (i = 0; i < sizeof(sys_cmd_tab) / 4; i++) /* Supported system commands */
 800088c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000890:	3301      	adds	r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800089c:	2b06      	cmp	r3, #6
 800089e:	d9e6      	bls.n	800086e <usmart_sys_cmd_exe+0x3a>
 80008a0:	e000      	b.n	80008a4 <usmart_sys_cmd_exe+0x70>
        if (usmart_strcmp(sfname, sys_cmd_tab[i]) == 0)break;
 80008a2:	bf00      	nop
    }

    switch (i)
 80008a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008a8:	2b06      	cmp	r3, #6
 80008aa:	f200 814a 	bhi.w	8000b42 <usmart_sys_cmd_exe+0x30e>
 80008ae:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <usmart_sys_cmd_exe+0x80>)
 80008b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b4:	080008d1 	.word	0x080008d1
 80008b8:	080008d1 	.word	0x080008d1
 80008bc:	0800093f 	.word	0x0800093f
 80008c0:	08000989 	.word	0x08000989
 80008c4:	080009f7 	.word	0x080009f7
 80008c8:	08000a65 	.word	0x08000a65
 80008cc:	08000ad3 	.word	0x08000ad3
    {
        case 0:
        case 1: /* help command */
            USMART_PRINTF("\r\n");
 80008d0:	48a0      	ldr	r0, [pc, #640]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 80008d2:	f007 fd99 	bl	8008408 <puts>
#if USMART_USE_HELP
            USMART_PRINTF("------------------------USMART V3.5------------------------ \r\n");
 80008d6:	48a0      	ldr	r0, [pc, #640]	; (8000b58 <usmart_sys_cmd_exe+0x324>)
 80008d8:	f007 fd96 	bl	8008408 <puts>
            USMART_PRINTF("    USMART is developed by ALIENTEK a clever serial debugging intercom component, through \r\n");
 80008dc:	489f      	ldr	r0, [pc, #636]	; (8000b5c <usmart_sys_cmd_exe+0x328>)
 80008de:	f007 fd93 	bl	8008408 <puts>
            USMART_PRINTF("It allows you to call any function in the program through the serial assistant and execute it. So, you can\r\n");
 80008e2:	489f      	ldr	r0, [pc, #636]	; (8000b60 <usmart_sys_cmd_exe+0x32c>)
 80008e4:	f007 fd90 	bl	8008408 <puts>
            USMART_PRINTF("To arbitrarily change the input parameters of the function (support numbers (10/16 base, support negative numbers), strings\r\n"),
 80008e8:	489e      	ldr	r0, [pc, #632]	; (8000b64 <usmart_sys_cmd_exe+0x330>)
 80008ea:	f007 fd8d 	bl	8008408 <puts>
            USMART_PRINTF(", function entry address, etc. as arguments), a single function supports up to 10 input arguments, and supports\r\n"),
 80008ee:	489e      	ldr	r0, [pc, #632]	; (8000b68 <usmart_sys_cmd_exe+0x334>)
 80008f0:	f007 fd8a 	bl	8008408 <puts>
            USMART_PRINTF("Function return values are displayed. Support parameter display base setting function, support base conversion function.\r\n");
 80008f4:	489d      	ldr	r0, [pc, #628]	; (8000b6c <usmart_sys_cmd_exe+0x338>)
 80008f6:	f007 fd87 	bl	8008408 <puts>
            USMART_PRINTF("technical support:www.openedv.com\r\n");
 80008fa:	489d      	ldr	r0, [pc, #628]	; (8000b70 <usmart_sys_cmd_exe+0x33c>)
 80008fc:	f007 fd84 	bl	8008408 <puts>
            USMART_PRINTF("USMART has seven system commands (must be lowercase):\r\n");
 8000900:	489c      	ldr	r0, [pc, #624]	; (8000b74 <usmart_sys_cmd_exe+0x340>)
 8000902:	f007 fd81 	bl	8008408 <puts>
            USMART_PRINTF("?   :   Get help\r\n");
 8000906:	489c      	ldr	r0, [pc, #624]	; (8000b78 <usmart_sys_cmd_exe+0x344>)
 8000908:	f007 fd7e 	bl	8008408 <puts>
            USMART_PRINTF("help:   Get help\r\n");
 800090c:	489b      	ldr	r0, [pc, #620]	; (8000b7c <usmart_sys_cmd_exe+0x348>)
 800090e:	f007 fd7b 	bl	8008408 <puts>
            USMART_PRINTF("list:   A list of available functions\r\n\n");
 8000912:	489b      	ldr	r0, [pc, #620]	; (8000b80 <usmart_sys_cmd_exe+0x34c>)
 8000914:	f007 fd78 	bl	8008408 <puts>
            USMART_PRINTF("id:     A list of IDs of the available functions\r\n\n");
 8000918:	489a      	ldr	r0, [pc, #616]	; (8000b84 <usmart_sys_cmd_exe+0x350>)
 800091a:	f007 fd75 	bl	8008408 <puts>
            USMART_PRINTF("hex:    Argument hexadecimal display, followed by the space + number is the execution of the base conversion\r\n\n");
 800091e:	489a      	ldr	r0, [pc, #616]	; (8000b88 <usmart_sys_cmd_exe+0x354>)
 8000920:	f007 fd72 	bl	8008408 <puts>
            USMART_PRINTF("dec:    The argument is displayed in decimal, followed by a space + number to perform the base conversion\r\n\n");
 8000924:	4899      	ldr	r0, [pc, #612]	; (8000b8c <usmart_sys_cmd_exe+0x358>)
 8000926:	f007 fd6f 	bl	8008408 <puts>
            USMART_PRINTF("runtime:1, enable function run timing. 0, turns off the function run time.\r\n\n");
 800092a:	4899      	ldr	r0, [pc, #612]	; (8000b90 <usmart_sys_cmd_exe+0x35c>)
 800092c:	f007 fd6c 	bl	8008408 <puts>
            USMART_PRINTF("Please enter the name and parameters of the function in the program format and end with the ENTER key.\r\n");
 8000930:	4898      	ldr	r0, [pc, #608]	; (8000b94 <usmart_sys_cmd_exe+0x360>)
 8000932:	f007 fd69 	bl	8008408 <puts>
            USMART_PRINTF("--------------------------ALIENTEK------------------------- \r\n");
 8000936:	4898      	ldr	r0, [pc, #608]	; (8000b98 <usmart_sys_cmd_exe+0x364>)
 8000938:	f007 fd66 	bl	8008408 <puts>
#else
            USMART_PRINTF("Instruction invalidation\r\n");
#endif
            break;
 800093c:	e103      	b.n	8000b46 <usmart_sys_cmd_exe+0x312>

        case 2: /* Query instructions */
            USMART_PRINTF("\r\n");
 800093e:	4885      	ldr	r0, [pc, #532]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 8000940:	f007 fd62 	bl	8008408 <puts>
            USMART_PRINTF("------------------------Function listing--------------------------- \r\n");
 8000944:	4895      	ldr	r0, [pc, #596]	; (8000b9c <usmart_sys_cmd_exe+0x368>)
 8000946:	f007 fd5f 	bl	8008408 <puts>

            for (i = 0; i < usmart_dev.fnum; i++)USMART_PRINTF("%s\r\n", usmart_dev.funs[i].name);
 800094a:	2300      	movs	r3, #0
 800094c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000950:	e010      	b.n	8000974 <usmart_sys_cmd_exe+0x140>
 8000952:	4b93      	ldr	r3, [pc, #588]	; (8000ba0 <usmart_sys_cmd_exe+0x36c>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	4413      	add	r3, r2
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	4619      	mov	r1, r3
 8000962:	4890      	ldr	r0, [pc, #576]	; (8000ba4 <usmart_sys_cmd_exe+0x370>)
 8000964:	f007 fce2 	bl	800832c <iprintf>
 8000968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800096c:	3301      	adds	r3, #1
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000974:	4b8a      	ldr	r3, [pc, #552]	; (8000ba0 <usmart_sys_cmd_exe+0x36c>)
 8000976:	7d1a      	ldrb	r2, [r3, #20]
 8000978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800097c:	429a      	cmp	r2, r3
 800097e:	d8e8      	bhi.n	8000952 <usmart_sys_cmd_exe+0x11e>

            USMART_PRINTF("\r\n");
 8000980:	4874      	ldr	r0, [pc, #464]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 8000982:	f007 fd41 	bl	8008408 <puts>
            break;
 8000986:	e0de      	b.n	8000b46 <usmart_sys_cmd_exe+0x312>

        case 3: /* Query ID */
            USMART_PRINTF("\r\n");
 8000988:	4872      	ldr	r0, [pc, #456]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 800098a:	f007 fd3d 	bl	8008408 <puts>
            USMART_PRINTF("-------------------------Function ID --------------------------- \r\n");
 800098e:	4886      	ldr	r0, [pc, #536]	; (8000ba8 <usmart_sys_cmd_exe+0x374>)
 8000990:	f007 fd3a 	bl	8008408 <puts>

            for (i = 0; i < usmart_dev.fnum; i++)
 8000994:	2300      	movs	r3, #0
 8000996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800099a:	e022      	b.n	80009e2 <usmart_sys_cmd_exe+0x1ae>
            {
                usmart_get_fname((char *)usmart_dev.funs[i].name, sfname, &pnum, &rval); /* Get the local function name */
 800099c:	4b80      	ldr	r3, [pc, #512]	; (8000ba0 <usmart_sys_cmd_exe+0x36c>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	4413      	add	r3, r2
 80009a8:	6858      	ldr	r0, [r3, #4]
 80009aa:	f107 030e 	add.w	r3, r7, #14
 80009ae:	f107 020f 	add.w	r2, r7, #15
 80009b2:	f107 0110 	add.w	r1, r7, #16
 80009b6:	f000 fdf3 	bl	80015a0 <usmart_get_fname>
                USMART_PRINTF("%s id is:\r\n0X%08X\r\n", sfname, (unsigned int)usmart_dev.funs[i].func);  /* Display ID */
 80009ba:	4b79      	ldr	r3, [pc, #484]	; (8000ba0 <usmart_sys_cmd_exe+0x36c>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4413      	add	r3, r2
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4619      	mov	r1, r3
 80009d0:	4876      	ldr	r0, [pc, #472]	; (8000bac <usmart_sys_cmd_exe+0x378>)
 80009d2:	f007 fcab 	bl	800832c <iprintf>
            for (i = 0; i < usmart_dev.fnum; i++)
 80009d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009da:	3301      	adds	r3, #1
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80009e2:	4b6f      	ldr	r3, [pc, #444]	; (8000ba0 <usmart_sys_cmd_exe+0x36c>)
 80009e4:	7d1a      	ldrb	r2, [r3, #20]
 80009e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d8d6      	bhi.n	800099c <usmart_sys_cmd_exe+0x168>
            }

            USMART_PRINTF("\r\n");
 80009ee:	4859      	ldr	r0, [pc, #356]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 80009f0:	f007 fd0a 	bl	8008408 <puts>
            break;
 80009f4:	e0a7      	b.n	8000b46 <usmart_sys_cmd_exe+0x312>

        case 4: /* hex instruction */
            USMART_PRINTF("\r\n");
 80009f6:	4857      	ldr	r0, [pc, #348]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 80009f8:	f007 fd06 	bl	8008408 <puts>
            usmart_get_aparm(str, sfname, &i);
 80009fc:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 ff0e 	bl	8001828 <usmart_get_aparm>

            if (i == 0)     /* Parameters are normal */
 8000a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d121      	bne.n	8000a58 <usmart_sys_cmd_exe+0x224>
            {
                i = usmart_str2num(sfname, &res);       /* Record the parameter */
 8000a14:	f107 0208 	add.w	r2, r7, #8
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fcb8 	bl	8001394 <usmart_str2num>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if (i == 0) /* Base conversion function */
 8000a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d105      	bne.n	8000a3e <usmart_sys_cmd_exe+0x20a>
                {
                    USMART_PRINTF("HEX:0X%X\r\n", (unsigned int)res); /* Convert to hexadecimal */
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	4619      	mov	r1, r3
 8000a36:	485e      	ldr	r0, [pc, #376]	; (8000bb0 <usmart_sys_cmd_exe+0x37c>)
 8000a38:	f007 fc78 	bl	800832c <iprintf>
 8000a3c:	e00e      	b.n	8000a5c <usmart_sys_cmd_exe+0x228>
                }
                else if (i != 4)return USMART_PARMERR;  /* Parameter error. */
 8000a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	d001      	beq.n	8000a4a <usmart_sys_cmd_exe+0x216>
 8000a46:	2302      	movs	r3, #2
 8000a48:	e07e      	b.n	8000b48 <usmart_sys_cmd_exe+0x314>
                else        /* Parameter display setting function */
                {
                    USMART_PRINTF("Hexadecimal parameter display!\r\n");
 8000a4a:	485a      	ldr	r0, [pc, #360]	; (8000bb4 <usmart_sys_cmd_exe+0x380>)
 8000a4c:	f007 fcdc 	bl	8008408 <puts>
                    usmart_dev.sptype = SP_TYPE_HEX;
 8000a50:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <usmart_sys_cmd_exe+0x36c>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	75da      	strb	r2, [r3, #23]
 8000a56:	e001      	b.n	8000a5c <usmart_sys_cmd_exe+0x228>
                }

            }
            else return USMART_PARMERR; /* Parameter error. */
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e075      	b.n	8000b48 <usmart_sys_cmd_exe+0x314>

            USMART_PRINTF("\r\n");
 8000a5c:	483d      	ldr	r0, [pc, #244]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 8000a5e:	f007 fcd3 	bl	8008408 <puts>
            break;
 8000a62:	e070      	b.n	8000b46 <usmart_sys_cmd_exe+0x312>

        case 5: /* dec directive */
            USMART_PRINTF("\r\n");
 8000a64:	483b      	ldr	r0, [pc, #236]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 8000a66:	f007 fccf 	bl	8008408 <puts>
            usmart_get_aparm(str, sfname, &i);
 8000a6a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 fed7 	bl	8001828 <usmart_get_aparm>

            if (i == 0)     /* Parameters are normal */
 8000a7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d121      	bne.n	8000ac6 <usmart_sys_cmd_exe+0x292>
            {
                i = usmart_str2num(sfname, &res);       /* Record the parameter */
 8000a82:	f107 0208 	add.w	r2, r7, #8
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fc81 	bl	8001394 <usmart_str2num>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if (i == 0) /* Base conversion function */
 8000a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d105      	bne.n	8000aac <usmart_sys_cmd_exe+0x278>
                {
                    USMART_PRINTF("DEC:%lu\r\n", (unsigned long)res);  /* Converting to decimal */
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4844      	ldr	r0, [pc, #272]	; (8000bb8 <usmart_sys_cmd_exe+0x384>)
 8000aa6:	f007 fc41 	bl	800832c <iprintf>
 8000aaa:	e00e      	b.n	8000aca <usmart_sys_cmd_exe+0x296>
                }
                else if (i != 4)
 8000aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d001      	beq.n	8000ab8 <usmart_sys_cmd_exe+0x284>
                {
                    return USMART_PARMERR;  /* Parameter error. */
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	e047      	b.n	8000b48 <usmart_sys_cmd_exe+0x314>
                }
                else        /* Parameter display setting function */
                {
                    USMART_PRINTF("Decimal parameter display!\r\n");
 8000ab8:	4840      	ldr	r0, [pc, #256]	; (8000bbc <usmart_sys_cmd_exe+0x388>)
 8000aba:	f007 fca5 	bl	8008408 <puts>
                    usmart_dev.sptype = SP_TYPE_DEC;
 8000abe:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <usmart_sys_cmd_exe+0x36c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	75da      	strb	r2, [r3, #23]
 8000ac4:	e001      	b.n	8000aca <usmart_sys_cmd_exe+0x296>
                }

            }
            else 
            {
                return USMART_PARMERR;  /* Parameter error. */
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	e03e      	b.n	8000b48 <usmart_sys_cmd_exe+0x314>
            }
                
            USMART_PRINTF("\r\n");
 8000aca:	4822      	ldr	r0, [pc, #136]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 8000acc:	f007 fc9c 	bl	8008408 <puts>
            break;
 8000ad0:	e039      	b.n	8000b46 <usmart_sys_cmd_exe+0x312>

        case 6: /* runtime directive, which sets whether the function execution time should be displayed */
            USMART_PRINTF("\r\n");
 8000ad2:	4820      	ldr	r0, [pc, #128]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 8000ad4:	f007 fc98 	bl	8008408 <puts>
            usmart_get_aparm(str, sfname, &i);
 8000ad8:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 fea0 	bl	8001828 <usmart_get_aparm>

            if (i == 0) /* Parameters are normal */
 8000ae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d122      	bne.n	8000b36 <usmart_sys_cmd_exe+0x302>
            {
                i = usmart_str2num(sfname, &res);   /* Log the argument */
 8000af0:	f107 0208 	add.w	r2, r7, #8
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fc4a 	bl	8001394 <usmart_str2num>
 8000b00:	4603      	mov	r3, r0
 8000b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

                if (i == 0) /* Read data at specified location */
 8000b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d111      	bne.n	8000b32 <usmart_sys_cmd_exe+0x2fe>
                    {
                        USMART_PRINTF("\r\nError! \r\nTo EN RunTime function,Please set USMART_ENTIMX_SCAN = 1 first!\r\n");/* report an error */
                    }
                    else
                    {
                        usmart_dev.runtimeflag = res;
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <usmart_sys_cmd_exe+0x36c>)
 8000b14:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

                        if (usmart_dev.runtimeflag)
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <usmart_sys_cmd_exe+0x36c>)
 8000b1a:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <usmart_sys_cmd_exe+0x2f6>
                        {
                            USMART_PRINTF("Run Time Calculation ON\r\n");
 8000b22:	4827      	ldr	r0, [pc, #156]	; (8000bc0 <usmart_sys_cmd_exe+0x38c>)
 8000b24:	f007 fc70 	bl	8008408 <puts>
 8000b28:	e007      	b.n	8000b3a <usmart_sys_cmd_exe+0x306>
                        }
                        else 
                        {
                            USMART_PRINTF("Run Time Calculation OFF\r\n");
 8000b2a:	4826      	ldr	r0, [pc, #152]	; (8000bc4 <usmart_sys_cmd_exe+0x390>)
 8000b2c:	f007 fc6c 	bl	8008408 <puts>
 8000b30:	e003      	b.n	8000b3a <usmart_sys_cmd_exe+0x306>
                        }
                    }
                }
                else 
                {
                    return USMART_PARMERR;  /* No parameters, or wrong parameters */
 8000b32:	2302      	movs	r3, #2
 8000b34:	e008      	b.n	8000b48 <usmart_sys_cmd_exe+0x314>
                }
            }
            else 
            {
                return USMART_PARMERR;      /* Parameter error. */
 8000b36:	2302      	movs	r3, #2
 8000b38:	e006      	b.n	8000b48 <usmart_sys_cmd_exe+0x314>
            }
            
            USMART_PRINTF("\r\n");
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <usmart_sys_cmd_exe+0x320>)
 8000b3c:	f007 fc64 	bl	8008408 <puts>
            break;
 8000b40:	e001      	b.n	8000b46 <usmart_sys_cmd_exe+0x312>

        default:/* Disable instruction */
            return USMART_FUNCERR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <usmart_sys_cmd_exe+0x314>
    }

    return 0;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3730      	adds	r7, #48	; 0x30
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	08009194 	.word	0x08009194
 8000b58:	08009198 	.word	0x08009198
 8000b5c:	080091d8 	.word	0x080091d8
 8000b60:	08009234 	.word	0x08009234
 8000b64:	080092a0 	.word	0x080092a0
 8000b68:	08009320 	.word	0x08009320
 8000b6c:	08009394 	.word	0x08009394
 8000b70:	08009410 	.word	0x08009410
 8000b74:	08009434 	.word	0x08009434
 8000b78:	0800946c 	.word	0x0800946c
 8000b7c:	08009480 	.word	0x08009480
 8000b80:	08009494 	.word	0x08009494
 8000b84:	080094bc 	.word	0x080094bc
 8000b88:	080094f0 	.word	0x080094f0
 8000b8c:	08009560 	.word	0x08009560
 8000b90:	080095cc 	.word	0x080095cc
 8000b94:	0800961c 	.word	0x0800961c
 8000b98:	08009684 	.word	0x08009684
 8000b9c:	080096c4 	.word	0x080096c4
 8000ba0:	2000003c 	.word	0x2000003c
 8000ba4:	0800970c 	.word	0x0800970c
 8000ba8:	08009714 	.word	0x08009714
 8000bac:	08009758 	.word	0x08009758
 8000bb0:	0800976c 	.word	0x0800976c
 8000bb4:	08009778 	.word	0x08009778
 8000bb8:	08009798 	.word	0x08009798
 8000bbc:	080097a4 	.word	0x080097a4
 8000bc0:	080097c0 	.word	0x080097c0
 8000bc4:	080097dc 	.word	0x080097dc

08000bc8 <usmart_init>:
 * @brief    Initializes USMART
 * @param    tclk : The operating frequency (in Mhz) of the timer.
 * @retval   None
 */
void usmart_init(uint16_t tclk)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
#if USMART_ENTIMX_SCAN == 1
	MX_TIM4_Init();			/* Initialization of the timer */
 8000bd2:	f004 fe21 	bl	8005818 <MX_TIM4_Init>
#endif
    usmart_dev.sptype = 1;  /* Hexadecimal display parameters */
 8000bd6:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <usmart_init+0x1c>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	75da      	strb	r2, [r3, #23]
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000003c 	.word	0x2000003c

08000be8 <usmart_cmd_rec>:
 * @brief   gets the function name,id, and arguments from str
 * @param   str : String pointer.
 * @retval  0, successful recognition; Other, error code.
 */
uint8_t usmart_cmd_rec(char *str)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	; 0x50
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    uint8_t sta, i, rval;   /* State */
    uint8_t rpnum, spnum;
    char rfname[MAX_FNAME_LEN];  /* Staging space for the received function name */
    char sfname[MAX_FNAME_LEN];  /* Store local function names */
    sta = usmart_get_fname(str, rfname, &rpnum, &rval); /* The name of the function that received the data and the number of arguments */
 8000bf0:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8000bf4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000bf8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 fccf 	bl	80015a0 <usmart_get_fname>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (sta)return sta;    /* Error */
 8000c08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <usmart_cmd_rec+0x2e>
 8000c10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c14:	e05d      	b.n	8000cd2 <usmart_cmd_rec+0xea>

    for (i = 0; i < usmart_dev.fnum; i++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000c1c:	e036      	b.n	8000c8c <usmart_cmd_rec+0xa4>
    {
        sta = usmart_get_fname((char *)usmart_dev.funs[i].name, sfname, &spnum, &rval); /* Get the name of the local function and the number of arguments */
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <usmart_cmd_rec+0xf4>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	4413      	add	r3, r2
 8000c2a:	6858      	ldr	r0, [r3, #4]
 8000c2c:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 8000c30:	f107 024b 	add.w	r2, r7, #75	; 0x4b
 8000c34:	f107 010c 	add.w	r1, r7, #12
 8000c38:	f000 fcb2 	bl	80015a0 <usmart_get_fname>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if (sta)return sta; /* Error in local parsing */
 8000c42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <usmart_cmd_rec+0x68>
 8000c4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c4e:	e040      	b.n	8000cd2 <usmart_cmd_rec+0xea>

        if (usmart_strcmp(sfname, rfname) == 0) /* Equality */
 8000c50:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fb2e 	bl	80012bc <usmart_strcmp>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10c      	bne.n	8000c80 <usmart_cmd_rec+0x98>
        {
            if (spnum > rpnum)return USMART_PARMERR;/* Parameter errors (fewer input parameters than source function parameters) */
 8000c66:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000c6a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d901      	bls.n	8000c76 <usmart_cmd_rec+0x8e>
 8000c72:	2302      	movs	r3, #2
 8000c74:	e02d      	b.n	8000cd2 <usmart_cmd_rec+0xea>

            usmart_dev.id = i;  /* Logging function ids */
 8000c76:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <usmart_cmd_rec+0xf4>)
 8000c7c:	759a      	strb	r2, [r3, #22]
            break;              /* Run out */
 8000c7e:	e00b      	b.n	8000c98 <usmart_cmd_rec+0xb0>
    for (i = 0; i < usmart_dev.fnum; i++)
 8000c80:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000c84:	3301      	adds	r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <usmart_cmd_rec+0xf4>)
 8000c8e:	7d1a      	ldrb	r2, [r3, #20]
 8000c90:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d8c2      	bhi.n	8000c1e <usmart_cmd_rec+0x36>
        }
    }

    if (i == usmart_dev.fnum)return USMART_NOFUNCFIND;  /* No matching function found */
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <usmart_cmd_rec+0xf4>)
 8000c9a:	7d1a      	ldrb	r2, [r3, #20]
 8000c9c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d101      	bne.n	8000ca8 <usmart_cmd_rec+0xc0>
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	e014      	b.n	8000cd2 <usmart_cmd_rec+0xea>

    sta = usmart_get_fparam(str, &i);   /* Get the number of function arguments */
 8000ca8:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8000cac:	4619      	mov	r1, r3
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f000 fe8c 	bl	80019cc <usmart_get_fparam>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (sta)return sta;     /* Return error */
 8000cba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <usmart_cmd_rec+0xe0>
 8000cc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000cc6:	e004      	b.n	8000cd2 <usmart_cmd_rec+0xea>

    usmart_dev.pnum = i;    /* Record the number of parameters */
 8000cc8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <usmart_cmd_rec+0xf4>)
 8000cce:	755a      	strb	r2, [r3, #21]
    return USMART_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3750      	adds	r7, #80	; 0x50
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000003c 	.word	0x2000003c

08000ce0 <usmart_exe>:
 *
 * @param  None
 * @retval None
 */
void usmart_exe(void)
{
 8000ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce2:	b0a1      	sub	sp, #132	; 0x84
 8000ce4:	af06      	add	r7, sp, #24
    uint8_t id, i;
    uint32_t res;
    uint32_t temp[MAX_PARM];        /* Argument converted to support strings */
    char sfname[MAX_FNAME_LEN];     /* Store local function names */
    uint8_t pnum, rval;
    id = usmart_dev.id;
 8000ce6:	4bb0      	ldr	r3, [pc, #704]	; (8000fa8 <usmart_exe+0x2c8>)
 8000ce8:	7d9b      	ldrb	r3, [r3, #22]
 8000cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if (id >= usmart_dev.fnum)return;   /* No execution. */
 8000cee:	4bae      	ldr	r3, [pc, #696]	; (8000fa8 <usmart_exe+0x2c8>)
 8000cf0:	7d1b      	ldrb	r3, [r3, #20]
 8000cf2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	f080 81db 	bcs.w	80010b2 <usmart_exe+0x3d2>

    usmart_get_fname((char *)usmart_dev.funs[id].name, sfname, &pnum, &rval);    /* Get the name of the local function and the number of arguments */
 8000cfc:	4baa      	ldr	r3, [pc, #680]	; (8000fa8 <usmart_exe+0x2c8>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	4413      	add	r3, r2
 8000d08:	6858      	ldr	r0, [r3, #4]
 8000d0a:	f107 0312 	add.w	r3, r7, #18
 8000d0e:	f107 0213 	add.w	r2, r7, #19
 8000d12:	f107 0114 	add.w	r1, r7, #20
 8000d16:	f000 fc43 	bl	80015a0 <usmart_get_fname>
    USMART_PRINTF("\r\n%s(", sfname);   /* Prints the name of the function that is being executed */
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	48a2      	ldr	r0, [pc, #648]	; (8000fac <usmart_exe+0x2cc>)
 8000d22:	f007 fb03 	bl	800832c <iprintf>

    for (i = 0; i < pnum; i++)          /* Output parameter */
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000d2c:	e071      	b.n	8000e12 <usmart_exe+0x132>
    {
        if (usmart_dev.parmtype & (1 << i)) /* The argument is a string */
 8000d2e:	4b9e      	ldr	r3, [pc, #632]	; (8000fa8 <usmart_exe+0x2c8>)
 8000d30:	8b1b      	ldrh	r3, [r3, #24]
 8000d32:	461a      	mov	r2, r3
 8000d34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d38:	fa42 f303 	asr.w	r3, r2, r3
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d026      	beq.n	8000d92 <usmart_exe+0xb2>
        {
            USMART_PRINTF("%c", '"');
 8000d44:	2022      	movs	r0, #34	; 0x22
 8000d46:	f007 fb03 	bl	8008350 <putchar>
            USMART_PRINTF("%s", usmart_dev.parm + usmart_get_parmpos(i));
 8000d4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fe1c 	bl	800198c <usmart_get_parmpos>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b95      	ldr	r3, [pc, #596]	; (8000fb0 <usmart_exe+0x2d0>)
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4895      	ldr	r0, [pc, #596]	; (8000fb4 <usmart_exe+0x2d4>)
 8000d60:	f007 fae4 	bl	800832c <iprintf>
            USMART_PRINTF("%c", '"');
 8000d64:	2022      	movs	r0, #34	; 0x22
 8000d66:	f007 faf3 	bl	8008350 <putchar>
            temp[i] = (uint32_t) & (usmart_dev.parm[usmart_get_parmpos(i)]);
 8000d6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fe0c 	bl	800198c <usmart_get_parmpos>
 8000d74:	4603      	mov	r3, r0
 8000d76:	3320      	adds	r3, #32
 8000d78:	4a8b      	ldr	r2, [pc, #556]	; (8000fa8 <usmart_exe+0x2c8>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	1d1a      	adds	r2, r3, #4
 8000d7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	3358      	adds	r3, #88	; 0x58
 8000d86:	f107 0110 	add.w	r1, r7, #16
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f843 2c34 	str.w	r2, [r3, #-52]
 8000d90:	e031      	b.n	8000df6 <usmart_exe+0x116>
        }
        else    /* The arguments are numbers */
        {
            temp[i] = *(uint32_t *)(usmart_dev.parm + usmart_get_parmpos(i));
 8000d92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fdf8 	bl	800198c <usmart_get_parmpos>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b83      	ldr	r3, [pc, #524]	; (8000fb0 <usmart_exe+0x2d0>)
 8000da2:	441a      	add	r2, r3
 8000da4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	3358      	adds	r3, #88	; 0x58
 8000dae:	f107 0110 	add.w	r1, r7, #16
 8000db2:	440b      	add	r3, r1
 8000db4:	f843 2c34 	str.w	r2, [r3, #-52]

            if (usmart_dev.sptype == SP_TYPE_DEC)
 8000db8:	4b7b      	ldr	r3, [pc, #492]	; (8000fa8 <usmart_exe+0x2c8>)
 8000dba:	7ddb      	ldrb	r3, [r3, #23]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10d      	bne.n	8000ddc <usmart_exe+0xfc>
            {
                USMART_PRINTF("%ld", (long)temp[i]); /* Decimal argument display */
 8000dc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	3358      	adds	r3, #88	; 0x58
 8000dc8:	f107 0210 	add.w	r2, r7, #16
 8000dcc:	4413      	add	r3, r2
 8000dce:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4878      	ldr	r0, [pc, #480]	; (8000fb8 <usmart_exe+0x2d8>)
 8000dd6:	f007 faa9 	bl	800832c <iprintf>
 8000dda:	e00c      	b.n	8000df6 <usmart_exe+0x116>
            }
            else 
            {
                USMART_PRINTF("0X%X", (unsigned int)temp[i]);      /* Hexadecimal parameter display */
 8000ddc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	3358      	adds	r3, #88	; 0x58
 8000de4:	f107 0210 	add.w	r2, r7, #16
 8000de8:	4413      	add	r3, r2
 8000dea:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4872      	ldr	r0, [pc, #456]	; (8000fbc <usmart_exe+0x2dc>)
 8000df2:	f007 fa9b 	bl	800832c <iprintf>
            }
        }

        if (i != pnum - 1)USMART_PRINTF(",");
 8000df6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000dfa:	7cfb      	ldrb	r3, [r7, #19]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d002      	beq.n	8000e08 <usmart_exe+0x128>
 8000e02:	202c      	movs	r0, #44	; 0x2c
 8000e04:	f007 faa4 	bl	8008350 <putchar>
    for (i = 0; i < pnum; i++)          /* Output parameter */
 8000e08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e12:	7cfb      	ldrb	r3, [r7, #19]
 8000e14:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d388      	bcc.n	8000d2e <usmart_exe+0x4e>
    }

    USMART_PRINTF(")");
 8000e1c:	2029      	movs	r0, #41	; 0x29
 8000e1e:	f007 fa97 	bl	8008350 <putchar>
#if USMART_ENTIMX_SCAN==1
    usmart_timx_reset_time();   /* The timer is reset and the clock starts */
 8000e22:	f000 f9e1 	bl	80011e8 <usmart_timx_reset_time>
#endif

    switch (usmart_dev.pnum)
 8000e26:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <usmart_exe+0x2c8>)
 8000e28:	7d5b      	ldrb	r3, [r3, #21]
 8000e2a:	2b0a      	cmp	r3, #10
 8000e2c:	f200 810b 	bhi.w	8001046 <usmart_exe+0x366>
 8000e30:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <usmart_exe+0x158>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000e65 	.word	0x08000e65
 8000e3c:	08000e79 	.word	0x08000e79
 8000e40:	08000e93 	.word	0x08000e93
 8000e44:	08000eb1 	.word	0x08000eb1
 8000e48:	08000ecf 	.word	0x08000ecf
 8000e4c:	08000eed 	.word	0x08000eed
 8000e50:	08000f11 	.word	0x08000f11
 8000e54:	08000f3b 	.word	0x08000f3b
 8000e58:	08000f6d 	.word	0x08000f6d
 8000e5c:	08000fc1 	.word	0x08000fc1
 8000e60:	08001001 	.word	0x08001001
    {
        case 0: /* No arguments (void type) */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)();
 8000e64:	4b50      	ldr	r3, [pc, #320]	; (8000fa8 <usmart_exe+0x2c8>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4413      	add	r3, r2
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4798      	blx	r3
 8000e74:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 8000e76:	e0e6      	b.n	8001046 <usmart_exe+0x366>

        case 1: /* There is one parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0]);
 8000e78:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <usmart_exe+0x2c8>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4413      	add	r3, r2
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	4790      	blx	r2
 8000e8e:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 8000e90:	e0d9      	b.n	8001046 <usmart_exe+0x366>

        case 2: /* There is two parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1]);
 8000e92:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <usmart_exe+0x2c8>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	461c      	mov	r4, r3
 8000ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	47a0      	blx	r4
 8000eac:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 8000eae:	e0ca      	b.n	8001046 <usmart_exe+0x366>

        case 3: /* There is three parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2]);
 8000eb0:	4b3d      	ldr	r3, [pc, #244]	; (8000fa8 <usmart_exe+0x2c8>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4413      	add	r3, r2
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	461c      	mov	r4, r3
 8000ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	47a0      	blx	r4
 8000eca:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 8000ecc:	e0bb      	b.n	8001046 <usmart_exe+0x366>

        case 4: /* There is four parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3]);
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <usmart_exe+0x2c8>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4413      	add	r3, r2
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	461c      	mov	r4, r3
 8000ede:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ee6:	47a0      	blx	r4
 8000ee8:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 8000eea:	e0ac      	b.n	8001046 <usmart_exe+0x366>

        case 5: /* There is five parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4]);
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <usmart_exe+0x2c8>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	461d      	mov	r5, r3
 8000efc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000efe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f02:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8000f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	4623      	mov	r3, r4
 8000f0a:	47a8      	blx	r5
 8000f0c:	6638      	str	r0, [r7, #96]	; 0x60
            break;
 8000f0e:	e09a      	b.n	8001046 <usmart_exe+0x366>

        case 6: /* There is six parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4], \
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <usmart_exe+0x2c8>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	461e      	mov	r6, r3
 8000f20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000f24:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8000f26:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8000f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f2c:	9201      	str	r2, [sp, #4]
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	462b      	mov	r3, r5
 8000f32:	4622      	mov	r2, r4
 8000f34:	47b0      	blx	r6
 8000f36:	6638      	str	r0, [r7, #96]	; 0x60
                    temp[5]);
            break;
 8000f38:	e085      	b.n	8001046 <usmart_exe+0x366>

        case 7: /* There is seven parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4], \
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <usmart_exe+0x2c8>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4413      	add	r3, r2
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f4c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8000f4e:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8000f50:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8000f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f56:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f58:	9102      	str	r1, [sp, #8]
 8000f5a:	9201      	str	r2, [sp, #4]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	4633      	mov	r3, r6
 8000f60:	462a      	mov	r2, r5
 8000f62:	4621      	mov	r1, r4
 8000f64:	68fc      	ldr	r4, [r7, #12]
 8000f66:	47a0      	blx	r4
 8000f68:	6638      	str	r0, [r7, #96]	; 0x60
                    temp[5], temp[6]);
            break;
 8000f6a:	e06c      	b.n	8001046 <usmart_exe+0x366>

        case 8: /* There is eight parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4], \
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <usmart_exe+0x2c8>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4413      	add	r3, r2
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000f7e:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8000f80:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8000f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f8a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000f8e:	9003      	str	r0, [sp, #12]
 8000f90:	9102      	str	r1, [sp, #8]
 8000f92:	9201      	str	r2, [sp, #4]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4632      	mov	r2, r6
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	68fc      	ldr	r4, [r7, #12]
 8000fa0:	47a0      	blx	r4
 8000fa2:	6638      	str	r0, [r7, #96]	; 0x60
                    temp[5], temp[6], temp[7]);
            break;
 8000fa4:	e04f      	b.n	8001046 <usmart_exe+0x366>
 8000fa6:	bf00      	nop
 8000fa8:	2000003c 	.word	0x2000003c
 8000fac:	080097f8 	.word	0x080097f8
 8000fb0:	20000060 	.word	0x20000060
 8000fb4:	08009800 	.word	0x08009800
 8000fb8:	08009804 	.word	0x08009804
 8000fbc:	08009808 	.word	0x08009808

        case 9: /* There is nine parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4], \
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <usmart_exe+0x3dc>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4413      	add	r3, r2
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8000fd2:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8000fd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fd6:	60ba      	str	r2, [r7, #8]
 8000fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000fda:	6079      	str	r1, [r7, #4]
 8000fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000fe0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000fe2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000fe4:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8000fe6:	9404      	str	r4, [sp, #16]
 8000fe8:	9003      	str	r0, [sp, #12]
 8000fea:	9102      	str	r1, [sp, #8]
 8000fec:	9201      	str	r2, [sp, #4]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	4631      	mov	r1, r6
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	68fc      	ldr	r4, [r7, #12]
 8000ffa:	47a0      	blx	r4
 8000ffc:	6638      	str	r0, [r7, #96]	; 0x60
                    temp[5], temp[6], temp[7], temp[8]);
            break;
 8000ffe:	e022      	b.n	8001046 <usmart_exe+0x366>

        case 10:/* There is ten parameter */
            res = (*(uint32_t(*)())usmart_dev.funs[id].func)(temp[0], temp[1], temp[2], temp[3], temp[4], \
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <usmart_exe+0x3dc>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8001012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800101c:	603c      	str	r4, [r7, #0]
 800101e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001022:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001024:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001026:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8001028:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 800102a:	9505      	str	r5, [sp, #20]
 800102c:	9404      	str	r4, [sp, #16]
 800102e:	9003      	str	r0, [sp, #12]
 8001030:	9102      	str	r1, [sp, #8]
 8001032:	9201      	str	r2, [sp, #4]
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	4630      	mov	r0, r6
 800103e:	68fc      	ldr	r4, [r7, #12]
 8001040:	47a0      	blx	r4
 8001042:	6638      	str	r0, [r7, #96]	; 0x60
                    temp[5], temp[6], temp[7], temp[8], temp[9]);
            break;
 8001044:	bf00      	nop
    }

#if USMART_ENTIMX_SCAN==1
    usmart_timx_get_time(); /* Get the function execution time */
 8001046:	f000 f8ef 	bl	8001228 <usmart_timx_get_time>
#endif

    if (rval == 1)          /* Need to return a value */
 800104a:	7cbb      	ldrb	r3, [r7, #18]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d10d      	bne.n	800106c <usmart_exe+0x38c>
    {
        if (usmart_dev.sptype == SP_TYPE_DEC)USMART_PRINTF("=%lu;\r\n", (unsigned long)res);   /* Output execution result (decimal argument display) */
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <usmart_exe+0x3dc>)
 8001052:	7ddb      	ldrb	r3, [r3, #23]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d104      	bne.n	8001062 <usmart_exe+0x382>
 8001058:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800105a:	4819      	ldr	r0, [pc, #100]	; (80010c0 <usmart_exe+0x3e0>)
 800105c:	f007 f966 	bl	800832c <iprintf>
 8001060:	e007      	b.n	8001072 <usmart_exe+0x392>
        else USMART_PRINTF("=0X%X;\r\n", (unsigned int)res);  /* Output execution result (hexadecimal parameter display) */
 8001062:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001064:	4817      	ldr	r0, [pc, #92]	; (80010c4 <usmart_exe+0x3e4>)
 8001066:	f007 f961 	bl	800832c <iprintf>
 800106a:	e002      	b.n	8001072 <usmart_exe+0x392>
    }
    else USMART_PRINTF(";\r\n");    /* No return value is needed, and the output ends directly */
 800106c:	4816      	ldr	r0, [pc, #88]	; (80010c8 <usmart_exe+0x3e8>)
 800106e:	f007 f9cb 	bl	8008408 <puts>

    if (usmart_dev.runtimeflag)     /* Need to display function execution time */
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <usmart_exe+0x3dc>)
 8001074:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01b      	beq.n	80010b4 <usmart_exe+0x3d4>
    {
        USMART_PRINTF("Function Run Time:%d.%1dms\r\n", ((int)(usmart_dev.runtime / 10)), (int)(usmart_dev.runtime % 10));  /* Print the execution time of the function */
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <usmart_exe+0x3dc>)
 800107e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <usmart_exe+0x3ec>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	4618      	mov	r0, r3
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <usmart_exe+0x3dc>)
 800108e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <usmart_exe+0x3ec>)
 8001094:	fba3 2301 	umull	r2, r3, r3, r1
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	1aca      	subs	r2, r1, r3
 80010a4:	4613      	mov	r3, r2
 80010a6:	461a      	mov	r2, r3
 80010a8:	4601      	mov	r1, r0
 80010aa:	4809      	ldr	r0, [pc, #36]	; (80010d0 <usmart_exe+0x3f0>)
 80010ac:	f007 f93e 	bl	800832c <iprintf>
 80010b0:	e000      	b.n	80010b4 <usmart_exe+0x3d4>
    if (id >= usmart_dev.fnum)return;   /* No execution. */
 80010b2:	bf00      	nop
    }
}
 80010b4:	376c      	adds	r7, #108	; 0x6c
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000003c 	.word	0x2000003c
 80010c0:	08009810 	.word	0x08009810
 80010c4:	08009818 	.word	0x08009818
 80010c8:	08009824 	.word	0x08009824
 80010cc:	cccccccd 	.word	0xcccccccd
 80010d0:	08009828 	.word	0x08009828

080010d4 <usmart_scan>:
 *
 * @param  None
 * @retval None
 */
void usmart_scan(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
    uint8_t sta, len;
    char *pbuf = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]

    pbuf = usmart_get_input_string();   /* Get the data stream */
 80010de:	f000 f863 	bl	80011a8 <usmart_get_input_string>
 80010e2:	60b8      	str	r0, [r7, #8]
    if (pbuf == 0) return ;             /* Data stream is empty, return directly */
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d038      	beq.n	800115c <usmart_scan+0x88>
     
    sta = usmart_dev.cmd_rec(pbuf);     /* Get information about the function */
 80010ea:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <usmart_scan+0x90>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	4798      	blx	r3
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]

    if (sta == 0)
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <usmart_scan+0x30>
    {
        usmart_dev.exe();               /* Executing the function */
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <usmart_scan+0x90>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4798      	blx	r3
 8001102:	e02c      	b.n	800115e <usmart_scan+0x8a>
    }
    else
    {
        len = usmart_sys_cmd_exe(pbuf);
 8001104:	68b8      	ldr	r0, [r7, #8]
 8001106:	f7ff fb95 	bl	8000834 <usmart_sys_cmd_exe>
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]

        if (len != USMART_FUNCERR)sta = len;
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d001      	beq.n	8001118 <usmart_scan+0x44>
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	73fb      	strb	r3, [r7, #15]

        if (sta)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d01f      	beq.n	800115e <usmart_scan+0x8a>
        {
            switch (sta)
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	3b01      	subs	r3, #1
 8001122:	2b03      	cmp	r3, #3
 8001124:	d81b      	bhi.n	800115e <usmart_scan+0x8a>
 8001126:	a201      	add	r2, pc, #4	; (adr r2, 800112c <usmart_scan+0x58>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	0800113d 	.word	0x0800113d
 8001130:	08001145 	.word	0x08001145
 8001134:	0800114d 	.word	0x0800114d
 8001138:	08001155 	.word	0x08001155
            {
                case USMART_FUNCERR:
                    USMART_PRINTF("Function error!\r\n");
 800113c:	480a      	ldr	r0, [pc, #40]	; (8001168 <usmart_scan+0x94>)
 800113e:	f007 f963 	bl	8008408 <puts>
                    break;
 8001142:	e00c      	b.n	800115e <usmart_scan+0x8a>

                case USMART_PARMERR:
                    USMART_PRINTF("Parameter error\r\n");
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <usmart_scan+0x98>)
 8001146:	f007 f95f 	bl	8008408 <puts>
                    break;
 800114a:	e008      	b.n	800115e <usmart_scan+0x8a>

                case USMART_PARMOVER:
                    USMART_PRINTF("Parameter number too much\r\n");
 800114c:	4808      	ldr	r0, [pc, #32]	; (8001170 <usmart_scan+0x9c>)
 800114e:	f007 f95b 	bl	8008408 <puts>
                    break;
 8001152:	e004      	b.n	800115e <usmart_scan+0x8a>

                case USMART_NOFUNCFIND:
                    USMART_PRINTF("No matching function found!\r\n");
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <usmart_scan+0xa0>)
 8001156:	f007 f957 	bl	8008408 <puts>
                    break;
 800115a:	e000      	b.n	800115e <usmart_scan+0x8a>
    if (pbuf == 0) return ;             /* Data stream is empty, return directly */
 800115c:	bf00      	nop
            }
        }
    } 
 
}
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000003c 	.word	0x2000003c
 8001168:	08009848 	.word	0x08009848
 800116c:	0800985c 	.word	0x0800985c
 8001170:	08009870 	.word	0x08009870
 8001174:	0800988c 	.word	0x0800988c

08001178 <read_addr>:
 * @brief  Reads the value at the specified address
 * @param  addr : the value at the specified address
 * @retval address
 */ 
uint32_t read_addr(uint32_t addr)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
    return *(uint32_t *)addr;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <write_addr>:
 * @param  addr : the value at the specified address
 * @param  val  : the value
 * @retval address
 */
void write_addr(uint32_t addr, uint32_t val)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
    *(uint32_t *)addr = val;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	601a      	str	r2, [r3, #0]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <usmart_get_input_string>:
 * @retval
 * @arg        0, no data received
 * @arg        Other, stream start address (cannot be 0)
 */
char *usmart_get_input_string(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
    uint8_t len;
    char *pbuf = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]

    if (g_usart_rx_sta & 0x8000)        /* Complete serial port reception? */
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <usmart_get_input_string+0x38>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da0b      	bge.n	80011d4 <usmart_get_input_string+0x2c>
    {
        len = g_usart_rx_sta & 0x3fff;  /* Get the length of the received data */
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <usmart_get_input_string+0x38>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	70fb      	strb	r3, [r7, #3]
        g_usart_rx_buf[len] = '\0';     /* Add the terminator at the end. */
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <usmart_get_input_string+0x3c>)
 80011c6:	2100      	movs	r1, #0
 80011c8:	54d1      	strb	r1, [r2, r3]
        pbuf = (char*)g_usart_rx_buf;
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <usmart_get_input_string+0x3c>)
 80011cc:	607b      	str	r3, [r7, #4]
        g_usart_rx_sta = 0;             /* Enable next reception */
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <usmart_get_input_string+0x38>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	801a      	strh	r2, [r3, #0]
    }

    return pbuf;
 80011d4:	687b      	ldr	r3, [r7, #4]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	20000328 	.word	0x20000328
 80011e4:	20000260 	.word	0x20000260

080011e8 <usmart_timx_reset_time>:
 * @note    needs to be modified according to the timer parameters of the MCU to be ported
 * @param   None
 * @retval  None
 */
void usmart_timx_reset_time(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
    __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE); /* Clear the interrupt flag bit */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <usmart_timx_reset_time+0x38>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f06f 0201 	mvn.w	r2, #1
 80011f4:	611a      	str	r2, [r3, #16]
    __HAL_TIM_SET_AUTORELOAD(&htim4, 0XFFFF);      /* Set the reload value to the maximum */
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <usmart_timx_reset_time+0x38>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <usmart_timx_reset_time+0x38>)
 8001202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001206:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COUNTER(&htim4, 0);              /* Clear counter */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <usmart_timx_reset_time+0x38>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
    usmart_dev.runtime = 0;
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <usmart_timx_reset_time+0x3c>)
 8001212:	2200      	movs	r2, #0
 8001214:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	20000218 	.word	0x20000218
 8001224:	2000003c 	.word	0x2000003c

08001228 <usmart_timx_get_time>:
 * @note    needs to be modified according to the timer parameters of the MCU to be ported
 * @param   none
 * @retval  execution time in 0.1ms. The maximum delay time is 2 times the CNT value *0.1ms
 */
uint32_t usmart_timx_get_time(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) == SET)  /* During the run, a timer overflow occurs */
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <usmart_timx_get_time+0x48>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b01      	cmp	r3, #1
 8001238:	d108      	bne.n	800124c <usmart_timx_get_time+0x24>
    {
        usmart_dev.runtime += 0XFFFF;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <usmart_timx_get_time+0x4c>)
 800123c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001240:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001244:	33ff      	adds	r3, #255	; 0xff
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <usmart_timx_get_time+0x4c>)
 8001248:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }
    usmart_dev.runtime += __HAL_TIM_GET_COUNTER(&htim4);
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <usmart_timx_get_time+0x48>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <usmart_timx_get_time+0x4c>)
 8001254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001258:	4413      	add	r3, r2
 800125a:	4a06      	ldr	r2, [pc, #24]	; (8001274 <usmart_timx_get_time+0x4c>)
 800125c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    return usmart_dev.runtime;                               /* Return count value */
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <usmart_timx_get_time+0x4c>)
 8001262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000218 	.word	0x20000218
 8001274:	2000003c 	.word	0x2000003c

08001278 <TIM4_IRQHandler>:
 * @brief   USMART timer interrupt service function
 * @param   None.
 * @retval  None.
 */
void TIM4_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	/* overflow trap */
	if(__HAL_TIM_GET_IT_SOURCE(&htim4,TIM_IT_UPDATE)==SET)
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <TIM4_IRQHandler+0x3c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b01      	cmp	r3, #1
 8001288:	d10d      	bne.n	80012a6 <TIM4_IRQHandler+0x2e>
	{

		usmart_dev.scan();                              	/* usmart scan */
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <TIM4_IRQHandler+0x40>)
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	4798      	blx	r3
		__HAL_TIM_SET_COUNTER(&htim4, 0);;    				/* Clear counter */
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <TIM4_IRQHandler+0x3c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(&htim4, 100);				/* Restore the original Settings */
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <TIM4_IRQHandler+0x3c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2264      	movs	r2, #100	; 0x64
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <TIM4_IRQHandler+0x3c>)
 80012a2:	2264      	movs	r2, #100	; 0x64
 80012a4:	60da      	str	r2, [r3, #12]
	}
	__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);				/* Clear the interrupt flag bit */
 80012a6:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <TIM4_IRQHandler+0x3c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f06f 0201 	mvn.w	r2, #1
 80012ae:	611a      	str	r2, [r3, #16]
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000218 	.word	0x20000218
 80012b8:	2000003c 	.word	0x2000003c

080012bc <usmart_strcmp>:
 * @param   str1 : first address of string 1 (pointer)
 * @param   str2 : first address of string 2 (pointer)
 * @retval  0, equal; 1, not equal;
 */
uint8_t usmart_strcmp(char *str1, char *str2)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    while (1)
    {
        if (*str1 != *str2)return 1; /* unequal */
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <usmart_strcmp+0x1a>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00c      	b.n	80012f0 <usmart_strcmp+0x34>

        if (*str1 == '\0')break;    /* The comparison is done. */
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <usmart_strcmp+0x30>

        str1++;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3301      	adds	r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
        str2++;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	603b      	str	r3, [r7, #0]
        if (*str1 != *str2)return 1; /* unequal */
 80012ea:	e7ec      	b.n	80012c6 <usmart_strcmp+0xa>
        if (*str1 == '\0')break;    /* The comparison is done. */
 80012ec:	bf00      	nop
    }

    return 0;/* Two strings are equal */
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <usmart_strcopy>:
 * @param   src : source address
 * @param   dst : destination address
 * @retval  0, equal; 1, not equal;
 */
void usmart_strcopy(char *src, char *dst)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
    while (1)
    {
        *dst = *src;            /* copy */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	701a      	strb	r2, [r3, #0]

        if (*src == '\0')break; /* The copy is complete. */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <usmart_strcopy+0x28>

        src++;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3301      	adds	r3, #1
 8001318:	607b      	str	r3, [r7, #4]
        dst++;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	603b      	str	r3, [r7, #0]
        *dst = *src;            /* copy */
 8001320:	e7f0      	b.n	8001304 <usmart_strcopy+0xa>
        if (*src == '\0')break; /* The copy is complete. */
 8001322:	bf00      	nop
    }
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <usmart_strlen>:
 * @brief   Gets the length of the string in bytes.
 * @param   str : String pointer
 * @retval  The length of the string
 */
uint8_t usmart_strlen(char *str)
{
 800132e:	b480      	push	{r7}
 8001330:	b085      	sub	sp, #20
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
    uint8_t len = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]

    while (1)
    {
        if (*str == '\0')break; /* The copy is complete. */
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <usmart_strlen+0x22>

        len++;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	3301      	adds	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
        str++;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3301      	adds	r3, #1
 800134c:	607b      	str	r3, [r7, #4]
        if (*str == '\0')break; /* The copy is complete. */
 800134e:	e7f4      	b.n	800133a <usmart_strlen+0xc>
 8001350:	bf00      	nop
    }

    return len;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <usmart_pow>:
 * @param   m : The base
 * @param   n : The index
 * @retval  m to the n
 */
uint32_t usmart_pow(uint8_t m, uint8_t n)
{
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	460a      	mov	r2, r1
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	4613      	mov	r3, r2
 800136c:	71bb      	strb	r3, [r7, #6]
    uint32_t result = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]

    while (n--)result *= m;
 8001372:	e004      	b.n	800137e <usmart_pow+0x20>
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	79bb      	ldrb	r3, [r7, #6]
 8001380:	1e5a      	subs	r2, r3, #1
 8001382:	71ba      	strb	r2, [r7, #6]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f5      	bne.n	8001374 <usmart_pow+0x16>

    return result;
 8001388:	68fb      	ldr	r3, [r7, #12]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <usmart_str2num>:
 * @arg     2, the hexadecimal digit is 0
 * @arg     3, the starting format is wrong
 * @arg     4, with a decimal digit of 0
 */
uint8_t usmart_str2num(char *str, uint32_t *res)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
    uint32_t t;
    int tnum;
    uint8_t bnum = 0;       /* Number of bits */
 800139e:	2300      	movs	r3, #0
 80013a0:	76fb      	strb	r3, [r7, #27]
    char *p;
    uint8_t hexdec = 10;    /* The default is decimal data */
 80013a2:	230a      	movs	r3, #10
 80013a4:	74fb      	strb	r3, [r7, #19]
    uint8_t flag = 0;       /* 0, there is no symbol to mark. 1, which represents a positive number 2 is a negative number. */
 80013a6:	2300      	movs	r3, #0
 80013a8:	74bb      	strb	r3, [r7, #18]
    p = str;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	617b      	str	r3, [r7, #20]
    *res = 0;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

    while (1)
    {
        /* Parameter validity checking */
        if ((*p <= '9' && *p >= '0') || ((*str == '-' || *str == '+') && bnum == 0) || (*p <= 'F' && *p >= 'A') || (*p == 'X' && bnum == 1))
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b39      	cmp	r3, #57	; 0x39
 80013ba:	d803      	bhi.n	80013c4 <usmart_str2num+0x30>
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b2f      	cmp	r3, #47	; 0x2f
 80013c2:	d819      	bhi.n	80013f8 <usmart_str2num+0x64>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b2d      	cmp	r3, #45	; 0x2d
 80013ca:	d003      	beq.n	80013d4 <usmart_str2num+0x40>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b2b      	cmp	r3, #43	; 0x2b
 80013d2:	d102      	bne.n	80013da <usmart_str2num+0x46>
 80013d4:	7efb      	ldrb	r3, [r7, #27]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00e      	beq.n	80013f8 <usmart_str2num+0x64>
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b46      	cmp	r3, #70	; 0x46
 80013e0:	d803      	bhi.n	80013ea <usmart_str2num+0x56>
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b40      	cmp	r3, #64	; 0x40
 80013e8:	d806      	bhi.n	80013f8 <usmart_str2num+0x64>
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b58      	cmp	r3, #88	; 0x58
 80013f0:	d120      	bne.n	8001434 <usmart_str2num+0xa0>
 80013f2:	7efb      	ldrb	r3, [r7, #27]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d11d      	bne.n	8001434 <usmart_str2num+0xa0>
        {
            if (*p >= 'A')hexdec = 16;  /* There are letters in the string, in hexadecimal format. */
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b40      	cmp	r3, #64	; 0x40
 80013fe:	d901      	bls.n	8001404 <usmart_str2num+0x70>
 8001400:	2310      	movs	r3, #16
 8001402:	74fb      	strb	r3, [r7, #19]

            if (*str == '-')
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b2d      	cmp	r3, #45	; 0x2d
 800140a:	d105      	bne.n	8001418 <usmart_str2num+0x84>
            {
                flag = 2;   /* Offset the sign */
 800140c:	2302      	movs	r3, #2
 800140e:	74bb      	strb	r3, [r7, #18]
                str += 1;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3301      	adds	r3, #1
 8001414:	607b      	str	r3, [r7, #4]
            if (*str == '-')
 8001416:	e013      	b.n	8001440 <usmart_str2num+0xac>
            }
            else if (*str == '+')
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b2b      	cmp	r3, #43	; 0x2b
 800141e:	d105      	bne.n	800142c <usmart_str2num+0x98>
            {
                flag = 1;   /* Offset the sign */
 8001420:	2301      	movs	r3, #1
 8001422:	74bb      	strb	r3, [r7, #18]
                str += 1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3301      	adds	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
            if (*str == '-')
 800142a:	e009      	b.n	8001440 <usmart_str2num+0xac>
            }
            else
            {
                bnum++;     /* The number of bits increased. */
 800142c:	7efb      	ldrb	r3, [r7, #27]
 800142e:	3301      	adds	r3, #1
 8001430:	76fb      	strb	r3, [r7, #27]
            if (*str == '-')
 8001432:	e005      	b.n	8001440 <usmart_str2num+0xac>
            }
        }
        else if (*p == '\0')
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <usmart_str2num+0xb4>
        {
            break;         /* At the end, exit */
        }
        else
        {
            return 1;      /* Not all decimal or hexadecimal data. */
 800143c:	2301      	movs	r3, #1
 800143e:	e05f      	b.n	8001500 <usmart_str2num+0x16c>
        }

        p++;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
        if ((*p <= '9' && *p >= '0') || ((*str == '-' || *str == '+') && bnum == 0) || (*p <= 'F' && *p >= 'A') || (*p == 'X' && bnum == 1))
 8001446:	e7b5      	b.n	80013b4 <usmart_str2num+0x20>
            break;         /* At the end, exit */
 8001448:	bf00      	nop
    }

    p = str;               /* Relocates to the start of the string. */
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	617b      	str	r3, [r7, #20]

    if (hexdec == 16)      /* Hexadecimal data */
 800144e:	7cfb      	ldrb	r3, [r7, #19]
 8001450:	2b10      	cmp	r3, #16
 8001452:	d116      	bne.n	8001482 <usmart_str2num+0xee>
    {
        if (bnum < 3)return 2;  /* If the number of bits is less than 3, exit. Because 0X takes up 2 of them,
 8001454:	7efb      	ldrb	r3, [r7, #27]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d801      	bhi.n	800145e <usmart_str2num+0xca>
 800145a:	2302      	movs	r3, #2
 800145c:	e050      	b.n	8001500 <usmart_str2num+0x16c>
                                 * if 0X is not followed by data, the data is invalid. */

        if (*p == '0' && (*(p + 1) == 'X'))   /* It must start with '0X'. */
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b30      	cmp	r3, #48	; 0x30
 8001464:	d10b      	bne.n	800147e <usmart_str2num+0xea>
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b58      	cmp	r3, #88	; 0x58
 800146e:	d106      	bne.n	800147e <usmart_str2num+0xea>
        {
            p += 2;        /* Offset to the data start address. */
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3302      	adds	r3, #2
 8001474:	617b      	str	r3, [r7, #20]
            bnum -= 2;     /* Subtract the offset */
 8001476:	7efb      	ldrb	r3, [r7, #27]
 8001478:	3b02      	subs	r3, #2
 800147a:	76fb      	strb	r3, [r7, #27]
 800147c:	e006      	b.n	800148c <usmart_str2num+0xf8>
        }
        else
        {
            return 3;      /* The starting header is not in the right format */
 800147e:	2303      	movs	r3, #3
 8001480:	e03e      	b.n	8001500 <usmart_str2num+0x16c>
        }
    }
    else if (bnum == 0)
 8001482:	7efb      	ldrb	r3, [r7, #27]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <usmart_str2num+0xf8>
    {
        return 4;          /* If the number of bits is 0, exit directly */
 8001488:	2304      	movs	r3, #4
 800148a:	e039      	b.n	8001500 <usmart_str2num+0x16c>
    }

    while (1)
    {
        if (bnum)bnum--;
 800148c:	7efb      	ldrb	r3, [r7, #27]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <usmart_str2num+0x104>
 8001492:	7efb      	ldrb	r3, [r7, #27]
 8001494:	3b01      	subs	r3, #1
 8001496:	76fb      	strb	r3, [r7, #27]

        if (*p <= '9' && *p >= '0')t = *p - '0';  /* Get the value of the number */
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b39      	cmp	r3, #57	; 0x39
 800149e:	d808      	bhi.n	80014b2 <usmart_str2num+0x11e>
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b2f      	cmp	r3, #47	; 0x2f
 80014a6:	d904      	bls.n	80014b2 <usmart_str2num+0x11e>
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	3b30      	subs	r3, #48	; 0x30
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	e003      	b.n	80014ba <usmart_str2num+0x126>
        else t = *p - 'A' + 10;                   /* The corresponding values of A~F are obtained */
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	3b37      	subs	r3, #55	; 0x37
 80014b8:	61fb      	str	r3, [r7, #28]

        *res += t * usmart_pow(hexdec, bnum);
 80014ba:	7efa      	ldrb	r2, [r7, #27]
 80014bc:	7cfb      	ldrb	r3, [r7, #19]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff4c 	bl	800135e <usmart_pow>
 80014c6:	4602      	mov	r2, r0
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	fb03 f202 	mul.w	r2, r3, r2
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	441a      	add	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	601a      	str	r2, [r3, #0]
        p++;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3301      	adds	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]

        if (*p == '\0')break;                     /* done with the data */
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d000      	beq.n	80014e8 <usmart_str2num+0x154>
        if (bnum)bnum--;
 80014e6:	e7d1      	b.n	800148c <usmart_str2num+0xf8>
        if (*p == '\0')break;                     /* done with the data */
 80014e8:	bf00      	nop
    }

    if (flag == 2)                                /* Is it a negative number? */
 80014ea:	7cbb      	ldrb	r3, [r7, #18]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d106      	bne.n	80014fe <usmart_str2num+0x16a>
    {
        tnum = -*res;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	425b      	negs	r3, r3
 80014f6:	60fb      	str	r3, [r7, #12]
        *res = tnum;
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	601a      	str	r2, [r3, #0]
    }

    return 0;                                     /* Successful conversion. */
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <usmart_get_cmdname>:
 * @param   nlen    : The length of the instruction name
 * @param   maxlen  : Maximum length (to limit, instructions can't be too long)
 * @retval  0, success; Others, fail.
 */
uint8_t usmart_get_cmdname(char *str, char *cmdname, uint8_t *nlen, uint8_t maxlen)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	70fb      	strb	r3, [r7, #3]
    *nlen = 0;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]

    while (*str != ' ' && *str != '\0') /* If a space or terminator is found, it is considered over */
 800151c:	e016      	b.n	800154c <usmart_get_cmdname+0x44>
    {
        *cmdname = *str;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	701a      	strb	r2, [r3, #0]
        str++;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3301      	adds	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
        cmdname++;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
        (*nlen)++;                      /* Counting command length */
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	b2da      	uxtb	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	701a      	strb	r2, [r3, #0]

        if (*nlen >= maxlen)return 1;   /* Wrong instruction */
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	429a      	cmp	r2, r3
 8001546:	d801      	bhi.n	800154c <usmart_get_cmdname+0x44>
 8001548:	2301      	movs	r3, #1
 800154a:	e00b      	b.n	8001564 <usmart_get_cmdname+0x5c>
    while (*str != ' ' && *str != '\0') /* If a space or terminator is found, it is considered over */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b20      	cmp	r3, #32
 8001552:	d003      	beq.n	800155c <usmart_get_cmdname+0x54>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1e0      	bne.n	800151e <usmart_get_cmdname+0x16>
    }

    *cmdname = '\0';                    /* Adding a terminator */
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
    return 0;                           /* Return as normal */
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <usmart_search_nextc>:
 * @brief   gets the next character (when there are a lot of Spaces in between, this function simply ignores the space and finds the first character after the space)
 * @param   str : String pointer
 * @retval  The next character
 */
uint8_t usmart_search_nextc(char *str)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
    str++;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3301      	adds	r3, #1
 800157a:	607b      	str	r3, [r7, #4]

    while (*str == ' ' && str != 0)str++;
 800157c:	e002      	b.n	8001584 <usmart_search_nextc+0x16>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3301      	adds	r3, #1
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b20      	cmp	r3, #32
 800158a:	d102      	bne.n	8001592 <usmart_search_nextc+0x24>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f5      	bne.n	800157e <usmart_search_nextc+0x10>

    return *str;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <usmart_get_fname>:
 * @param   pnum  : The number of arguments in the function
 * @param   rval  : Should the return value be displayed (0, no; 1, need)
 * @retval  0, success; Other, error code.
 */
uint8_t usmart_get_fname(char *str, char *fname, uint8_t *pnum, uint8_t *rval)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t fover = 0;  /* Bracket depth */
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char *strtemp;
    uint8_t offset = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	77fb      	strb	r3, [r7, #31]
    uint8_t parmnum = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	77bb      	strb	r3, [r7, #30]
    uint8_t temp = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	777b      	strb	r3, [r7, #29]
    char fpname[6];     /* void+X+'/0' */
    uint8_t fplcnt = 0; /* The length counter of the first argument */
 80015c0:	2300      	movs	r3, #0
 80015c2:	773b      	strb	r3, [r7, #28]
    uint8_t pcnt = 0;   /* Parameter counters */
 80015c4:	2300      	movs	r3, #0
 80015c6:	76fb      	strb	r3, [r7, #27]
    uint8_t nchar;

    /* Determining whether a function returns a value */
    strtemp = str;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	623b      	str	r3, [r7, #32]

    while (*strtemp != '\0')    /* Do not end. */
 80015cc:	e02b      	b.n	8001626 <usmart_get_fname+0x86>
    {
        if (*strtemp != ' ' && (pcnt & 0X7F) < 5)   /* A maximum of 5 characters is recorded */
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	d021      	beq.n	800161a <usmart_get_fname+0x7a>
 80015d6:	7efb      	ldrb	r3, [r7, #27]
 80015d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015dc:	2b04      	cmp	r3, #4
 80015de:	dc1c      	bgt.n	800161a <usmart_get_fname+0x7a>
        {
            if (pcnt == 0)pcnt |= 0X80;       /* When the most significant bit is set, the flag begins to receive the return type */
 80015e0:	7efb      	ldrb	r3, [r7, #27]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d103      	bne.n	80015ee <usmart_get_fname+0x4e>
 80015e6:	7efb      	ldrb	r3, [r7, #27]
 80015e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ec:	76fb      	strb	r3, [r7, #27]

            if (((pcnt & 0x7f) == 4) && (*strtemp != '*'))break;    /* The last character, must be * */
 80015ee:	7efb      	ldrb	r3, [r7, #27]
 80015f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d103      	bne.n	8001600 <usmart_get_fname+0x60>
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b2a      	cmp	r3, #42	; 0x2a
 80015fe:	d117      	bne.n	8001630 <usmart_get_fname+0x90>

            fpname[pcnt & 0x7f] = *strtemp;   /* Keep track of the return type of the function */
 8001600:	7efb      	ldrb	r3, [r7, #27]
 8001602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001606:	6a3a      	ldr	r2, [r7, #32]
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	3328      	adds	r3, #40	; 0x28
 800160c:	443b      	add	r3, r7
 800160e:	f803 2c14 	strb.w	r2, [r3, #-20]
            pcnt++;
 8001612:	7efb      	ldrb	r3, [r7, #27]
 8001614:	3301      	adds	r3, #1
 8001616:	76fb      	strb	r3, [r7, #27]
 8001618:	e002      	b.n	8001620 <usmart_get_fname+0x80>
        }
        else if (pcnt == 0X85)
 800161a:	7efb      	ldrb	r3, [r7, #27]
 800161c:	2b85      	cmp	r3, #133	; 0x85
 800161e:	d009      	beq.n	8001634 <usmart_get_fname+0x94>
        {
            break;
        }

        strtemp++;
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	3301      	adds	r3, #1
 8001624:	623b      	str	r3, [r7, #32]
    while (*strtemp != '\0')    /* Do not end. */
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1cf      	bne.n	80015ce <usmart_get_fname+0x2e>
 800162e:	e002      	b.n	8001636 <usmart_get_fname+0x96>
            if (((pcnt & 0x7f) == 4) && (*strtemp != '*'))break;    /* The last character, must be * */
 8001630:	bf00      	nop
 8001632:	e000      	b.n	8001636 <usmart_get_fname+0x96>
            break;
 8001634:	bf00      	nop
    }

    if (pcnt)           /* Completion of reception */
 8001636:	7efb      	ldrb	r3, [r7, #27]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d019      	beq.n	8001670 <usmart_get_fname+0xd0>
    {
        fpname[pcnt & 0x7f] = '\0'; /* Adding a terminator */
 800163c:	7efb      	ldrb	r3, [r7, #27]
 800163e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001642:	3328      	adds	r3, #40	; 0x28
 8001644:	443b      	add	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	f803 2c14 	strb.w	r2, [r3, #-20]

        if (usmart_strcmp(fpname, "void") == 0)
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4974      	ldr	r1, [pc, #464]	; (8001824 <usmart_get_fname+0x284>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe32 	bl	80012bc <usmart_strcmp>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d103      	bne.n	8001666 <usmart_get_fname+0xc6>
        {
            *rval = 0;  /* No return value is required */
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e002      	b.n	800166c <usmart_get_fname+0xcc>
        }
        else
        {
            *rval = 1;  /* Need to return a value */
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
        }

        pcnt = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	76fb      	strb	r3, [r7, #27]
    }

    res = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    strtemp = str;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	623b      	str	r3, [r7, #32]

    while (*strtemp != '(' && *strtemp != '\0')   /* This code finds the real starting position of the function name */
 800167a:	e01d      	b.n	80016b8 <usmart_get_fname+0x118>
    {
        strtemp++;
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	3301      	adds	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
        res++;
 8001682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001686:	3301      	adds	r3, #1
 8001688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (*strtemp == ' ' || *strtemp == '*')
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b20      	cmp	r3, #32
 8001692:	d003      	beq.n	800169c <usmart_get_fname+0xfc>
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b2a      	cmp	r3, #42	; 0x2a
 800169a:	d10d      	bne.n	80016b8 <usmart_get_fname+0x118>
        {
            nchar = usmart_search_nextc(strtemp);   /* Gets the next character */
 800169c:	6a38      	ldr	r0, [r7, #32]
 800169e:	f7ff ff66 	bl	800156e <usmart_search_nextc>
 80016a2:	4603      	mov	r3, r0
 80016a4:	76bb      	strb	r3, [r7, #26]

            if (nchar != '(' && nchar != '*')offset = res;  /* Skip Spaces and * signs */
 80016a6:	7ebb      	ldrb	r3, [r7, #26]
 80016a8:	2b28      	cmp	r3, #40	; 0x28
 80016aa:	d005      	beq.n	80016b8 <usmart_get_fname+0x118>
 80016ac:	7ebb      	ldrb	r3, [r7, #26]
 80016ae:	2b2a      	cmp	r3, #42	; 0x2a
 80016b0:	d002      	beq.n	80016b8 <usmart_get_fname+0x118>
 80016b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016b6:	77fb      	strb	r3, [r7, #31]
    while (*strtemp != '(' && *strtemp != '\0')   /* This code finds the real starting position of the function name */
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b28      	cmp	r3, #40	; 0x28
 80016be:	d003      	beq.n	80016c8 <usmart_get_fname+0x128>
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1d9      	bne.n	800167c <usmart_get_fname+0xdc>
        }
    }

    strtemp = str;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	623b      	str	r3, [r7, #32]

    if (offset)strtemp += offset + 1;   /* Skip to the beginning of the function name */
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <usmart_get_fname+0x13c>
 80016d2:	7ffb      	ldrb	r3, [r7, #31]
 80016d4:	3301      	adds	r3, #1
 80016d6:	6a3a      	ldr	r2, [r7, #32]
 80016d8:	4413      	add	r3, r2
 80016da:	623b      	str	r3, [r7, #32]

    res = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    nchar = 0;  /* Whether the flag is in the string,0, is not in the string; 1, in the string; */
 80016e2:	2300      	movs	r3, #0
 80016e4:	76bb      	strb	r3, [r7, #26]

    while (1)
    {
        if (*strtemp == 0)
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <usmart_get_fname+0x156>
        {
            res = USMART_FUNCERR;   /* Function errors */
 80016ee:	2301      	movs	r3, #1
 80016f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80016f4:	e076      	b.n	80017e4 <usmart_get_fname+0x244>
        }
        else if (*strtemp == '(' && nchar == 0)
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b28      	cmp	r3, #40	; 0x28
 80016fc:	d108      	bne.n	8001710 <usmart_get_fname+0x170>
 80016fe:	7ebb      	ldrb	r3, [r7, #26]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <usmart_get_fname+0x170>
        {
            fover++;                /* Bracket depth is increased by one level */
 8001704:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001708:	3301      	adds	r3, #1
 800170a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800170e:	e023      	b.n	8001758 <usmart_get_fname+0x1b8>
        }
        else if (*strtemp == ')' && nchar == 0)
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b29      	cmp	r3, #41	; 0x29
 8001716:	d114      	bne.n	8001742 <usmart_get_fname+0x1a2>
 8001718:	7ebb      	ldrb	r3, [r7, #26]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d111      	bne.n	8001742 <usmart_get_fname+0x1a2>
        {
            if (fover)
 800171e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <usmart_get_fname+0x192>
            {
                fover--;
 8001726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800172a:	3b01      	subs	r3, #1
 800172c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001730:	e002      	b.n	8001738 <usmart_get_fname+0x198>
            }
            else
            {
                res = USMART_FUNCERR;  /* End error, no '(' */
 8001732:	2301      	movs	r3, #1
 8001734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }

            if (fover == 0)break;      /* At the end, exit */
 8001738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10b      	bne.n	8001758 <usmart_get_fname+0x1b8>
 8001740:	e050      	b.n	80017e4 <usmart_get_fname+0x244>
        }
        else if (*strtemp == '"')
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b22      	cmp	r3, #34	; 0x22
 8001748:	d106      	bne.n	8001758 <usmart_get_fname+0x1b8>
        {
            nchar = !nchar;
 800174a:	7ebb      	ldrb	r3, [r7, #26]
 800174c:	2b00      	cmp	r3, #0
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	76bb      	strb	r3, [r7, #26]
        }

        if (fover == 0)                /* We're not done with function names yet */
 8001758:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10b      	bne.n	8001778 <usmart_get_fname+0x1d8>
        {
            if (*strtemp != ' ')       /* Spaces are not part of function names */
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b20      	cmp	r3, #32
 8001766:	d039      	beq.n	80017dc <usmart_get_fname+0x23c>
            {
                *fname = *strtemp;     /* Get the function name */
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	701a      	strb	r2, [r3, #0]
                fname++;
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3301      	adds	r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	e031      	b.n	80017dc <usmart_get_fname+0x23c>
            }
        }
        else                           /* You're done accepting the function name. */
        {
            if (*strtemp == ',')
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b2c      	cmp	r3, #44	; 0x2c
 800177e:	d105      	bne.n	800178c <usmart_get_fname+0x1ec>
            {
                temp = 1;              /* Enable to add a parameter */
 8001780:	2301      	movs	r3, #1
 8001782:	777b      	strb	r3, [r7, #29]
                pcnt++;
 8001784:	7efb      	ldrb	r3, [r7, #27]
 8001786:	3301      	adds	r3, #1
 8001788:	76fb      	strb	r3, [r7, #27]
 800178a:	e01a      	b.n	80017c2 <usmart_get_fname+0x222>
            }
            else if (*strtemp != ' ' && *strtemp != '(')
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b20      	cmp	r3, #32
 8001792:	d016      	beq.n	80017c2 <usmart_get_fname+0x222>
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b28      	cmp	r3, #40	; 0x28
 800179a:	d012      	beq.n	80017c2 <usmart_get_fname+0x222>
            {
                if (pcnt == 0 && fplcnt < 5)    /* When the first argument comes, a judgment must be made in order to avoid counting arguments of type void. */
 800179c:	7efb      	ldrb	r3, [r7, #27]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <usmart_get_fname+0x21c>
 80017a2:	7f3b      	ldrb	r3, [r7, #28]
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d809      	bhi.n	80017bc <usmart_get_fname+0x21c>
                {
                    fpname[fplcnt] = *strtemp;  /* Record the parameter characteristics. */
 80017a8:	7f3b      	ldrb	r3, [r7, #28]
 80017aa:	6a3a      	ldr	r2, [r7, #32]
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	3328      	adds	r3, #40	; 0x28
 80017b0:	443b      	add	r3, r7
 80017b2:	f803 2c14 	strb.w	r2, [r3, #-20]
                    fplcnt++;
 80017b6:	7f3b      	ldrb	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	773b      	strb	r3, [r7, #28]
                }

                temp++;         /* Get valid arguments (not Spaces) */
 80017bc:	7f7b      	ldrb	r3, [r7, #29]
 80017be:	3301      	adds	r3, #1
 80017c0:	777b      	strb	r3, [r7, #29]
            }

            if (fover == 1 && temp == 2)
 80017c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d108      	bne.n	80017dc <usmart_get_fname+0x23c>
 80017ca:	7f7b      	ldrb	r3, [r7, #29]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d105      	bne.n	80017dc <usmart_get_fname+0x23c>
            {
                temp++;         /* Prevent repeated increases */
 80017d0:	7f7b      	ldrb	r3, [r7, #29]
 80017d2:	3301      	adds	r3, #1
 80017d4:	777b      	strb	r3, [r7, #29]
                parmnum++;      /* Adding a parameter */
 80017d6:	7fbb      	ldrb	r3, [r7, #30]
 80017d8:	3301      	adds	r3, #1
 80017da:	77bb      	strb	r3, [r7, #30]
            }
        }

        strtemp++;
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	3301      	adds	r3, #1
 80017e0:	623b      	str	r3, [r7, #32]
        if (*strtemp == 0)
 80017e2:	e780      	b.n	80016e6 <usmart_get_fname+0x146>
    }

    if (parmnum == 1)           /* There is only one parameter. */
 80017e4:	7fbb      	ldrb	r3, [r7, #30]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d110      	bne.n	800180c <usmart_get_fname+0x26c>
    {
        fpname[fplcnt] = '\0';  /* Adding a terminator */
 80017ea:	7f3b      	ldrb	r3, [r7, #28]
 80017ec:	3328      	adds	r3, #40	; 0x28
 80017ee:	443b      	add	r3, r7
 80017f0:	2200      	movs	r2, #0
 80017f2:	f803 2c14 	strb.w	r2, [r3, #-20]

        if (usmart_strcmp(fpname, "void") == 0)parmnum = 0; /* The argument is void, meaning there is no argument. */
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	490a      	ldr	r1, [pc, #40]	; (8001824 <usmart_get_fname+0x284>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fd5d 	bl	80012bc <usmart_strcmp>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <usmart_get_fname+0x26c>
 8001808:	2300      	movs	r3, #0
 800180a:	77bb      	strb	r3, [r7, #30]
    }

    *pnum = parmnum;            /* Record the number of parameters */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7fba      	ldrb	r2, [r7, #30]
 8001810:	701a      	strb	r2, [r3, #0]
    *fname = '\0';              /* Adding a terminator */
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
    return res;                 /* Return the result of execution */
 8001818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800181c:	4618      	mov	r0, r3
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	0800994c 	.word	0x0800994c

08001828 <usmart_get_aparm>:
 * @retval
 * @arg     0, no more arguments
 * @arg     Other, the offset of the next argument.
 */
uint8_t usmart_get_aparm(char *str, char *fparm, uint8_t *ptype)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
    uint8_t i = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	75fb      	strb	r3, [r7, #23]
    uint8_t enout = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	75bb      	strb	r3, [r7, #22]
    uint8_t type = 0;   /* The default is a number. */
 800183c:	2300      	movs	r3, #0
 800183e:	757b      	strb	r3, [r7, #21]
    uint8_t string = 0; /* Flag whether str is reading */
 8001840:	2300      	movs	r3, #0
 8001842:	753b      	strb	r3, [r7, #20]

    while (1)
    {
        if (*str == ',' && string == 0)enout = 1;   /* The immediate exit is deferred in order to find the start address of the next argument. */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b2c      	cmp	r3, #44	; 0x2c
 800184a:	d104      	bne.n	8001856 <usmart_get_aparm+0x2e>
 800184c:	7d3b      	ldrb	r3, [r7, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <usmart_get_aparm+0x2e>
 8001852:	2301      	movs	r3, #1
 8001854:	75bb      	strb	r3, [r7, #22]

        if ((*str == ')' || *str == '\0') && string == 0)break; /* Exit identifier immediately */
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b29      	cmp	r3, #41	; 0x29
 800185c:	d003      	beq.n	8001866 <usmart_get_aparm+0x3e>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <usmart_get_aparm+0x44>
 8001866:	7d3b      	ldrb	r3, [r7, #20]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d07b      	beq.n	8001964 <usmart_get_aparm+0x13c>

        if (type == 0)   /* The default is numeric */
 800186c:	7d7b      	ldrb	r3, [r7, #21]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d154      	bne.n	800191c <usmart_get_aparm+0xf4>
        {
            /* Digit string detection */
            if ((*str >= '0' && *str <= '9') || *str == '-' || *str == '+' || (*str >= 'a' && *str <= 'f') || (*str >= 'A' && *str <= 'F') || *str == 'X' || *str == 'x')
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b2f      	cmp	r3, #47	; 0x2f
 8001878:	d903      	bls.n	8001882 <usmart_get_aparm+0x5a>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b39      	cmp	r3, #57	; 0x39
 8001880:	d91f      	bls.n	80018c2 <usmart_get_aparm+0x9a>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b2d      	cmp	r3, #45	; 0x2d
 8001888:	d01b      	beq.n	80018c2 <usmart_get_aparm+0x9a>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b2b      	cmp	r3, #43	; 0x2b
 8001890:	d017      	beq.n	80018c2 <usmart_get_aparm+0x9a>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b60      	cmp	r3, #96	; 0x60
 8001898:	d903      	bls.n	80018a2 <usmart_get_aparm+0x7a>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b66      	cmp	r3, #102	; 0x66
 80018a0:	d90f      	bls.n	80018c2 <usmart_get_aparm+0x9a>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d903      	bls.n	80018b2 <usmart_get_aparm+0x8a>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b46      	cmp	r3, #70	; 0x46
 80018b0:	d907      	bls.n	80018c2 <usmart_get_aparm+0x9a>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b58      	cmp	r3, #88	; 0x58
 80018b8:	d003      	beq.n	80018c2 <usmart_get_aparm+0x9a>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b78      	cmp	r3, #120	; 0x78
 80018c0:	d115      	bne.n	80018ee <usmart_get_aparm+0xc6>
            {
                if (enout)break;          /* When the next argument is found, exit. */
 80018c2:	7dbb      	ldrb	r3, [r7, #22]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d14f      	bne.n	8001968 <usmart_get_aparm+0x140>

                if (*str >= 'a')
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b60      	cmp	r3, #96	; 0x60
 80018ce:	d906      	bls.n	80018de <usmart_get_aparm+0xb6>
                {
                    *fparm = *str - 0X20; /* Convert lowercase to uppercase */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	3b20      	subs	r3, #32
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	e003      	b.n	80018e6 <usmart_get_aparm+0xbe>
                }
                else
                {
                    *fparm = *str;        /* Lowercase or number stays the same */
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	781a      	ldrb	r2, [r3, #0]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	701a      	strb	r2, [r3, #0]
                }

                fparm++;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	3301      	adds	r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	e033      	b.n	8001956 <usmart_get_aparm+0x12e>
            }
            else if (*str == '"')         /* Find the start flag of the string */
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b22      	cmp	r3, #34	; 0x22
 80018f4:	d107      	bne.n	8001906 <usmart_get_aparm+0xde>
            {
                if (enout)break;          /* I found it, I found it, "and I thought it was over. */
 80018f6:	7dbb      	ldrb	r3, [r7, #22]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d137      	bne.n	800196c <usmart_get_aparm+0x144>

                type = 1;
 80018fc:	2301      	movs	r3, #1
 80018fe:	757b      	strb	r3, [r7, #21]
                string = 1;               /* Register that STRING is being read */
 8001900:	2301      	movs	r3, #1
 8001902:	753b      	strb	r3, [r7, #20]
 8001904:	e027      	b.n	8001956 <usmart_get_aparm+0x12e>
            }
            else if (*str != ' ' && *str != ',')  /* Invalid character found, parameter error */
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b20      	cmp	r3, #32
 800190c:	d023      	beq.n	8001956 <usmart_get_aparm+0x12e>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b2c      	cmp	r3, #44	; 0x2c
 8001914:	d01f      	beq.n	8001956 <usmart_get_aparm+0x12e>
            {
                type = 0XFF;
 8001916:	23ff      	movs	r3, #255	; 0xff
 8001918:	757b      	strb	r3, [r7, #21]
                break;
 800191a:	e02a      	b.n	8001972 <usmart_get_aparm+0x14a>
            }
        }
        else                      /* The string class */
        {
            if (*str == '"')string = 0;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b22      	cmp	r3, #34	; 0x22
 8001922:	d101      	bne.n	8001928 <usmart_get_aparm+0x100>
 8001924:	2300      	movs	r3, #0
 8001926:	753b      	strb	r3, [r7, #20]

            if (enout)break;      /* When the next argument is found, exit. */
 8001928:	7dbb      	ldrb	r3, [r7, #22]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d120      	bne.n	8001970 <usmart_get_aparm+0x148>

            if (string)           /* String reading */
 800192e:	7d3b      	ldrb	r3, [r7, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d010      	beq.n	8001956 <usmart_get_aparm+0x12e>
            {
                if (*str == '\\') /* Escape character encountered (do not copy escape character) */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b5c      	cmp	r3, #92	; 0x5c
 800193a:	d105      	bne.n	8001948 <usmart_get_aparm+0x120>
                {
                    str++;        /* Offset to the character after the escape character, whatever character, just COPY */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
                    i++;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	3301      	adds	r3, #1
 8001946:	75fb      	strb	r3, [r7, #23]
                }

                *fparm = *str;    /* Lowercase or number stays the same */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	781a      	ldrb	r2, [r3, #0]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	701a      	strb	r2, [r3, #0]
                fparm++;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3301      	adds	r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
            }
        }

        i++;                     /* The offset is increased */
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	3301      	adds	r3, #1
 800195a:	75fb      	strb	r3, [r7, #23]
        str++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
        if (*str == ',' && string == 0)enout = 1;   /* The immediate exit is deferred in order to find the start address of the next argument. */
 8001962:	e76f      	b.n	8001844 <usmart_get_aparm+0x1c>
        if ((*str == ')' || *str == '\0') && string == 0)break; /* Exit identifier immediately */
 8001964:	bf00      	nop
 8001966:	e004      	b.n	8001972 <usmart_get_aparm+0x14a>
                if (enout)break;          /* When the next argument is found, exit. */
 8001968:	bf00      	nop
 800196a:	e002      	b.n	8001972 <usmart_get_aparm+0x14a>
                if (enout)break;          /* I found it, I found it, "and I thought it was over. */
 800196c:	bf00      	nop
 800196e:	e000      	b.n	8001972 <usmart_get_aparm+0x14a>
            if (enout)break;      /* When the next argument is found, exit. */
 8001970:	bf00      	nop
    }

    *fparm = '\0';               /* Adding a terminator */
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
    *ptype = type;               /* Return parameter type */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7d7a      	ldrb	r2, [r7, #21]
 800197c:	701a      	strb	r2, [r3, #0]
    return i;                    /* Return the length of the argument */
 800197e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001980:	4618      	mov	r0, r3
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <usmart_get_parmpos>:
 * @brief   Gets the start address of the specified parameter
 * @param   num : The num-th argument in the range 0-9.
 * @retval  The start address of the parameter
 */
uint8_t usmart_get_parmpos(uint8_t num)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
    uint8_t temp = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for (i = 0; i < num; i++)
 800199a:	2300      	movs	r3, #0
 800199c:	73bb      	strb	r3, [r7, #14]
 800199e:	e009      	b.n	80019b4 <usmart_get_parmpos+0x28>
    {
        temp += usmart_dev.plentbl[i];
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <usmart_get_parmpos+0x3c>)
 80019a4:	4413      	add	r3, r2
 80019a6:	7e9a      	ldrb	r2, [r3, #26]
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	4413      	add	r3, r2
 80019ac:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < num; i++)
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	3301      	adds	r3, #1
 80019b2:	73bb      	strb	r3, [r7, #14]
 80019b4:	7bba      	ldrb	r2, [r7, #14]
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d3f1      	bcc.n	80019a0 <usmart_get_parmpos+0x14>
    }

    return temp;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	2000003c 	.word	0x2000003c

080019cc <usmart_get_fparam>:
 * @param  str  : The source string
 * @param  parn : The number of arguments.0 means void with no arguments
 * @retval 0, success; Other, error code.
 */
uint8_t usmart_get_fparam(char *str, uint8_t *parn)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0b8      	sub	sp, #224	; 0xe0
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
    uint8_t i, type;
    uint32_t res;
    uint8_t n = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    uint8_t len;
    char tstr[PARM_LEN + 1]; /* The byte cache can hold strings of up to PARM_LEN characters */

    for (i = 0; i < MAX_PARM; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80019e2:	e00a      	b.n	80019fa <usmart_get_fparam+0x2e>
    {
        usmart_dev.plentbl[i] = 0;  /* Clear the parameter length table */
 80019e4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80019e8:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <usmart_get_fparam+0x1b4>)
 80019ea:	4413      	add	r3, r2
 80019ec:	2200      	movs	r2, #0
 80019ee:	769a      	strb	r2, [r3, #26]
    for (i = 0; i < MAX_PARM; i++)
 80019f0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80019f4:	3301      	adds	r3, #1
 80019f6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80019fa:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	d9f0      	bls.n	80019e4 <usmart_get_fparam+0x18>
    }

    while (*str != '(')   /* Offset to the beginning of the argument */
 8001a02:	e008      	b.n	8001a16 <usmart_get_fparam+0x4a>
    {
        str++;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]

        if (*str == '\0')return USMART_FUNCERR; /* We've hit a terminator */
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <usmart_get_fparam+0x4a>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0b0      	b.n	8001b78 <usmart_get_fparam+0x1ac>
    while (*str != '(')   /* Offset to the beginning of the argument */
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b28      	cmp	r3, #40	; 0x28
 8001a1c:	d1f2      	bne.n	8001a04 <usmart_get_fparam+0x38>
    }

    str++;                /* Offset to the first byte after "(" */
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	607b      	str	r3, [r7, #4]

    while (1)
    {
        i = usmart_get_aparm(str, tstr, &type); /* Get the first argument */
 8001a24:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fefa 	bl	8001828 <usmart_get_aparm>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
        str += i;         /* Offset */
 8001a3a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	607b      	str	r3, [r7, #4]

        switch (type)
 8001a44:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8001a48:	2bff      	cmp	r3, #255	; 0xff
 8001a4a:	f000 8082 	beq.w	8001b52 <usmart_get_fparam+0x186>
 8001a4e:	2bff      	cmp	r3, #255	; 0xff
 8001a50:	f300 8084 	bgt.w	8001b5c <usmart_get_fparam+0x190>
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <usmart_get_fparam+0x92>
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d041      	beq.n	8001ae0 <usmart_get_fparam+0x114>
 8001a5c:	e07e      	b.n	8001b5c <usmart_get_fparam+0x190>
        {
            case 0:       /* number */
                if (tstr[0] != '\0')    /* The arguments received are valid */
 8001a5e:	7b3b      	ldrb	r3, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d078      	beq.n	8001b56 <usmart_get_fparam+0x18a>
                {
                    i = usmart_str2num(tstr, &res);  /* Record the parameter */
 8001a64:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fc90 	bl	8001394 <usmart_str2num>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

                    if (i)return USMART_PARMERR;     /* Parameter error. */
 8001a7a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <usmart_get_fparam+0xba>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e078      	b.n	8001b78 <usmart_get_fparam+0x1ac>

                    *(uint32_t *)(usmart_dev.parm + usmart_get_parmpos(n)) = res;   /* Record the result of a successful transformation. */
 8001a86:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff7e 	bl	800198c <usmart_get_parmpos>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <usmart_get_fparam+0x1b8>)
 8001a96:	4413      	add	r3, r2
 8001a98:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001a9c:	601a      	str	r2, [r3, #0]
                    usmart_dev.parmtype &= ~(1 << n);/* Marking numbers */
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <usmart_get_fparam+0x1b4>)
 8001aa0:	8b1b      	ldrh	r3, [r3, #24]
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <usmart_get_fparam+0x1b4>)
 8001abc:	831a      	strh	r2, [r3, #24]
                    usmart_dev.plentbl[n] = 4;       /* The length of this parameter is 4 */
 8001abe:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001ac2:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <usmart_get_fparam+0x1b4>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	769a      	strb	r2, [r3, #26]
                    n++;                             /* Increase in parameters */
 8001aca:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

                    if (n > MAX_PARM)return USMART_PARMOVER;  /* parameter number too much */
 8001ad4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001ad8:	2b0a      	cmp	r3, #10
 8001ada:	d93c      	bls.n	8001b56 <usmart_get_fparam+0x18a>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e04b      	b.n	8001b78 <usmart_get_fparam+0x1ac>
                }

                break;

            case 1:       /* string */
                len = usmart_strlen(tstr) + 1;  /* Includes the terminator '\0' */
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fc22 	bl	800132e <usmart_strlen>
 8001aea:	4603      	mov	r3, r0
 8001aec:	3301      	adds	r3, #1
 8001aee:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
                usmart_strcopy(tstr, (char *)&usmart_dev.parm[usmart_get_parmpos(n)]);  /* Copy tstr data to usmart dev.parm[n] */
 8001af2:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff48 	bl	800198c <usmart_get_parmpos>
 8001afc:	4603      	mov	r3, r0
 8001afe:	3320      	adds	r3, #32
 8001b00:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <usmart_get_fparam+0x1b4>)
 8001b02:	4413      	add	r3, r2
 8001b04:	1d1a      	adds	r2, r3, #4
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fbf4 	bl	80012fa <usmart_strcopy>
                usmart_dev.parmtype |= 1 << n;  /* Tag string */
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <usmart_get_fparam+0x1b4>)
 8001b14:	8b1b      	ldrh	r3, [r3, #24]
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <usmart_get_fparam+0x1b4>)
 8001b2c:	831a      	strh	r2, [r3, #24]
                usmart_dev.plentbl[n] = len;    /* The length of this parameter is len */
 8001b2e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <usmart_get_fparam+0x1b4>)
 8001b34:	4413      	add	r3, r2
 8001b36:	f897 20dd 	ldrb.w	r2, [r7, #221]	; 0xdd
 8001b3a:	769a      	strb	r2, [r3, #26]
                n++;
 8001b3c:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001b40:	3301      	adds	r3, #1
 8001b42:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde

                if (n > MAX_PARM)return USMART_PARMOVER;    /* parameter number too much */
 8001b46:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d905      	bls.n	8001b5a <usmart_get_fparam+0x18e>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e012      	b.n	8001b78 <usmart_get_fparam+0x1ac>

                break;

            case 0XFF:    /* Error */
                return USMART_PARMERR;          /* parameter error */
 8001b52:	2302      	movs	r3, #2
 8001b54:	e010      	b.n	8001b78 <usmart_get_fparam+0x1ac>
                break;
 8001b56:	bf00      	nop
 8001b58:	e000      	b.n	8001b5c <usmart_get_fparam+0x190>
                break;
 8001b5a:	bf00      	nop
        }

        if (*str == ')' || *str == '\0')break;  /* We got the end sign. */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b29      	cmp	r3, #41	; 0x29
 8001b62:	d004      	beq.n	8001b6e <usmart_get_fparam+0x1a2>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d000      	beq.n	8001b6e <usmart_get_fparam+0x1a2>
        i = usmart_get_aparm(str, tstr, &type); /* Get the first argument */
 8001b6c:	e75a      	b.n	8001a24 <usmart_get_fparam+0x58>
    }

    *parn = n;                                 /* Record the number of parameters */
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f897 20de 	ldrb.w	r2, [r7, #222]	; 0xde
 8001b74:	701a      	strb	r2, [r3, #0]
    return USMART_OK;                          /* The parameters are correctly obtained */
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	37e0      	adds	r7, #224	; 0xe0
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000003c 	.word	0x2000003c
 8001b84:	20000060 	.word	0x20000060

08001b88 <lcd_ex_st7789_reginit>:
 * @brief  ST7789 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7789_reginit(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8001b8c:	2011      	movs	r0, #17
 8001b8e:	f002 fc39 	bl	8004404 <lcd_wr_regno>

    HAL_Delay(120);
 8001b92:	2078      	movs	r0, #120	; 0x78
 8001b94:	f004 f830 	bl	8005bf8 <HAL_Delay>

    lcd_wr_regno(0x36);
 8001b98:	2036      	movs	r0, #54	; 0x36
 8001b9a:	f002 fc33 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f002 fc1c 	bl	80043dc <lcd_wr_data>


    lcd_wr_regno(0x3A);
 8001ba4:	203a      	movs	r0, #58	; 0x3a
 8001ba6:	f002 fc2d 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0X05);
 8001baa:	2005      	movs	r0, #5
 8001bac:	f002 fc16 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8001bb0:	20b2      	movs	r0, #178	; 0xb2
 8001bb2:	f002 fc27 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8001bb6:	200c      	movs	r0, #12
 8001bb8:	f002 fc10 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0C);
 8001bbc:	200c      	movs	r0, #12
 8001bbe:	f002 fc0d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f002 fc0a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x33);
 8001bc8:	2033      	movs	r0, #51	; 0x33
 8001bca:	f002 fc07 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x33);
 8001bce:	2033      	movs	r0, #51	; 0x33
 8001bd0:	f002 fc04 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8001bd4:	20b7      	movs	r0, #183	; 0xb7
 8001bd6:	f002 fc15 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x35);
 8001bda:	2035      	movs	r0, #53	; 0x35
 8001bdc:	f002 fbfe 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xBB); /* vcom */
 8001be0:	20bb      	movs	r0, #187	; 0xbb
 8001be2:	f002 fc0f 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x32);  /* 30 */
 8001be6:	2032      	movs	r0, #50	; 0x32
 8001be8:	f002 fbf8 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8001bec:	20c0      	movs	r0, #192	; 0xc0
 8001bee:	f002 fc09 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8001bf2:	200c      	movs	r0, #12
 8001bf4:	f002 fbf2 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8001bf8:	20c2      	movs	r0, #194	; 0xc2
 8001bfa:	f002 fc03 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f002 fbec 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC3); /* vrh */
 8001c04:	20c3      	movs	r0, #195	; 0xc3
 8001c06:	f002 fbfd 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x10);  /* 17 0D */
 8001c0a:	2010      	movs	r0, #16
 8001c0c:	f002 fbe6 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC4); /* vdv */
 8001c10:	20c4      	movs	r0, #196	; 0xc4
 8001c12:	f002 fbf7 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 20 */
 8001c16:	2020      	movs	r0, #32
 8001c18:	f002 fbe0 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8001c1c:	20c6      	movs	r0, #198	; 0xc6
 8001c1e:	f002 fbf1 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x0f);
 8001c22:	200f      	movs	r0, #15
 8001c24:	f002 fbda 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xD0);
 8001c28:	20d0      	movs	r0, #208	; 0xd0
 8001c2a:	f002 fbeb 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xA4);
 8001c2e:	20a4      	movs	r0, #164	; 0xa4
 8001c30:	f002 fbd4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA1);
 8001c34:	20a1      	movs	r0, #161	; 0xa1
 8001c36:	f002 fbd1 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Set Gamma  */
 8001c3a:	20e0      	movs	r0, #224	; 0xe0
 8001c3c:	f002 fbe2 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8001c40:	20d0      	movs	r0, #208	; 0xd0
 8001c42:	f002 fbcb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f002 fbc8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x02);
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f002 fbc5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x07);
 8001c52:	2007      	movs	r0, #7
 8001c54:	f002 fbc2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0a);
 8001c58:	200a      	movs	r0, #10
 8001c5a:	f002 fbbf 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x28);
 8001c5e:	2028      	movs	r0, #40	; 0x28
 8001c60:	f002 fbbc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x32);
 8001c64:	2032      	movs	r0, #50	; 0x32
 8001c66:	f002 fbb9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0X44);
 8001c6a:	2044      	movs	r0, #68	; 0x44
 8001c6c:	f002 fbb6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x42);
 8001c70:	2042      	movs	r0, #66	; 0x42
 8001c72:	f002 fbb3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x06);
 8001c76:	2006      	movs	r0, #6
 8001c78:	f002 fbb0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0e);
 8001c7c:	200e      	movs	r0, #14
 8001c7e:	f002 fbad 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x12);
 8001c82:	2012      	movs	r0, #18
 8001c84:	f002 fbaa 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x14);
 8001c88:	2014      	movs	r0, #20
 8001c8a:	f002 fba7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x17);
 8001c8e:	2017      	movs	r0, #23
 8001c90:	f002 fba4 	bl	80043dc <lcd_wr_data>


    lcd_wr_regno(0XE1);  /* Set Gamma */
 8001c94:	20e1      	movs	r0, #225	; 0xe1
 8001c96:	f002 fbb5 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8001c9a:	20d0      	movs	r0, #208	; 0xd0
 8001c9c:	f002 fb9e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f002 fb9b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x02);
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f002 fb98 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x07);
 8001cac:	2007      	movs	r0, #7
 8001cae:	f002 fb95 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0a);
 8001cb2:	200a      	movs	r0, #10
 8001cb4:	f002 fb92 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x28);
 8001cb8:	2028      	movs	r0, #40	; 0x28
 8001cba:	f002 fb8f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x31);
 8001cbe:	2031      	movs	r0, #49	; 0x31
 8001cc0:	f002 fb8c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x54);
 8001cc4:	2054      	movs	r0, #84	; 0x54
 8001cc6:	f002 fb89 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x47);
 8001cca:	2047      	movs	r0, #71	; 0x47
 8001ccc:	f002 fb86 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0e);
 8001cd0:	200e      	movs	r0, #14
 8001cd2:	f002 fb83 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x1c);
 8001cd6:	201c      	movs	r0, #28
 8001cd8:	f002 fb80 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x17);
 8001cdc:	2017      	movs	r0, #23
 8001cde:	f002 fb7d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x1b);
 8001ce2:	201b      	movs	r0, #27
 8001ce4:	f002 fb7a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x1e);
 8001ce8:	201e      	movs	r0, #30
 8001cea:	f002 fb77 	bl	80043dc <lcd_wr_data>


    lcd_wr_regno(0x2A);
 8001cee:	202a      	movs	r0, #42	; 0x2a
 8001cf0:	f002 fb88 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f002 fb71 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f002 fb6e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f002 fb6b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xef);
 8001d06:	20ef      	movs	r0, #239	; 0xef
 8001d08:	f002 fb68 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x2B);
 8001d0c:	202b      	movs	r0, #43	; 0x2b
 8001d0e:	f002 fb79 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f002 fb62 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f002 fb5f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f002 fb5c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3f);
 8001d24:	203f      	movs	r0, #63	; 0x3f
 8001d26:	f002 fb59 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x29); /* display on */
 8001d2a:	2029      	movs	r0, #41	; 0x29
 8001d2c:	f002 fb6a 	bl	8004404 <lcd_wr_regno>
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <lcd_ex_ili9341_reginit>:
 * @brief  ILI9341 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9341_reginit(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xCF);
 8001d38:	20cf      	movs	r0, #207	; 0xcf
 8001d3a:	f002 fb63 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f002 fb4c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xC1);
 8001d44:	20c1      	movs	r0, #193	; 0xc1
 8001d46:	f002 fb49 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0X30);
 8001d4a:	2030      	movs	r0, #48	; 0x30
 8001d4c:	f002 fb46 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xED);
 8001d50:	20ed      	movs	r0, #237	; 0xed
 8001d52:	f002 fb57 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x64);
 8001d56:	2064      	movs	r0, #100	; 0x64
 8001d58:	f002 fb40 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x03);
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f002 fb3d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0X12);
 8001d62:	2012      	movs	r0, #18
 8001d64:	f002 fb3a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0X81);
 8001d68:	2081      	movs	r0, #129	; 0x81
 8001d6a:	f002 fb37 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xE8);
 8001d6e:	20e8      	movs	r0, #232	; 0xe8
 8001d70:	f002 fb48 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x85);
 8001d74:	2085      	movs	r0, #133	; 0x85
 8001d76:	f002 fb31 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x10);
 8001d7a:	2010      	movs	r0, #16
 8001d7c:	f002 fb2e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x7A);
 8001d80:	207a      	movs	r0, #122	; 0x7a
 8001d82:	f002 fb2b 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xCB);
 8001d86:	20cb      	movs	r0, #203	; 0xcb
 8001d88:	f002 fb3c 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x39);
 8001d8c:	2039      	movs	r0, #57	; 0x39
 8001d8e:	f002 fb25 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2C);
 8001d92:	202c      	movs	r0, #44	; 0x2c
 8001d94:	f002 fb22 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f002 fb1f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x34);
 8001d9e:	2034      	movs	r0, #52	; 0x34
 8001da0:	f002 fb1c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x02);
 8001da4:	2002      	movs	r0, #2
 8001da6:	f002 fb19 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xF7);
 8001daa:	20f7      	movs	r0, #247	; 0xf7
 8001dac:	f002 fb2a 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8001db0:	2020      	movs	r0, #32
 8001db2:	f002 fb13 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xEA);
 8001db6:	20ea      	movs	r0, #234	; 0xea
 8001db8:	f002 fb24 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f002 fb0d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f002 fb0a 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xC0); /* Power control */
 8001dc8:	20c0      	movs	r0, #192	; 0xc0
 8001dca:	f002 fb1b 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x1B);  /* VRH[5:0] */
 8001dce:	201b      	movs	r0, #27
 8001dd0:	f002 fb04 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xC1); /* Power control */
 8001dd4:	20c1      	movs	r0, #193	; 0xc1
 8001dd6:	f002 fb15 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x01);  /* SAP[2:0];BT[3:0] */
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f002 fafe 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xC5); /* VCM control */
 8001de0:	20c5      	movs	r0, #197	; 0xc5
 8001de2:	f002 fb0f 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x30);  /* 3F */
 8001de6:	2030      	movs	r0, #48	; 0x30
 8001de8:	f002 faf8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x30);  /* 3C */
 8001dec:	2030      	movs	r0, #48	; 0x30
 8001dee:	f002 faf5 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xC7); /* VCM control2 */
 8001df2:	20c7      	movs	r0, #199	; 0xc7
 8001df4:	f002 fb06 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0XB7);
 8001df8:	20b7      	movs	r0, #183	; 0xb7
 8001dfa:	f002 faef 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0x36); /*  Memory Access Control */
 8001dfe:	2036      	movs	r0, #54	; 0x36
 8001e00:	f002 fb00 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8001e04:	2048      	movs	r0, #72	; 0x48
 8001e06:	f002 fae9 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0x3A);
 8001e0a:	203a      	movs	r0, #58	; 0x3a
 8001e0c:	f002 fafa 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8001e10:	2055      	movs	r0, #85	; 0x55
 8001e12:	f002 fae3 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xB1);
 8001e16:	20b1      	movs	r0, #177	; 0xb1
 8001e18:	f002 faf4 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f002 fadd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x1A);
 8001e22:	201a      	movs	r0, #26
 8001e24:	f002 fada 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xB6); /*  Display Function Control */
 8001e28:	20b6      	movs	r0, #182	; 0xb6
 8001e2a:	f002 faeb 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8001e2e:	200a      	movs	r0, #10
 8001e30:	f002 fad4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001e34:	20a2      	movs	r0, #162	; 0xa2
 8001e36:	f002 fad1 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
 8001e3a:	20f2      	movs	r0, #242	; 0xf2
 8001e3c:	f002 fae2 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f002 facb 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0x26); /* Gamma curve selected */
 8001e46:	2026      	movs	r0, #38	; 0x26
 8001e48:	f002 fadc 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f002 fac5 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xE0); /* Set Gamma */
 8001e52:	20e0      	movs	r0, #224	; 0xe0
 8001e54:	f002 fad6 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f002 fabf 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2A);
 8001e5e:	202a      	movs	r0, #42	; 0x2a
 8001e60:	f002 fabc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x28);
 8001e64:	2028      	movs	r0, #40	; 0x28
 8001e66:	f002 fab9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x08);
 8001e6a:	2008      	movs	r0, #8
 8001e6c:	f002 fab6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0E);
 8001e70:	200e      	movs	r0, #14
 8001e72:	f002 fab3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x08);
 8001e76:	2008      	movs	r0, #8
 8001e78:	f002 fab0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x54);
 8001e7c:	2054      	movs	r0, #84	; 0x54
 8001e7e:	f002 faad 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0XA9);
 8001e82:	20a9      	movs	r0, #169	; 0xa9
 8001e84:	f002 faaa 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x43);
 8001e88:	2043      	movs	r0, #67	; 0x43
 8001e8a:	f002 faa7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0A);
 8001e8e:	200a      	movs	r0, #10
 8001e90:	f002 faa4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0F);
 8001e94:	200f      	movs	r0, #15
 8001e96:	f002 faa1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f002 fa9e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f002 fa9b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f002 fa98 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f002 fa95 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0XE1);    /* Set Gamma */
 8001eb2:	20e1      	movs	r0, #225	; 0xe1
 8001eb4:	f002 faa6 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f002 fa8f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x15);
 8001ebe:	2015      	movs	r0, #21
 8001ec0:	f002 fa8c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x17);
 8001ec4:	2017      	movs	r0, #23
 8001ec6:	f002 fa89 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x07);
 8001eca:	2007      	movs	r0, #7
 8001ecc:	f002 fa86 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x11);
 8001ed0:	2011      	movs	r0, #17
 8001ed2:	f002 fa83 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x06);
 8001ed6:	2006      	movs	r0, #6
 8001ed8:	f002 fa80 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2B);
 8001edc:	202b      	movs	r0, #43	; 0x2b
 8001ede:	f002 fa7d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x56);
 8001ee2:	2056      	movs	r0, #86	; 0x56
 8001ee4:	f002 fa7a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001ee8:	203c      	movs	r0, #60	; 0x3c
 8001eea:	f002 fa77 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x05);
 8001eee:	2005      	movs	r0, #5
 8001ef0:	f002 fa74 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x10);
 8001ef4:	2010      	movs	r0, #16
 8001ef6:	f002 fa71 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0F);
 8001efa:	200f      	movs	r0, #15
 8001efc:	f002 fa6e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3F);
 8001f00:	203f      	movs	r0, #63	; 0x3f
 8001f02:	f002 fa6b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3F);
 8001f06:	203f      	movs	r0, #63	; 0x3f
 8001f08:	f002 fa68 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0F);
 8001f0c:	200f      	movs	r0, #15
 8001f0e:	f002 fa65 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0x2B);
 8001f12:	202b      	movs	r0, #43	; 0x2b
 8001f14:	f002 fa76 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f002 fa5f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f002 fa5c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f002 fa59 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3f);
 8001f2a:	203f      	movs	r0, #63	; 0x3f
 8001f2c:	f002 fa56 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0x2A);
 8001f30:	202a      	movs	r0, #42	; 0x2a
 8001f32:	f002 fa67 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f002 fa50 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f002 fa4d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f002 fa4a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xef);
 8001f48:	20ef      	movs	r0, #239	; 0xef
 8001f4a:	f002 fa47 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0x11); /* Exit Sleep */
 8001f4e:	2011      	movs	r0, #17
 8001f50:	f002 fa58 	bl	8004404 <lcd_wr_regno>
    HAL_Delay(120);
 8001f54:	2078      	movs	r0, #120	; 0x78
 8001f56:	f003 fe4f 	bl	8005bf8 <HAL_Delay>
    lcd_wr_regno(0x29); /* display on */
 8001f5a:	2029      	movs	r0, #41	; 0x29
 8001f5c:	f002 fa52 	bl	8004404 <lcd_wr_regno>
 }
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <lcd_ex_nt35310_reginit>:
 * @brief  NT35310 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35310_reginit(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xED);
 8001f68:	20ed      	movs	r0, #237	; 0xed
 8001f6a:	f002 fa4b 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f002 fa34 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xFE);
 8001f74:	20fe      	movs	r0, #254	; 0xfe
 8001f76:	f002 fa31 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xEE);
 8001f7a:	20ee      	movs	r0, #238	; 0xee
 8001f7c:	f002 fa42 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xDE);
 8001f80:	20de      	movs	r0, #222	; 0xde
 8001f82:	f002 fa2b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x21);
 8001f86:	2021      	movs	r0, #33	; 0x21
 8001f88:	f002 fa28 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xF1);
 8001f8c:	20f1      	movs	r0, #241	; 0xf1
 8001f8e:	f002 fa39 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f002 fa22 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xDF);
 8001f98:	20df      	movs	r0, #223	; 0xdf
 8001f9a:	f002 fa33 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x10);
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	f002 fa1c 	bl	80043dc <lcd_wr_data>

    /* VCOMvoltage */
    lcd_wr_regno(0xC4);
 8001fa4:	20c4      	movs	r0, #196	; 0xc4
 8001fa6:	f002 fa2d 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x8F);  /* 5f */
 8001faa:	208f      	movs	r0, #143	; 0x8f
 8001fac:	f002 fa16 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8001fb0:	20c6      	movs	r0, #198	; 0xc6
 8001fb2:	f002 fa27 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f002 fa10 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xE2);
 8001fbc:	20e2      	movs	r0, #226	; 0xe2
 8001fbe:	f002 fa0d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xE2);
 8001fc2:	20e2      	movs	r0, #226	; 0xe2
 8001fc4:	f002 fa0a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xE2);
 8001fc8:	20e2      	movs	r0, #226	; 0xe2
 8001fca:	f002 fa07 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xBF);
 8001fce:	20bf      	movs	r0, #191	; 0xbf
 8001fd0:	f002 fa18 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8001fd4:	20aa      	movs	r0, #170	; 0xaa
 8001fd6:	f002 fa01 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB0);
 8001fda:	20b0      	movs	r0, #176	; 0xb0
 8001fdc:	f002 fa12 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x0D);
 8001fe0:	200d      	movs	r0, #13
 8001fe2:	f002 f9fb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f002 f9f8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0D);
 8001fec:	200d      	movs	r0, #13
 8001fee:	f002 f9f5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f002 f9f2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x11);
 8001ff8:	2011      	movs	r0, #17
 8001ffa:	f002 f9ef 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f002 f9ec 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x19);
 8002004:	2019      	movs	r0, #25
 8002006:	f002 f9e9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800200a:	2000      	movs	r0, #0
 800200c:	f002 f9e6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x21);
 8002010:	2021      	movs	r0, #33	; 0x21
 8002012:	f002 f9e3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002016:	2000      	movs	r0, #0
 8002018:	f002 f9e0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2D);
 800201c:	202d      	movs	r0, #45	; 0x2d
 800201e:	f002 f9dd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002022:	2000      	movs	r0, #0
 8002024:	f002 f9da 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3D);
 8002028:	203d      	movs	r0, #61	; 0x3d
 800202a:	f002 f9d7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800202e:	2000      	movs	r0, #0
 8002030:	f002 f9d4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x5D);
 8002034:	205d      	movs	r0, #93	; 0x5d
 8002036:	f002 f9d1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800203a:	2000      	movs	r0, #0
 800203c:	f002 f9ce 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x5D);
 8002040:	205d      	movs	r0, #93	; 0x5d
 8002042:	f002 f9cb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002046:	2000      	movs	r0, #0
 8002048:	f002 f9c8 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB1);
 800204c:	20b1      	movs	r0, #177	; 0xb1
 800204e:	f002 f9d9 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8002052:	2080      	movs	r0, #128	; 0x80
 8002054:	f002 f9c2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002058:	2000      	movs	r0, #0
 800205a:	f002 f9bf 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x8B);
 800205e:	208b      	movs	r0, #139	; 0x8b
 8002060:	f002 f9bc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f002 f9b9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x96);
 800206a:	2096      	movs	r0, #150	; 0x96
 800206c:	f002 f9b6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002070:	2000      	movs	r0, #0
 8002072:	f002 f9b3 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8002076:	20b2      	movs	r0, #178	; 0xb2
 8002078:	f002 f9c4 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800207c:	2000      	movs	r0, #0
 800207e:	f002 f9ad 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002082:	2000      	movs	r0, #0
 8002084:	f002 f9aa 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x02);
 8002088:	2002      	movs	r0, #2
 800208a:	f002 f9a7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800208e:	2000      	movs	r0, #0
 8002090:	f002 f9a4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x03);
 8002094:	2003      	movs	r0, #3
 8002096:	f002 f9a1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800209a:	2000      	movs	r0, #0
 800209c:	f002 f99e 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB3);
 80020a0:	20b3      	movs	r0, #179	; 0xb3
 80020a2:	f002 f9af 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f002 f998 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f002 f995 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f002 f992 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f002 f98f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020be:	2000      	movs	r0, #0
 80020c0:	f002 f98c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f002 f989 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f002 f986 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f002 f983 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f002 f980 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020dc:	2000      	movs	r0, #0
 80020de:	f002 f97d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f002 f97a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f002 f977 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f002 f974 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020f4:	2000      	movs	r0, #0
 80020f6:	f002 f971 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f002 f96e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002100:	2000      	movs	r0, #0
 8002102:	f002 f96b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002106:	2000      	movs	r0, #0
 8002108:	f002 f968 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800210c:	2000      	movs	r0, #0
 800210e:	f002 f965 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002112:	2000      	movs	r0, #0
 8002114:	f002 f962 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002118:	2000      	movs	r0, #0
 800211a:	f002 f95f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800211e:	2000      	movs	r0, #0
 8002120:	f002 f95c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002124:	2000      	movs	r0, #0
 8002126:	f002 f959 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800212a:	2000      	movs	r0, #0
 800212c:	f002 f956 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002130:	2000      	movs	r0, #0
 8002132:	f002 f953 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8002136:	20b4      	movs	r0, #180	; 0xb4
 8002138:	f002 f964 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x8B);
 800213c:	208b      	movs	r0, #139	; 0x8b
 800213e:	f002 f94d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f002 f94a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x96);
 8002148:	2096      	movs	r0, #150	; 0x96
 800214a:	f002 f947 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800214e:	2000      	movs	r0, #0
 8002150:	f002 f944 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA1);
 8002154:	20a1      	movs	r0, #161	; 0xa1
 8002156:	f002 f941 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800215a:	2000      	movs	r0, #0
 800215c:	f002 f93e 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB5);
 8002160:	20b5      	movs	r0, #181	; 0xb5
 8002162:	f002 f94f 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x02);
 8002166:	2002      	movs	r0, #2
 8002168:	f002 f938 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800216c:	2000      	movs	r0, #0
 800216e:	f002 f935 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x03);
 8002172:	2003      	movs	r0, #3
 8002174:	f002 f932 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002178:	2000      	movs	r0, #0
 800217a:	f002 f92f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x04);
 800217e:	2004      	movs	r0, #4
 8002180:	f002 f92c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002184:	2000      	movs	r0, #0
 8002186:	f002 f929 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB6);
 800218a:	20b6      	movs	r0, #182	; 0xb6
 800218c:	f002 f93a 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002190:	2000      	movs	r0, #0
 8002192:	f002 f923 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002196:	2000      	movs	r0, #0
 8002198:	f002 f920 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB7);
 800219c:	20b7      	movs	r0, #183	; 0xb7
 800219e:	f002 f931 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f002 f91a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f002 f917 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3F);
 80021ae:	203f      	movs	r0, #63	; 0x3f
 80021b0:	f002 f914 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f002 f911 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x5E);
 80021ba:	205e      	movs	r0, #94	; 0x5e
 80021bc:	f002 f90e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f002 f90b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x64);
 80021c6:	2064      	movs	r0, #100	; 0x64
 80021c8:	f002 f908 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80021cc:	2000      	movs	r0, #0
 80021ce:	f002 f905 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x8C);
 80021d2:	208c      	movs	r0, #140	; 0x8c
 80021d4:	f002 f902 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80021d8:	2000      	movs	r0, #0
 80021da:	f002 f8ff 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xAC);
 80021de:	20ac      	movs	r0, #172	; 0xac
 80021e0:	f002 f8fc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f002 f8f9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xDC);
 80021ea:	20dc      	movs	r0, #220	; 0xdc
 80021ec:	f002 f8f6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80021f0:	2000      	movs	r0, #0
 80021f2:	f002 f8f3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x70);
 80021f6:	2070      	movs	r0, #112	; 0x70
 80021f8:	f002 f8f0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f002 f8ed 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x90);
 8002202:	2090      	movs	r0, #144	; 0x90
 8002204:	f002 f8ea 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002208:	2000      	movs	r0, #0
 800220a:	f002 f8e7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xEB);
 800220e:	20eb      	movs	r0, #235	; 0xeb
 8002210:	f002 f8e4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002214:	2000      	movs	r0, #0
 8002216:	f002 f8e1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xDC);
 800221a:	20dc      	movs	r0, #220	; 0xdc
 800221c:	f002 f8de 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002220:	2000      	movs	r0, #0
 8002222:	f002 f8db 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB8);
 8002226:	20b8      	movs	r0, #184	; 0xb8
 8002228:	f002 f8ec 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800222c:	2000      	movs	r0, #0
 800222e:	f002 f8d5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002232:	2000      	movs	r0, #0
 8002234:	f002 f8d2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002238:	2000      	movs	r0, #0
 800223a:	f002 f8cf 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800223e:	2000      	movs	r0, #0
 8002240:	f002 f8cc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002244:	2000      	movs	r0, #0
 8002246:	f002 f8c9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800224a:	2000      	movs	r0, #0
 800224c:	f002 f8c6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002250:	2000      	movs	r0, #0
 8002252:	f002 f8c3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002256:	2000      	movs	r0, #0
 8002258:	f002 f8c0 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xBA);
 800225c:	20ba      	movs	r0, #186	; 0xba
 800225e:	f002 f8d1 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x24);
 8002262:	2024      	movs	r0, #36	; 0x24
 8002264:	f002 f8ba 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002268:	2000      	movs	r0, #0
 800226a:	f002 f8b7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800226e:	2000      	movs	r0, #0
 8002270:	f002 f8b4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002274:	2000      	movs	r0, #0
 8002276:	f002 f8b1 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC1);
 800227a:	20c1      	movs	r0, #193	; 0xc1
 800227c:	f002 f8c2 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8002280:	2020      	movs	r0, #32
 8002282:	f002 f8ab 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002286:	2000      	movs	r0, #0
 8002288:	f002 f8a8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x54);
 800228c:	2054      	movs	r0, #84	; 0x54
 800228e:	f002 f8a5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002292:	2000      	movs	r0, #0
 8002294:	f002 f8a2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xFF);
 8002298:	20ff      	movs	r0, #255	; 0xff
 800229a:	f002 f89f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800229e:	2000      	movs	r0, #0
 80022a0:	f002 f89c 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC2);
 80022a4:	20c2      	movs	r0, #194	; 0xc2
 80022a6:	f002 f8ad 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 80022aa:	200a      	movs	r0, #10
 80022ac:	f002 f896 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f002 f893 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x04);
 80022b6:	2004      	movs	r0, #4
 80022b8:	f002 f890 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80022bc:	2000      	movs	r0, #0
 80022be:	f002 f88d 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC3);
 80022c2:	20c3      	movs	r0, #195	; 0xc3
 80022c4:	f002 f89e 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 80022c8:	203c      	movs	r0, #60	; 0x3c
 80022ca:	f002 f887 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f002 f884 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3A);
 80022d4:	203a      	movs	r0, #58	; 0x3a
 80022d6:	f002 f881 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80022da:	2000      	movs	r0, #0
 80022dc:	f002 f87e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x39);
 80022e0:	2039      	movs	r0, #57	; 0x39
 80022e2:	f002 f87b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80022e6:	2000      	movs	r0, #0
 80022e8:	f002 f878 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x37);
 80022ec:	2037      	movs	r0, #55	; 0x37
 80022ee:	f002 f875 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f002 f872 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3C);
 80022f8:	203c      	movs	r0, #60	; 0x3c
 80022fa:	f002 f86f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80022fe:	2000      	movs	r0, #0
 8002300:	f002 f86c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x36);
 8002304:	2036      	movs	r0, #54	; 0x36
 8002306:	f002 f869 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800230a:	2000      	movs	r0, #0
 800230c:	f002 f866 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x32);
 8002310:	2032      	movs	r0, #50	; 0x32
 8002312:	f002 f863 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002316:	2000      	movs	r0, #0
 8002318:	f002 f860 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2F);
 800231c:	202f      	movs	r0, #47	; 0x2f
 800231e:	f002 f85d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002322:	2000      	movs	r0, #0
 8002324:	f002 f85a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2C);
 8002328:	202c      	movs	r0, #44	; 0x2c
 800232a:	f002 f857 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800232e:	2000      	movs	r0, #0
 8002330:	f002 f854 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x29);
 8002334:	2029      	movs	r0, #41	; 0x29
 8002336:	f002 f851 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800233a:	2000      	movs	r0, #0
 800233c:	f002 f84e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x26);
 8002340:	2026      	movs	r0, #38	; 0x26
 8002342:	f002 f84b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002346:	2000      	movs	r0, #0
 8002348:	f002 f848 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x24);
 800234c:	2024      	movs	r0, #36	; 0x24
 800234e:	f002 f845 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002352:	2000      	movs	r0, #0
 8002354:	f002 f842 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x24);
 8002358:	2024      	movs	r0, #36	; 0x24
 800235a:	f002 f83f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800235e:	2000      	movs	r0, #0
 8002360:	f002 f83c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x23);
 8002364:	2023      	movs	r0, #35	; 0x23
 8002366:	f002 f839 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800236a:	2000      	movs	r0, #0
 800236c:	f002 f836 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3C);
 8002370:	203c      	movs	r0, #60	; 0x3c
 8002372:	f002 f833 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002376:	2000      	movs	r0, #0
 8002378:	f002 f830 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x36);
 800237c:	2036      	movs	r0, #54	; 0x36
 800237e:	f002 f82d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002382:	2000      	movs	r0, #0
 8002384:	f002 f82a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x32);
 8002388:	2032      	movs	r0, #50	; 0x32
 800238a:	f002 f827 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800238e:	2000      	movs	r0, #0
 8002390:	f002 f824 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2F);
 8002394:	202f      	movs	r0, #47	; 0x2f
 8002396:	f002 f821 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800239a:	2000      	movs	r0, #0
 800239c:	f002 f81e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2C);
 80023a0:	202c      	movs	r0, #44	; 0x2c
 80023a2:	f002 f81b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f002 f818 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x29);
 80023ac:	2029      	movs	r0, #41	; 0x29
 80023ae:	f002 f815 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f002 f812 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x26);
 80023b8:	2026      	movs	r0, #38	; 0x26
 80023ba:	f002 f80f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80023be:	2000      	movs	r0, #0
 80023c0:	f002 f80c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x24);
 80023c4:	2024      	movs	r0, #36	; 0x24
 80023c6:	f002 f809 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f002 f806 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x24);
 80023d0:	2024      	movs	r0, #36	; 0x24
 80023d2:	f002 f803 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f002 f800 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x23);
 80023dc:	2023      	movs	r0, #35	; 0x23
 80023de:	f001 fffd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f001 fffa 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC4);
 80023e8:	20c4      	movs	r0, #196	; 0xc4
 80023ea:	f002 f80b 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x62);
 80023ee:	2062      	movs	r0, #98	; 0x62
 80023f0:	f001 fff4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f001 fff1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x05);
 80023fa:	2005      	movs	r0, #5
 80023fc:	f001 ffee 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002400:	2000      	movs	r0, #0
 8002402:	f001 ffeb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x84);
 8002406:	2084      	movs	r0, #132	; 0x84
 8002408:	f001 ffe8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800240c:	2000      	movs	r0, #0
 800240e:	f001 ffe5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xF0);
 8002412:	20f0      	movs	r0, #240	; 0xf0
 8002414:	f001 ffe2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002418:	2000      	movs	r0, #0
 800241a:	f001 ffdf 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x18);
 800241e:	2018      	movs	r0, #24
 8002420:	f001 ffdc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002424:	2000      	movs	r0, #0
 8002426:	f001 ffd9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA4);
 800242a:	20a4      	movs	r0, #164	; 0xa4
 800242c:	f001 ffd6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002430:	2000      	movs	r0, #0
 8002432:	f001 ffd3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x18);
 8002436:	2018      	movs	r0, #24
 8002438:	f001 ffd0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800243c:	2000      	movs	r0, #0
 800243e:	f001 ffcd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x50);
 8002442:	2050      	movs	r0, #80	; 0x50
 8002444:	f001 ffca 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002448:	2000      	movs	r0, #0
 800244a:	f001 ffc7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0C);
 800244e:	200c      	movs	r0, #12
 8002450:	f001 ffc4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002454:	2000      	movs	r0, #0
 8002456:	f001 ffc1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x17);
 800245a:	2017      	movs	r0, #23
 800245c:	f001 ffbe 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002460:	2000      	movs	r0, #0
 8002462:	f001 ffbb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x95);
 8002466:	2095      	movs	r0, #149	; 0x95
 8002468:	f001 ffb8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800246c:	2000      	movs	r0, #0
 800246e:	f001 ffb5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002472:	20f3      	movs	r0, #243	; 0xf3
 8002474:	f001 ffb2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002478:	2000      	movs	r0, #0
 800247a:	f001 ffaf 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xE6);
 800247e:	20e6      	movs	r0, #230	; 0xe6
 8002480:	f001 ffac 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002484:	2000      	movs	r0, #0
 8002486:	f001 ffa9 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC5);
 800248a:	20c5      	movs	r0, #197	; 0xc5
 800248c:	f001 ffba 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8002490:	2032      	movs	r0, #50	; 0x32
 8002492:	f001 ffa3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002496:	2000      	movs	r0, #0
 8002498:	f001 ffa0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x44);
 800249c:	2044      	movs	r0, #68	; 0x44
 800249e:	f001 ff9d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f001 ff9a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x65);
 80024a8:	2065      	movs	r0, #101	; 0x65
 80024aa:	f001 ff97 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f001 ff94 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x76);
 80024b4:	2076      	movs	r0, #118	; 0x76
 80024b6:	f001 ff91 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f001 ff8e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x88);
 80024c0:	2088      	movs	r0, #136	; 0x88
 80024c2:	f001 ff8b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f001 ff88 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC6);
 80024cc:	20c6      	movs	r0, #198	; 0xc6
 80024ce:	f001 ff99 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x20);
 80024d2:	2020      	movs	r0, #32
 80024d4:	f001 ff82 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80024d8:	2000      	movs	r0, #0
 80024da:	f001 ff7f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x17);
 80024de:	2017      	movs	r0, #23
 80024e0:	f001 ff7c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f001 ff79 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f001 ff76 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f001 ff73 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC7);
 80024f6:	20c7      	movs	r0, #199	; 0xc7
 80024f8:	f001 ff84 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80024fc:	2000      	movs	r0, #0
 80024fe:	f001 ff6d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002502:	2000      	movs	r0, #0
 8002504:	f001 ff6a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002508:	2000      	movs	r0, #0
 800250a:	f001 ff67 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800250e:	2000      	movs	r0, #0
 8002510:	f001 ff64 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC8);
 8002514:	20c8      	movs	r0, #200	; 0xc8
 8002516:	f001 ff75 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800251a:	2000      	movs	r0, #0
 800251c:	f001 ff5e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002520:	2000      	movs	r0, #0
 8002522:	f001 ff5b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002526:	2000      	movs	r0, #0
 8002528:	f001 ff58 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800252c:	2000      	movs	r0, #0
 800252e:	f001 ff55 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC9);
 8002532:	20c9      	movs	r0, #201	; 0xc9
 8002534:	f001 ff66 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f001 ff4f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800253e:	2000      	movs	r0, #0
 8002540:	f001 ff4c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002544:	2000      	movs	r0, #0
 8002546:	f001 ff49 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800254a:	2000      	movs	r0, #0
 800254c:	f001 ff46 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002550:	2000      	movs	r0, #0
 8002552:	f001 ff43 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002556:	2000      	movs	r0, #0
 8002558:	f001 ff40 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800255c:	2000      	movs	r0, #0
 800255e:	f001 ff3d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002562:	2000      	movs	r0, #0
 8002564:	f001 ff3a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002568:	2000      	movs	r0, #0
 800256a:	f001 ff37 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800256e:	2000      	movs	r0, #0
 8002570:	f001 ff34 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002574:	2000      	movs	r0, #0
 8002576:	f001 ff31 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800257a:	2000      	movs	r0, #0
 800257c:	f001 ff2e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002580:	2000      	movs	r0, #0
 8002582:	f001 ff2b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002586:	2000      	movs	r0, #0
 8002588:	f001 ff28 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800258c:	2000      	movs	r0, #0
 800258e:	f001 ff25 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002592:	2000      	movs	r0, #0
 8002594:	f001 ff22 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8002598:	20e0      	movs	r0, #224	; 0xe0
 800259a:	f001 ff33 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x16);
 800259e:	2016      	movs	r0, #22
 80025a0:	f001 ff1c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f001 ff19 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x1C);
 80025aa:	201c      	movs	r0, #28
 80025ac:	f001 ff16 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f001 ff13 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x21);
 80025b6:	2021      	movs	r0, #33	; 0x21
 80025b8:	f001 ff10 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f001 ff0d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x36);
 80025c2:	2036      	movs	r0, #54	; 0x36
 80025c4:	f001 ff0a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f001 ff07 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x46);
 80025ce:	2046      	movs	r0, #70	; 0x46
 80025d0:	f001 ff04 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f001 ff01 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x52);
 80025da:	2052      	movs	r0, #82	; 0x52
 80025dc:	f001 fefe 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f001 fefb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x64);
 80025e6:	2064      	movs	r0, #100	; 0x64
 80025e8:	f001 fef8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f001 fef5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x7A);
 80025f2:	207a      	movs	r0, #122	; 0x7a
 80025f4:	f001 fef2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f001 feef 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x8B);
 80025fe:	208b      	movs	r0, #139	; 0x8b
 8002600:	f001 feec 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002604:	2000      	movs	r0, #0
 8002606:	f001 fee9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x99);
 800260a:	2099      	movs	r0, #153	; 0x99
 800260c:	f001 fee6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f001 fee3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA8);
 8002616:	20a8      	movs	r0, #168	; 0xa8
 8002618:	f001 fee0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800261c:	2000      	movs	r0, #0
 800261e:	f001 fedd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xB9);
 8002622:	20b9      	movs	r0, #185	; 0xb9
 8002624:	f001 feda 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002628:	2000      	movs	r0, #0
 800262a:	f001 fed7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xC4);
 800262e:	20c4      	movs	r0, #196	; 0xc4
 8002630:	f001 fed4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002634:	2000      	movs	r0, #0
 8002636:	f001 fed1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xCA);
 800263a:	20ca      	movs	r0, #202	; 0xca
 800263c:	f001 fece 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002640:	2000      	movs	r0, #0
 8002642:	f001 fecb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xD2);
 8002646:	20d2      	movs	r0, #210	; 0xd2
 8002648:	f001 fec8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800264c:	2000      	movs	r0, #0
 800264e:	f001 fec5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xD9);
 8002652:	20d9      	movs	r0, #217	; 0xd9
 8002654:	f001 fec2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002658:	2000      	movs	r0, #0
 800265a:	f001 febf 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xE0);
 800265e:	20e0      	movs	r0, #224	; 0xe0
 8002660:	f001 febc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002664:	2000      	movs	r0, #0
 8002666:	f001 feb9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xF3);
 800266a:	20f3      	movs	r0, #243	; 0xf3
 800266c:	f001 feb6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002670:	2000      	movs	r0, #0
 8002672:	f001 feb3 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE1);
 8002676:	20e1      	movs	r0, #225	; 0xe1
 8002678:	f001 fec4 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x16);
 800267c:	2016      	movs	r0, #22
 800267e:	f001 fead 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002682:	2000      	movs	r0, #0
 8002684:	f001 feaa 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x1C);
 8002688:	201c      	movs	r0, #28
 800268a:	f001 fea7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800268e:	2000      	movs	r0, #0
 8002690:	f001 fea4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x22);
 8002694:	2022      	movs	r0, #34	; 0x22
 8002696:	f001 fea1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800269a:	2000      	movs	r0, #0
 800269c:	f001 fe9e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x36);
 80026a0:	2036      	movs	r0, #54	; 0x36
 80026a2:	f001 fe9b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f001 fe98 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x45);
 80026ac:	2045      	movs	r0, #69	; 0x45
 80026ae:	f001 fe95 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f001 fe92 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x52);
 80026b8:	2052      	movs	r0, #82	; 0x52
 80026ba:	f001 fe8f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80026be:	2000      	movs	r0, #0
 80026c0:	f001 fe8c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x64);
 80026c4:	2064      	movs	r0, #100	; 0x64
 80026c6:	f001 fe89 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f001 fe86 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x7A);
 80026d0:	207a      	movs	r0, #122	; 0x7a
 80026d2:	f001 fe83 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f001 fe80 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x8B);
 80026dc:	208b      	movs	r0, #139	; 0x8b
 80026de:	f001 fe7d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f001 fe7a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x99);
 80026e8:	2099      	movs	r0, #153	; 0x99
 80026ea:	f001 fe77 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f001 fe74 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA8);
 80026f4:	20a8      	movs	r0, #168	; 0xa8
 80026f6:	f001 fe71 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f001 fe6e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xB9);
 8002700:	20b9      	movs	r0, #185	; 0xb9
 8002702:	f001 fe6b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002706:	2000      	movs	r0, #0
 8002708:	f001 fe68 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xC4);
 800270c:	20c4      	movs	r0, #196	; 0xc4
 800270e:	f001 fe65 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002712:	2000      	movs	r0, #0
 8002714:	f001 fe62 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xCA);
 8002718:	20ca      	movs	r0, #202	; 0xca
 800271a:	f001 fe5f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800271e:	2000      	movs	r0, #0
 8002720:	f001 fe5c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xD2);
 8002724:	20d2      	movs	r0, #210	; 0xd2
 8002726:	f001 fe59 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f001 fe56 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xD8);
 8002730:	20d8      	movs	r0, #216	; 0xd8
 8002732:	f001 fe53 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002736:	2000      	movs	r0, #0
 8002738:	f001 fe50 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xE0);
 800273c:	20e0      	movs	r0, #224	; 0xe0
 800273e:	f001 fe4d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002742:	2000      	movs	r0, #0
 8002744:	f001 fe4a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002748:	20f3      	movs	r0, #243	; 0xf3
 800274a:	f001 fe47 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800274e:	2000      	movs	r0, #0
 8002750:	f001 fe44 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE2);
 8002754:	20e2      	movs	r0, #226	; 0xe2
 8002756:	f001 fe55 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x05);
 800275a:	2005      	movs	r0, #5
 800275c:	f001 fe3e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002760:	2000      	movs	r0, #0
 8002762:	f001 fe3b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0B);
 8002766:	200b      	movs	r0, #11
 8002768:	f001 fe38 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f001 fe35 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x1B);
 8002772:	201b      	movs	r0, #27
 8002774:	f001 fe32 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f001 fe2f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x34);
 800277e:	2034      	movs	r0, #52	; 0x34
 8002780:	f001 fe2c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002784:	2000      	movs	r0, #0
 8002786:	f001 fe29 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x44);
 800278a:	2044      	movs	r0, #68	; 0x44
 800278c:	f001 fe26 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f001 fe23 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x4F);
 8002796:	204f      	movs	r0, #79	; 0x4f
 8002798:	f001 fe20 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800279c:	2000      	movs	r0, #0
 800279e:	f001 fe1d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x61);
 80027a2:	2061      	movs	r0, #97	; 0x61
 80027a4:	f001 fe1a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f001 fe17 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x79);
 80027ae:	2079      	movs	r0, #121	; 0x79
 80027b0:	f001 fe14 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f001 fe11 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x88);
 80027ba:	2088      	movs	r0, #136	; 0x88
 80027bc:	f001 fe0e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f001 fe0b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x97);
 80027c6:	2097      	movs	r0, #151	; 0x97
 80027c8:	f001 fe08 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f001 fe05 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA6);
 80027d2:	20a6      	movs	r0, #166	; 0xa6
 80027d4:	f001 fe02 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80027d8:	2000      	movs	r0, #0
 80027da:	f001 fdff 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xB7);
 80027de:	20b7      	movs	r0, #183	; 0xb7
 80027e0:	f001 fdfc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80027e4:	2000      	movs	r0, #0
 80027e6:	f001 fdf9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xC2);
 80027ea:	20c2      	movs	r0, #194	; 0xc2
 80027ec:	f001 fdf6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f001 fdf3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xC7);
 80027f6:	20c7      	movs	r0, #199	; 0xc7
 80027f8:	f001 fdf0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f001 fded 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xD1);
 8002802:	20d1      	movs	r0, #209	; 0xd1
 8002804:	f001 fdea 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002808:	2000      	movs	r0, #0
 800280a:	f001 fde7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xD6);
 800280e:	20d6      	movs	r0, #214	; 0xd6
 8002810:	f001 fde4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002814:	2000      	movs	r0, #0
 8002816:	f001 fde1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xDD);
 800281a:	20dd      	movs	r0, #221	; 0xdd
 800281c:	f001 fdde 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002820:	2000      	movs	r0, #0
 8002822:	f001 fddb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002826:	20f3      	movs	r0, #243	; 0xf3
 8002828:	f001 fdd8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800282c:	2000      	movs	r0, #0
 800282e:	f001 fdd5 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xE3);
 8002832:	20e3      	movs	r0, #227	; 0xe3
 8002834:	f001 fde6 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x05);
 8002838:	2005      	movs	r0, #5
 800283a:	f001 fdcf 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f001 fdcc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA);
 8002844:	200a      	movs	r0, #10
 8002846:	f001 fdc9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800284a:	2000      	movs	r0, #0
 800284c:	f001 fdc6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x1C);
 8002850:	201c      	movs	r0, #28
 8002852:	f001 fdc3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f001 fdc0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x33);
 800285c:	2033      	movs	r0, #51	; 0x33
 800285e:	f001 fdbd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002862:	2000      	movs	r0, #0
 8002864:	f001 fdba 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x44);
 8002868:	2044      	movs	r0, #68	; 0x44
 800286a:	f001 fdb7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f001 fdb4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x50);
 8002874:	2050      	movs	r0, #80	; 0x50
 8002876:	f001 fdb1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f001 fdae 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x62);
 8002880:	2062      	movs	r0, #98	; 0x62
 8002882:	f001 fdab 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002886:	2000      	movs	r0, #0
 8002888:	f001 fda8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x78);
 800288c:	2078      	movs	r0, #120	; 0x78
 800288e:	f001 fda5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002892:	2000      	movs	r0, #0
 8002894:	f001 fda2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x88);
 8002898:	2088      	movs	r0, #136	; 0x88
 800289a:	f001 fd9f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f001 fd9c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x97);
 80028a4:	2097      	movs	r0, #151	; 0x97
 80028a6:	f001 fd99 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f001 fd96 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA6);
 80028b0:	20a6      	movs	r0, #166	; 0xa6
 80028b2:	f001 fd93 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f001 fd90 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xB7);
 80028bc:	20b7      	movs	r0, #183	; 0xb7
 80028be:	f001 fd8d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f001 fd8a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xC2);
 80028c8:	20c2      	movs	r0, #194	; 0xc2
 80028ca:	f001 fd87 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f001 fd84 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xC7);
 80028d4:	20c7      	movs	r0, #199	; 0xc7
 80028d6:	f001 fd81 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f001 fd7e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xD1);
 80028e0:	20d1      	movs	r0, #209	; 0xd1
 80028e2:	f001 fd7b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f001 fd78 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xD5);
 80028ec:	20d5      	movs	r0, #213	; 0xd5
 80028ee:	f001 fd75 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f001 fd72 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xDD);
 80028f8:	20dd      	movs	r0, #221	; 0xdd
 80028fa:	f001 fd6f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80028fe:	2000      	movs	r0, #0
 8002900:	f001 fd6c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002904:	20f3      	movs	r0, #243	; 0xf3
 8002906:	f001 fd69 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800290a:	2000      	movs	r0, #0
 800290c:	f001 fd66 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE4);
 8002910:	20e4      	movs	r0, #228	; 0xe4
 8002912:	f001 fd77 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002916:	2001      	movs	r0, #1
 8002918:	f001 fd60 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f001 fd5d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8002922:	2001      	movs	r0, #1
 8002924:	f001 fd5a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f001 fd57 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x02);
 800292e:	2002      	movs	r0, #2
 8002930:	f001 fd54 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f001 fd51 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2A);
 800293a:	202a      	movs	r0, #42	; 0x2a
 800293c:	f001 fd4e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f001 fd4b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3C);
 8002946:	203c      	movs	r0, #60	; 0x3c
 8002948:	f001 fd48 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f001 fd45 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x4B);
 8002952:	204b      	movs	r0, #75	; 0x4b
 8002954:	f001 fd42 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f001 fd3f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x5D);
 800295e:	205d      	movs	r0, #93	; 0x5d
 8002960:	f001 fd3c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f001 fd39 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x74);
 800296a:	2074      	movs	r0, #116	; 0x74
 800296c:	f001 fd36 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002970:	2000      	movs	r0, #0
 8002972:	f001 fd33 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x84);
 8002976:	2084      	movs	r0, #132	; 0x84
 8002978:	f001 fd30 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800297c:	2000      	movs	r0, #0
 800297e:	f001 fd2d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x93);
 8002982:	2093      	movs	r0, #147	; 0x93
 8002984:	f001 fd2a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002988:	2000      	movs	r0, #0
 800298a:	f001 fd27 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA2);
 800298e:	20a2      	movs	r0, #162	; 0xa2
 8002990:	f001 fd24 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f001 fd21 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xB3);
 800299a:	20b3      	movs	r0, #179	; 0xb3
 800299c:	f001 fd1e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f001 fd1b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xBE);
 80029a6:	20be      	movs	r0, #190	; 0xbe
 80029a8:	f001 fd18 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f001 fd15 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xC4);
 80029b2:	20c4      	movs	r0, #196	; 0xc4
 80029b4:	f001 fd12 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f001 fd0f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xCD);
 80029be:	20cd      	movs	r0, #205	; 0xcd
 80029c0:	f001 fd0c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f001 fd09 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xD3);
 80029ca:	20d3      	movs	r0, #211	; 0xd3
 80029cc:	f001 fd06 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f001 fd03 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xDD);
 80029d6:	20dd      	movs	r0, #221	; 0xdd
 80029d8:	f001 fd00 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80029dc:	2000      	movs	r0, #0
 80029de:	f001 fcfd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xF3);
 80029e2:	20f3      	movs	r0, #243	; 0xf3
 80029e4:	f001 fcfa 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f001 fcf7 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xE5);
 80029ee:	20e5      	movs	r0, #229	; 0xe5
 80029f0:	f001 fd08 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f001 fcf1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f001 fcee 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f001 fceb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f001 fce8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x02);
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f001 fce5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f001 fce2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x29);
 8002a18:	2029      	movs	r0, #41	; 0x29
 8002a1a:	f001 fcdf 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f001 fcdc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x3C);
 8002a24:	203c      	movs	r0, #60	; 0x3c
 8002a26:	f001 fcd9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f001 fcd6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x4B);
 8002a30:	204b      	movs	r0, #75	; 0x4b
 8002a32:	f001 fcd3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f001 fcd0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x5D);
 8002a3c:	205d      	movs	r0, #93	; 0x5d
 8002a3e:	f001 fccd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f001 fcca 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x74);
 8002a48:	2074      	movs	r0, #116	; 0x74
 8002a4a:	f001 fcc7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f001 fcc4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x84);
 8002a54:	2084      	movs	r0, #132	; 0x84
 8002a56:	f001 fcc1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f001 fcbe 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x93);
 8002a60:	2093      	movs	r0, #147	; 0x93
 8002a62:	f001 fcbb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f001 fcb8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA2);
 8002a6c:	20a2      	movs	r0, #162	; 0xa2
 8002a6e:	f001 fcb5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f001 fcb2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xB3);
 8002a78:	20b3      	movs	r0, #179	; 0xb3
 8002a7a:	f001 fcaf 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f001 fcac 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xBE);
 8002a84:	20be      	movs	r0, #190	; 0xbe
 8002a86:	f001 fca9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f001 fca6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xC4);
 8002a90:	20c4      	movs	r0, #196	; 0xc4
 8002a92:	f001 fca3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f001 fca0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xCD);
 8002a9c:	20cd      	movs	r0, #205	; 0xcd
 8002a9e:	f001 fc9d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f001 fc9a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xD3);
 8002aa8:	20d3      	movs	r0, #211	; 0xd3
 8002aaa:	f001 fc97 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f001 fc94 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xDC);
 8002ab4:	20dc      	movs	r0, #220	; 0xdc
 8002ab6:	f001 fc91 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f001 fc8e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002ac0:	20f3      	movs	r0, #243	; 0xf3
 8002ac2:	f001 fc8b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f001 fc88 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE6);
 8002acc:	20e6      	movs	r0, #230	; 0xe6
 8002ace:	f001 fc99 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x11);
 8002ad2:	2011      	movs	r0, #17
 8002ad4:	f001 fc82 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f001 fc7f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x34);
 8002ade:	2034      	movs	r0, #52	; 0x34
 8002ae0:	f001 fc7c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f001 fc79 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x56);
 8002aea:	2056      	movs	r0, #86	; 0x56
 8002aec:	f001 fc76 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f001 fc73 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x76);
 8002af6:	2076      	movs	r0, #118	; 0x76
 8002af8:	f001 fc70 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f001 fc6d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x77);
 8002b02:	2077      	movs	r0, #119	; 0x77
 8002b04:	f001 fc6a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f001 fc67 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x66);
 8002b0e:	2066      	movs	r0, #102	; 0x66
 8002b10:	f001 fc64 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f001 fc61 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x88);
 8002b1a:	2088      	movs	r0, #136	; 0x88
 8002b1c:	f001 fc5e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f001 fc5b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x99);
 8002b26:	2099      	movs	r0, #153	; 0x99
 8002b28:	f001 fc58 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f001 fc55 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xBB);
 8002b32:	20bb      	movs	r0, #187	; 0xbb
 8002b34:	f001 fc52 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f001 fc4f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x99);
 8002b3e:	2099      	movs	r0, #153	; 0x99
 8002b40:	f001 fc4c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f001 fc49 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x66);
 8002b4a:	2066      	movs	r0, #102	; 0x66
 8002b4c:	f001 fc46 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f001 fc43 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x55);
 8002b56:	2055      	movs	r0, #85	; 0x55
 8002b58:	f001 fc40 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f001 fc3d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x55);
 8002b62:	2055      	movs	r0, #85	; 0x55
 8002b64:	f001 fc3a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f001 fc37 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x45);
 8002b6e:	2045      	movs	r0, #69	; 0x45
 8002b70:	f001 fc34 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f001 fc31 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x43);
 8002b7a:	2043      	movs	r0, #67	; 0x43
 8002b7c:	f001 fc2e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f001 fc2b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x44);
 8002b86:	2044      	movs	r0, #68	; 0x44
 8002b88:	f001 fc28 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f001 fc25 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE7);
 8002b92:	20e7      	movs	r0, #231	; 0xe7
 8002b94:	f001 fc36 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8002b98:	2032      	movs	r0, #50	; 0x32
 8002b9a:	f001 fc1f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f001 fc1c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x55);
 8002ba4:	2055      	movs	r0, #85	; 0x55
 8002ba6:	f001 fc19 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f001 fc16 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x76);
 8002bb0:	2076      	movs	r0, #118	; 0x76
 8002bb2:	f001 fc13 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f001 fc10 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x66);
 8002bbc:	2066      	movs	r0, #102	; 0x66
 8002bbe:	f001 fc0d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f001 fc0a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x67);
 8002bc8:	2067      	movs	r0, #103	; 0x67
 8002bca:	f001 fc07 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f001 fc04 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x67);
 8002bd4:	2067      	movs	r0, #103	; 0x67
 8002bd6:	f001 fc01 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f001 fbfe 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x87);
 8002be0:	2087      	movs	r0, #135	; 0x87
 8002be2:	f001 fbfb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f001 fbf8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x99);
 8002bec:	2099      	movs	r0, #153	; 0x99
 8002bee:	f001 fbf5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f001 fbf2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xBB);
 8002bf8:	20bb      	movs	r0, #187	; 0xbb
 8002bfa:	f001 fbef 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f001 fbec 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x99);
 8002c04:	2099      	movs	r0, #153	; 0x99
 8002c06:	f001 fbe9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f001 fbe6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x77);
 8002c10:	2077      	movs	r0, #119	; 0x77
 8002c12:	f001 fbe3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f001 fbe0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x44);
 8002c1c:	2044      	movs	r0, #68	; 0x44
 8002c1e:	f001 fbdd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f001 fbda 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x56);
 8002c28:	2056      	movs	r0, #86	; 0x56
 8002c2a:	f001 fbd7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f001 fbd4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x23);
 8002c34:	2023      	movs	r0, #35	; 0x23
 8002c36:	f001 fbd1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f001 fbce 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x33);
 8002c40:	2033      	movs	r0, #51	; 0x33
 8002c42:	f001 fbcb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f001 fbc8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x45);
 8002c4c:	2045      	movs	r0, #69	; 0x45
 8002c4e:	f001 fbc5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f001 fbc2 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8002c58:	20e8      	movs	r0, #232	; 0xe8
 8002c5a:	f001 fbd3 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f001 fbbc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f001 fbb9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x99);
 8002c6a:	2099      	movs	r0, #153	; 0x99
 8002c6c:	f001 fbb6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f001 fbb3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x87);
 8002c76:	2087      	movs	r0, #135	; 0x87
 8002c78:	f001 fbb0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f001 fbad 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x88);
 8002c82:	2088      	movs	r0, #136	; 0x88
 8002c84:	f001 fbaa 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f001 fba7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x77);
 8002c8e:	2077      	movs	r0, #119	; 0x77
 8002c90:	f001 fba4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f001 fba1 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x66);
 8002c9a:	2066      	movs	r0, #102	; 0x66
 8002c9c:	f001 fb9e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f001 fb9b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x88);
 8002ca6:	2088      	movs	r0, #136	; 0x88
 8002ca8:	f001 fb98 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f001 fb95 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xAA);
 8002cb2:	20aa      	movs	r0, #170	; 0xaa
 8002cb4:	f001 fb92 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f001 fb8f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xBB);
 8002cbe:	20bb      	movs	r0, #187	; 0xbb
 8002cc0:	f001 fb8c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f001 fb89 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x99);
 8002cca:	2099      	movs	r0, #153	; 0x99
 8002ccc:	f001 fb86 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f001 fb83 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x66);
 8002cd6:	2066      	movs	r0, #102	; 0x66
 8002cd8:	f001 fb80 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f001 fb7d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x55);
 8002ce2:	2055      	movs	r0, #85	; 0x55
 8002ce4:	f001 fb7a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f001 fb77 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x55);
 8002cee:	2055      	movs	r0, #85	; 0x55
 8002cf0:	f001 fb74 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f001 fb71 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x44);
 8002cfa:	2044      	movs	r0, #68	; 0x44
 8002cfc:	f001 fb6e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f001 fb6b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x44);
 8002d06:	2044      	movs	r0, #68	; 0x44
 8002d08:	f001 fb68 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f001 fb65 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x55);
 8002d12:	2055      	movs	r0, #85	; 0x55
 8002d14:	f001 fb62 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f001 fb5f 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE9);
 8002d1e:	20e9      	movs	r0, #233	; 0xe9
 8002d20:	f001 fb70 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8002d24:	20aa      	movs	r0, #170	; 0xaa
 8002d26:	f001 fb59 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f001 fb56 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f001 fb53 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f001 fb50 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x00);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f001 fb61 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8002d42:	20aa      	movs	r0, #170	; 0xaa
 8002d44:	f001 fb4a 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xCF);
 8002d48:	20cf      	movs	r0, #207	; 0xcf
 8002d4a:	f001 fb5b 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f001 fb44 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f001 fb41 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f001 fb3e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f001 fb3b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f001 fb38 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f001 fb35 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f001 fb32 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f001 fb2f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f001 fb2c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f001 fb29 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f001 fb26 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f001 fb23 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f001 fb20 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f001 fb1d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f001 fb1a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f001 fb17 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f001 fb14 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002db4:	20f0      	movs	r0, #240	; 0xf0
 8002db6:	f001 fb25 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f001 fb0e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x50);
 8002dc0:	2050      	movs	r0, #80	; 0x50
 8002dc2:	f001 fb0b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f001 fb08 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f001 fb05 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f001 fb02 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xF3);
 8002dd8:	20f3      	movs	r0, #243	; 0xf3
 8002dda:	f001 fb13 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f001 fafc 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xF9);
 8002de4:	20f9      	movs	r0, #249	; 0xf9
 8002de6:	f001 fb0d 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x06);
 8002dea:	2006      	movs	r0, #6
 8002dec:	f001 faf6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x10);
 8002df0:	2010      	movs	r0, #16
 8002df2:	f001 faf3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x29);
 8002df6:	2029      	movs	r0, #41	; 0x29
 8002df8:	f001 faf0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f001 faed 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8002e02:	203a      	movs	r0, #58	; 0x3a
 8002e04:	f001 fafe 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x55);  /* 66 */
 8002e08:	2055      	movs	r0, #85	; 0x55
 8002e0a:	f001 fae7 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x11);
 8002e0e:	2011      	movs	r0, #17
 8002e10:	f001 faf8 	bl	8004404 <lcd_wr_regno>
    HAL_Delay(100);
 8002e14:	2064      	movs	r0, #100	; 0x64
 8002e16:	f002 feef 	bl	8005bf8 <HAL_Delay>
    lcd_wr_regno(0x29);
 8002e1a:	2029      	movs	r0, #41	; 0x29
 8002e1c:	f001 faf2 	bl	8004404 <lcd_wr_regno>
    lcd_wr_regno(0x35);
 8002e20:	2035      	movs	r0, #53	; 0x35
 8002e22:	f001 faef 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002e26:	2000      	movs	r0, #0
 8002e28:	f001 fad8 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x51);
 8002e2c:	2051      	movs	r0, #81	; 0x51
 8002e2e:	f001 fae9 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8002e32:	20ff      	movs	r0, #255	; 0xff
 8002e34:	f001 fad2 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0x53);
 8002e38:	2053      	movs	r0, #83	; 0x53
 8002e3a:	f001 fae3 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x2C);
 8002e3e:	202c      	movs	r0, #44	; 0x2c
 8002e40:	f001 facc 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0x55);
 8002e44:	2055      	movs	r0, #85	; 0x55
 8002e46:	f001 fadd 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x82);
 8002e4a:	2082      	movs	r0, #130	; 0x82
 8002e4c:	f001 fac6 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0x2c);
 8002e50:	202c      	movs	r0, #44	; 0x2c
 8002e52:	f001 fad7 	bl	8004404 <lcd_wr_regno>
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <lcd_ex_st7796_reginit>:
 * @brief  ST7796 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_st7796_reginit(void)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8002e5e:	2011      	movs	r0, #17
 8002e60:	f001 fad0 	bl	8004404 <lcd_wr_regno>

    HAL_Delay(120);
 8002e64:	2078      	movs	r0, #120	; 0x78
 8002e66:	f002 fec7 	bl	8005bf8 <HAL_Delay>

    lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
 8002e6a:	2036      	movs	r0, #54	; 0x36
 8002e6c:	f001 faca 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8002e70:	2048      	movs	r0, #72	; 0x48
 8002e72:	f001 fab3 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8002e76:	203a      	movs	r0, #58	; 0x3a
 8002e78:	f001 fac4 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8002e7c:	2055      	movs	r0, #85	; 0x55
 8002e7e:	f001 faad 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002e82:	20f0      	movs	r0, #240	; 0xf0
 8002e84:	f001 fabe 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xC3);
 8002e88:	20c3      	movs	r0, #195	; 0xc3
 8002e8a:	f001 faa7 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002e8e:	20f0      	movs	r0, #240	; 0xf0
 8002e90:	f001 fab8 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x96);
 8002e94:	2096      	movs	r0, #150	; 0x96
 8002e96:	f001 faa1 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8002e9a:	20b4      	movs	r0, #180	; 0xb4
 8002e9c:	f001 fab2 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f001 fa9b 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB6); /* Display Function Control */
 8002ea6:	20b6      	movs	r0, #182	; 0xb6
 8002ea8:	f001 faac 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8002eac:	200a      	movs	r0, #10
 8002eae:	f001 fa95 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA2);
 8002eb2:	20a2      	movs	r0, #162	; 0xa2
 8002eb4:	f001 fa92 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8002eb8:	20b7      	movs	r0, #183	; 0xb7
 8002eba:	f001 faa3 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xC6);
 8002ebe:	20c6      	movs	r0, #198	; 0xc6
 8002ec0:	f001 fa8c 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB9);
 8002ec4:	20b9      	movs	r0, #185	; 0xb9
 8002ec6:	f001 fa9d 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x02);
 8002eca:	2002      	movs	r0, #2
 8002ecc:	f001 fa86 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xE0);
 8002ed0:	20e0      	movs	r0, #224	; 0xe0
 8002ed2:	f001 fa83 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8002ed6:	20c0      	movs	r0, #192	; 0xc0
 8002ed8:	f001 fa94 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8002edc:	2080      	movs	r0, #128	; 0x80
 8002ede:	f001 fa7d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x16);
 8002ee2:	2016      	movs	r0, #22
 8002ee4:	f001 fa7a 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC1);
 8002ee8:	20c1      	movs	r0, #193	; 0xc1
 8002eea:	f001 fa8b 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x19);
 8002eee:	2019      	movs	r0, #25
 8002ef0:	f001 fa74 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8002ef4:	20c2      	movs	r0, #194	; 0xc2
 8002ef6:	f001 fa85 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xA7);
 8002efa:	20a7      	movs	r0, #167	; 0xa7
 8002efc:	f001 fa6e 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC5);
 8002f00:	20c5      	movs	r0, #197	; 0xc5
 8002f02:	f001 fa7f 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8002f06:	2016      	movs	r0, #22
 8002f08:	f001 fa68 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8002f0c:	20e8      	movs	r0, #232	; 0xe8
 8002f0e:	f001 fa79 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x40);
 8002f12:	2040      	movs	r0, #64	; 0x40
 8002f14:	f001 fa62 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x8A);
 8002f18:	208a      	movs	r0, #138	; 0x8a
 8002f1a:	f001 fa5f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f001 fa5c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f001 fa59 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x29);
 8002f2a:	2029      	movs	r0, #41	; 0x29
 8002f2c:	f001 fa56 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x19);
 8002f30:	2019      	movs	r0, #25
 8002f32:	f001 fa53 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xA5);
 8002f36:	20a5      	movs	r0, #165	; 0xa5
 8002f38:	f001 fa50 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x33);
 8002f3c:	2033      	movs	r0, #51	; 0x33
 8002f3e:	f001 fa4d 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8002f42:	20e0      	movs	r0, #224	; 0xe0
 8002f44:	f001 fa5e 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8002f48:	20f0      	movs	r0, #240	; 0xf0
 8002f4a:	f001 fa47 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x07);
 8002f4e:	2007      	movs	r0, #7
 8002f50:	f001 fa44 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0D);
 8002f54:	200d      	movs	r0, #13
 8002f56:	f001 fa41 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x04);
 8002f5a:	2004      	movs	r0, #4
 8002f5c:	f001 fa3e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x05);
 8002f60:	2005      	movs	r0, #5
 8002f62:	f001 fa3b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x14);
 8002f66:	2014      	movs	r0, #20
 8002f68:	f001 fa38 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x36);
 8002f6c:	2036      	movs	r0, #54	; 0x36
 8002f6e:	f001 fa35 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x54);
 8002f72:	2054      	movs	r0, #84	; 0x54
 8002f74:	f001 fa32 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x4C);
 8002f78:	204c      	movs	r0, #76	; 0x4c
 8002f7a:	f001 fa2f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x38);
 8002f7e:	2038      	movs	r0, #56	; 0x38
 8002f80:	f001 fa2c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x13);
 8002f84:	2013      	movs	r0, #19
 8002f86:	f001 fa29 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x14);
 8002f8a:	2014      	movs	r0, #20
 8002f8c:	f001 fa26 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2E);
 8002f90:	202e      	movs	r0, #46	; 0x2e
 8002f92:	f001 fa23 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x34);
 8002f96:	2034      	movs	r0, #52	; 0x34
 8002f98:	f001 fa20 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE1);
 8002f9c:	20e1      	movs	r0, #225	; 0xe1
 8002f9e:	f001 fa31 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8002fa2:	20f0      	movs	r0, #240	; 0xf0
 8002fa4:	f001 fa1a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x10);
 8002fa8:	2010      	movs	r0, #16
 8002faa:	f001 fa17 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x14);
 8002fae:	2014      	movs	r0, #20
 8002fb0:	f001 fa14 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0E);
 8002fb4:	200e      	movs	r0, #14
 8002fb6:	f001 fa11 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0C);
 8002fba:	200c      	movs	r0, #12
 8002fbc:	f001 fa0e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x08);
 8002fc0:	2008      	movs	r0, #8
 8002fc2:	f001 fa0b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x35);
 8002fc6:	2035      	movs	r0, #53	; 0x35
 8002fc8:	f001 fa08 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x44);
 8002fcc:	2044      	movs	r0, #68	; 0x44
 8002fce:	f001 fa05 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x4C);
 8002fd2:	204c      	movs	r0, #76	; 0x4c
 8002fd4:	f001 fa02 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x26);
 8002fd8:	2026      	movs	r0, #38	; 0x26
 8002fda:	f001 f9ff 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x10);
 8002fde:	2010      	movs	r0, #16
 8002fe0:	f001 f9fc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x12);
 8002fe4:	2012      	movs	r0, #18
 8002fe6:	f001 f9f9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x2C);
 8002fea:	202c      	movs	r0, #44	; 0x2c
 8002fec:	f001 f9f6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x32);
 8002ff0:	2032      	movs	r0, #50	; 0x32
 8002ff2:	f001 f9f3 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002ff6:	20f0      	movs	r0, #240	; 0xf0
 8002ff8:	f001 fa04 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8002ffc:	203c      	movs	r0, #60	; 0x3c
 8002ffe:	f001 f9ed 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8003002:	20f0      	movs	r0, #240	; 0xf0
 8003004:	f001 f9fe 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x69);
 8003008:	2069      	movs	r0, #105	; 0x69
 800300a:	f001 f9e7 	bl	80043dc <lcd_wr_data>

    HAL_Delay(120);
 800300e:	2078      	movs	r0, #120	; 0x78
 8003010:	f002 fdf2 	bl	8005bf8 <HAL_Delay>

    lcd_wr_regno(0x21);
 8003014:	2021      	movs	r0, #33	; 0x21
 8003016:	f001 f9f5 	bl	8004404 <lcd_wr_regno>
    lcd_wr_regno(0x29);
 800301a:	2029      	movs	r0, #41	; 0x29
 800301c:	f001 f9f2 	bl	8004404 <lcd_wr_regno>
}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}

08003024 <lcd_ex_nt35510_reginit>:
 * @brief  NT35510 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_nt35510_reginit(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
    lcd_write_reg(0xF000, 0x55);
 8003028:	2155      	movs	r1, #85	; 0x55
 800302a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800302e:	f001 f9fd 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8003032:	21aa      	movs	r1, #170	; 0xaa
 8003034:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003038:	f001 f9f8 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 800303c:	2152      	movs	r1, #82	; 0x52
 800303e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003042:	f001 f9f3 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8003046:	2108      	movs	r1, #8
 8003048:	f24f 0003 	movw	r0, #61443	; 0xf003
 800304c:	f001 f9ee 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xF004, 0x01);
 8003050:	2101      	movs	r1, #1
 8003052:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003056:	f001 f9e9 	bl	800442c <lcd_write_reg>
    /* AVDD Set AVDD 5.2V */
    lcd_write_reg(0xB000, 0x0D);
 800305a:	210d      	movs	r1, #13
 800305c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003060:	f001 f9e4 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB001, 0x0D);
 8003064:	210d      	movs	r1, #13
 8003066:	f24b 0001 	movw	r0, #45057	; 0xb001
 800306a:	f001 f9df 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB002, 0x0D);
 800306e:	210d      	movs	r1, #13
 8003070:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003074:	f001 f9da 	bl	800442c <lcd_write_reg>
    /* AVDD ratio */
    lcd_write_reg(0xB600, 0x34);
 8003078:	2134      	movs	r1, #52	; 0x34
 800307a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800307e:	f001 f9d5 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB601, 0x34);
 8003082:	2134      	movs	r1, #52	; 0x34
 8003084:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003088:	f001 f9d0 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB602, 0x34);
 800308c:	2134      	movs	r1, #52	; 0x34
 800308e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003092:	f001 f9cb 	bl	800442c <lcd_write_reg>
    /* AVEE -5.2V */
    lcd_write_reg(0xB100, 0x0D);
 8003096:	210d      	movs	r1, #13
 8003098:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800309c:	f001 f9c6 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB101, 0x0D);
 80030a0:	210d      	movs	r1, #13
 80030a2:	f24b 1001 	movw	r0, #45313	; 0xb101
 80030a6:	f001 f9c1 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB102, 0x0D);
 80030aa:	210d      	movs	r1, #13
 80030ac:	f24b 1002 	movw	r0, #45314	; 0xb102
 80030b0:	f001 f9bc 	bl	800442c <lcd_write_reg>
    /* AVEE ratio */
    lcd_write_reg(0xB700, 0x34);
 80030b4:	2134      	movs	r1, #52	; 0x34
 80030b6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80030ba:	f001 f9b7 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB701, 0x34);
 80030be:	2134      	movs	r1, #52	; 0x34
 80030c0:	f24b 7001 	movw	r0, #46849	; 0xb701
 80030c4:	f001 f9b2 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB702, 0x34);
 80030c8:	2134      	movs	r1, #52	; 0x34
 80030ca:	f24b 7002 	movw	r0, #46850	; 0xb702
 80030ce:	f001 f9ad 	bl	800442c <lcd_write_reg>
    /* VCL -2.5V */
    lcd_write_reg(0xB200, 0x00);
 80030d2:	2100      	movs	r1, #0
 80030d4:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80030d8:	f001 f9a8 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB201, 0x00);
 80030dc:	2100      	movs	r1, #0
 80030de:	f24b 2001 	movw	r0, #45569	; 0xb201
 80030e2:	f001 f9a3 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB202, 0x00);
 80030e6:	2100      	movs	r1, #0
 80030e8:	f24b 2002 	movw	r0, #45570	; 0xb202
 80030ec:	f001 f99e 	bl	800442c <lcd_write_reg>
    /* VCL ratio */
    lcd_write_reg(0xB800, 0x24);
 80030f0:	2124      	movs	r1, #36	; 0x24
 80030f2:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80030f6:	f001 f999 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB801, 0x24);
 80030fa:	2124      	movs	r1, #36	; 0x24
 80030fc:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003100:	f001 f994 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB802, 0x24);
 8003104:	2124      	movs	r1, #36	; 0x24
 8003106:	f64b 0002 	movw	r0, #47106	; 0xb802
 800310a:	f001 f98f 	bl	800442c <lcd_write_reg>
    /* VGH 15V (Free pump) */
    lcd_write_reg(0xBF00, 0x01);
 800310e:	2101      	movs	r1, #1
 8003110:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003114:	f001 f98a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB300, 0x0F);
 8003118:	210f      	movs	r1, #15
 800311a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800311e:	f001 f985 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB301, 0x0F);
 8003122:	210f      	movs	r1, #15
 8003124:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003128:	f001 f980 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB302, 0x0F);
 800312c:	210f      	movs	r1, #15
 800312e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003132:	f001 f97b 	bl	800442c <lcd_write_reg>
    /* VGH ratio */
    lcd_write_reg(0xB900, 0x34);
 8003136:	2134      	movs	r1, #52	; 0x34
 8003138:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800313c:	f001 f976 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB901, 0x34);
 8003140:	2134      	movs	r1, #52	; 0x34
 8003142:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003146:	f001 f971 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB902, 0x34);
 800314a:	2134      	movs	r1, #52	; 0x34
 800314c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003150:	f001 f96c 	bl	800442c <lcd_write_reg>
    /* VGL_REG -10V */
    lcd_write_reg(0xB500, 0x08);
 8003154:	2108      	movs	r1, #8
 8003156:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800315a:	f001 f967 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB501, 0x08);
 800315e:	2108      	movs	r1, #8
 8003160:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003164:	f001 f962 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB502, 0x08);
 8003168:	2108      	movs	r1, #8
 800316a:	f24b 5002 	movw	r0, #46338	; 0xb502
 800316e:	f001 f95d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xC200, 0x03);
 8003172:	2103      	movs	r1, #3
 8003174:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003178:	f001 f958 	bl	800442c <lcd_write_reg>
    /* VGLX ratio */
    lcd_write_reg(0xBA00, 0x24);
 800317c:	2124      	movs	r1, #36	; 0x24
 800317e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003182:	f001 f953 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xBA01, 0x24);
 8003186:	2124      	movs	r1, #36	; 0x24
 8003188:	f64b 2001 	movw	r0, #47617	; 0xba01
 800318c:	f001 f94e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xBA02, 0x24);
 8003190:	2124      	movs	r1, #36	; 0x24
 8003192:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003196:	f001 f949 	bl	800442c <lcd_write_reg>
    /* VGMP/VGSP 4.5V/0V */
    lcd_write_reg(0xBC00, 0x00);
 800319a:	2100      	movs	r1, #0
 800319c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80031a0:	f001 f944 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x78);
 80031a4:	2178      	movs	r1, #120	; 0x78
 80031a6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80031aa:	f001 f93f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 80031ae:	2100      	movs	r1, #0
 80031b0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80031b4:	f001 f93a 	bl	800442c <lcd_write_reg>
    /* VGMN/VGSN -4.5V/0V */
    lcd_write_reg(0xBD00, 0x00);
 80031b8:	2100      	movs	r1, #0
 80031ba:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80031be:	f001 f935 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xBD01, 0x78);
 80031c2:	2178      	movs	r1, #120	; 0x78
 80031c4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80031c8:	f001 f930 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xBD02, 0x00);
 80031cc:	2100      	movs	r1, #0
 80031ce:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80031d2:	f001 f92b 	bl	800442c <lcd_write_reg>
    /* VCOM */
    lcd_write_reg(0xBE00, 0x00);
 80031d6:	2100      	movs	r1, #0
 80031d8:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80031dc:	f001 f926 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xBE01, 0x64);
 80031e0:	2164      	movs	r1, #100	; 0x64
 80031e2:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80031e6:	f001 f921 	bl	800442c <lcd_write_reg>
    /* Gamma Setting */
    lcd_write_reg(0xD100, 0x00);
 80031ea:	2100      	movs	r1, #0
 80031ec:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80031f0:	f001 f91c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD101, 0x33);
 80031f4:	2133      	movs	r1, #51	; 0x33
 80031f6:	f24d 1001 	movw	r0, #53505	; 0xd101
 80031fa:	f001 f917 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD102, 0x00);
 80031fe:	2100      	movs	r1, #0
 8003200:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003204:	f001 f912 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD103, 0x34);
 8003208:	2134      	movs	r1, #52	; 0x34
 800320a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800320e:	f001 f90d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD104, 0x00);
 8003212:	2100      	movs	r1, #0
 8003214:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003218:	f001 f908 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD105, 0x3A);
 800321c:	213a      	movs	r1, #58	; 0x3a
 800321e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003222:	f001 f903 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD106, 0x00);
 8003226:	2100      	movs	r1, #0
 8003228:	f24d 1006 	movw	r0, #53510	; 0xd106
 800322c:	f001 f8fe 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD107, 0x4A);
 8003230:	214a      	movs	r1, #74	; 0x4a
 8003232:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003236:	f001 f8f9 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD108, 0x00);
 800323a:	2100      	movs	r1, #0
 800323c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003240:	f001 f8f4 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD109, 0x5C);
 8003244:	215c      	movs	r1, #92	; 0x5c
 8003246:	f24d 1009 	movw	r0, #53513	; 0xd109
 800324a:	f001 f8ef 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD10A, 0x00);
 800324e:	2100      	movs	r1, #0
 8003250:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003254:	f001 f8ea 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD10B, 0x81);
 8003258:	2181      	movs	r1, #129	; 0x81
 800325a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800325e:	f001 f8e5 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD10C, 0x00);
 8003262:	2100      	movs	r1, #0
 8003264:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003268:	f001 f8e0 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD10D, 0xA6);
 800326c:	21a6      	movs	r1, #166	; 0xa6
 800326e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003272:	f001 f8db 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD10E, 0x00);
 8003276:	2100      	movs	r1, #0
 8003278:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800327c:	f001 f8d6 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD10F, 0xE5);
 8003280:	21e5      	movs	r1, #229	; 0xe5
 8003282:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003286:	f001 f8d1 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD110, 0x01);
 800328a:	2101      	movs	r1, #1
 800328c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003290:	f001 f8cc 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD111, 0x13);
 8003294:	2113      	movs	r1, #19
 8003296:	f24d 1011 	movw	r0, #53521	; 0xd111
 800329a:	f001 f8c7 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD112, 0x01);
 800329e:	2101      	movs	r1, #1
 80032a0:	f24d 1012 	movw	r0, #53522	; 0xd112
 80032a4:	f001 f8c2 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD113, 0x54);
 80032a8:	2154      	movs	r1, #84	; 0x54
 80032aa:	f24d 1013 	movw	r0, #53523	; 0xd113
 80032ae:	f001 f8bd 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD114, 0x01);
 80032b2:	2101      	movs	r1, #1
 80032b4:	f24d 1014 	movw	r0, #53524	; 0xd114
 80032b8:	f001 f8b8 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD115, 0x82);
 80032bc:	2182      	movs	r1, #130	; 0x82
 80032be:	f24d 1015 	movw	r0, #53525	; 0xd115
 80032c2:	f001 f8b3 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD116, 0x01);
 80032c6:	2101      	movs	r1, #1
 80032c8:	f24d 1016 	movw	r0, #53526	; 0xd116
 80032cc:	f001 f8ae 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD117, 0xCA);
 80032d0:	21ca      	movs	r1, #202	; 0xca
 80032d2:	f24d 1017 	movw	r0, #53527	; 0xd117
 80032d6:	f001 f8a9 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD118, 0x02);
 80032da:	2102      	movs	r1, #2
 80032dc:	f24d 1018 	movw	r0, #53528	; 0xd118
 80032e0:	f001 f8a4 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD119, 0x00);
 80032e4:	2100      	movs	r1, #0
 80032e6:	f24d 1019 	movw	r0, #53529	; 0xd119
 80032ea:	f001 f89f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD11A, 0x02);
 80032ee:	2102      	movs	r1, #2
 80032f0:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80032f4:	f001 f89a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD11B, 0x01);
 80032f8:	2101      	movs	r1, #1
 80032fa:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80032fe:	f001 f895 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD11C, 0x02);
 8003302:	2102      	movs	r1, #2
 8003304:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003308:	f001 f890 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD11D, 0x34);
 800330c:	2134      	movs	r1, #52	; 0x34
 800330e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003312:	f001 f88b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD11E, 0x02);
 8003316:	2102      	movs	r1, #2
 8003318:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800331c:	f001 f886 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD11F, 0x67);
 8003320:	2167      	movs	r1, #103	; 0x67
 8003322:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003326:	f001 f881 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD120, 0x02);
 800332a:	2102      	movs	r1, #2
 800332c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003330:	f001 f87c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD121, 0x84);
 8003334:	2184      	movs	r1, #132	; 0x84
 8003336:	f24d 1021 	movw	r0, #53537	; 0xd121
 800333a:	f001 f877 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD122, 0x02);
 800333e:	2102      	movs	r1, #2
 8003340:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003344:	f001 f872 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD123, 0xA4);
 8003348:	21a4      	movs	r1, #164	; 0xa4
 800334a:	f24d 1023 	movw	r0, #53539	; 0xd123
 800334e:	f001 f86d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD124, 0x02);
 8003352:	2102      	movs	r1, #2
 8003354:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003358:	f001 f868 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD125, 0xB7);
 800335c:	21b7      	movs	r1, #183	; 0xb7
 800335e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003362:	f001 f863 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD126, 0x02);
 8003366:	2102      	movs	r1, #2
 8003368:	f24d 1026 	movw	r0, #53542	; 0xd126
 800336c:	f001 f85e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD127, 0xCF);
 8003370:	21cf      	movs	r1, #207	; 0xcf
 8003372:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003376:	f001 f859 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD128, 0x02);
 800337a:	2102      	movs	r1, #2
 800337c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003380:	f001 f854 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD129, 0xDE);
 8003384:	21de      	movs	r1, #222	; 0xde
 8003386:	f24d 1029 	movw	r0, #53545	; 0xd129
 800338a:	f001 f84f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD12A, 0x02);
 800338e:	2102      	movs	r1, #2
 8003390:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003394:	f001 f84a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD12B, 0xF2);
 8003398:	21f2      	movs	r1, #242	; 0xf2
 800339a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800339e:	f001 f845 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD12C, 0x02);
 80033a2:	2102      	movs	r1, #2
 80033a4:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80033a8:	f001 f840 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD12D, 0xFE);
 80033ac:	21fe      	movs	r1, #254	; 0xfe
 80033ae:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80033b2:	f001 f83b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD12E, 0x03);
 80033b6:	2103      	movs	r1, #3
 80033b8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80033bc:	f001 f836 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD12F, 0x10);
 80033c0:	2110      	movs	r1, #16
 80033c2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80033c6:	f001 f831 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD130, 0x03);
 80033ca:	2103      	movs	r1, #3
 80033cc:	f24d 1030 	movw	r0, #53552	; 0xd130
 80033d0:	f001 f82c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD131, 0x33);
 80033d4:	2133      	movs	r1, #51	; 0x33
 80033d6:	f24d 1031 	movw	r0, #53553	; 0xd131
 80033da:	f001 f827 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD132, 0x03);
 80033de:	2103      	movs	r1, #3
 80033e0:	f24d 1032 	movw	r0, #53554	; 0xd132
 80033e4:	f001 f822 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD133, 0x6D);
 80033e8:	216d      	movs	r1, #109	; 0x6d
 80033ea:	f24d 1033 	movw	r0, #53555	; 0xd133
 80033ee:	f001 f81d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD200, 0x00);
 80033f2:	2100      	movs	r1, #0
 80033f4:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80033f8:	f001 f818 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD201, 0x33);
 80033fc:	2133      	movs	r1, #51	; 0x33
 80033fe:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003402:	f001 f813 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD202, 0x00);
 8003406:	2100      	movs	r1, #0
 8003408:	f24d 2002 	movw	r0, #53762	; 0xd202
 800340c:	f001 f80e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD203, 0x34);
 8003410:	2134      	movs	r1, #52	; 0x34
 8003412:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003416:	f001 f809 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD204, 0x00);
 800341a:	2100      	movs	r1, #0
 800341c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003420:	f001 f804 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD205, 0x3A);
 8003424:	213a      	movs	r1, #58	; 0x3a
 8003426:	f24d 2005 	movw	r0, #53765	; 0xd205
 800342a:	f000 ffff 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD206, 0x00);
 800342e:	2100      	movs	r1, #0
 8003430:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003434:	f000 fffa 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD207, 0x4A);
 8003438:	214a      	movs	r1, #74	; 0x4a
 800343a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800343e:	f000 fff5 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD208, 0x00);
 8003442:	2100      	movs	r1, #0
 8003444:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003448:	f000 fff0 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD209, 0x5C);
 800344c:	215c      	movs	r1, #92	; 0x5c
 800344e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003452:	f000 ffeb 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD20A, 0x00);
 8003456:	2100      	movs	r1, #0
 8003458:	f24d 200a 	movw	r0, #53770	; 0xd20a
 800345c:	f000 ffe6 	bl	800442c <lcd_write_reg>

    lcd_write_reg(0xD20B, 0x81);
 8003460:	2181      	movs	r1, #129	; 0x81
 8003462:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003466:	f000 ffe1 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD20C, 0x00);
 800346a:	2100      	movs	r1, #0
 800346c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003470:	f000 ffdc 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD20D, 0xA6);
 8003474:	21a6      	movs	r1, #166	; 0xa6
 8003476:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800347a:	f000 ffd7 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD20E, 0x00);
 800347e:	2100      	movs	r1, #0
 8003480:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003484:	f000 ffd2 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD20F, 0xE5);
 8003488:	21e5      	movs	r1, #229	; 0xe5
 800348a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800348e:	f000 ffcd 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD210, 0x01);
 8003492:	2101      	movs	r1, #1
 8003494:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003498:	f000 ffc8 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD211, 0x13);
 800349c:	2113      	movs	r1, #19
 800349e:	f24d 2011 	movw	r0, #53777	; 0xd211
 80034a2:	f000 ffc3 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD212, 0x01);
 80034a6:	2101      	movs	r1, #1
 80034a8:	f24d 2012 	movw	r0, #53778	; 0xd212
 80034ac:	f000 ffbe 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD213, 0x54);
 80034b0:	2154      	movs	r1, #84	; 0x54
 80034b2:	f24d 2013 	movw	r0, #53779	; 0xd213
 80034b6:	f000 ffb9 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD214, 0x01);
 80034ba:	2101      	movs	r1, #1
 80034bc:	f24d 2014 	movw	r0, #53780	; 0xd214
 80034c0:	f000 ffb4 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD215, 0x82);
 80034c4:	2182      	movs	r1, #130	; 0x82
 80034c6:	f24d 2015 	movw	r0, #53781	; 0xd215
 80034ca:	f000 ffaf 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD216, 0x01);
 80034ce:	2101      	movs	r1, #1
 80034d0:	f24d 2016 	movw	r0, #53782	; 0xd216
 80034d4:	f000 ffaa 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD217, 0xCA);
 80034d8:	21ca      	movs	r1, #202	; 0xca
 80034da:	f24d 2017 	movw	r0, #53783	; 0xd217
 80034de:	f000 ffa5 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD218, 0x02);
 80034e2:	2102      	movs	r1, #2
 80034e4:	f24d 2018 	movw	r0, #53784	; 0xd218
 80034e8:	f000 ffa0 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD219, 0x00);
 80034ec:	2100      	movs	r1, #0
 80034ee:	f24d 2019 	movw	r0, #53785	; 0xd219
 80034f2:	f000 ff9b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD21A, 0x02);
 80034f6:	2102      	movs	r1, #2
 80034f8:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80034fc:	f000 ff96 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD21B, 0x01);
 8003500:	2101      	movs	r1, #1
 8003502:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003506:	f000 ff91 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD21C, 0x02);
 800350a:	2102      	movs	r1, #2
 800350c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003510:	f000 ff8c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD21D, 0x34);
 8003514:	2134      	movs	r1, #52	; 0x34
 8003516:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800351a:	f000 ff87 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD21E, 0x02);
 800351e:	2102      	movs	r1, #2
 8003520:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003524:	f000 ff82 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD21F, 0x67);
 8003528:	2167      	movs	r1, #103	; 0x67
 800352a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800352e:	f000 ff7d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD220, 0x02);
 8003532:	2102      	movs	r1, #2
 8003534:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003538:	f000 ff78 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD221, 0x84);
 800353c:	2184      	movs	r1, #132	; 0x84
 800353e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003542:	f000 ff73 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD222, 0x02);
 8003546:	2102      	movs	r1, #2
 8003548:	f24d 2022 	movw	r0, #53794	; 0xd222
 800354c:	f000 ff6e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD223, 0xA4);
 8003550:	21a4      	movs	r1, #164	; 0xa4
 8003552:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003556:	f000 ff69 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD224, 0x02);
 800355a:	2102      	movs	r1, #2
 800355c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003560:	f000 ff64 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD225, 0xB7);
 8003564:	21b7      	movs	r1, #183	; 0xb7
 8003566:	f24d 2025 	movw	r0, #53797	; 0xd225
 800356a:	f000 ff5f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD226, 0x02);
 800356e:	2102      	movs	r1, #2
 8003570:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003574:	f000 ff5a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD227, 0xCF);
 8003578:	21cf      	movs	r1, #207	; 0xcf
 800357a:	f24d 2027 	movw	r0, #53799	; 0xd227
 800357e:	f000 ff55 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD228, 0x02);
 8003582:	2102      	movs	r1, #2
 8003584:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003588:	f000 ff50 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD229, 0xDE);
 800358c:	21de      	movs	r1, #222	; 0xde
 800358e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003592:	f000 ff4b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD22A, 0x02);
 8003596:	2102      	movs	r1, #2
 8003598:	f24d 202a 	movw	r0, #53802	; 0xd22a
 800359c:	f000 ff46 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD22B, 0xF2);
 80035a0:	21f2      	movs	r1, #242	; 0xf2
 80035a2:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80035a6:	f000 ff41 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD22C, 0x02);
 80035aa:	2102      	movs	r1, #2
 80035ac:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80035b0:	f000 ff3c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD22D, 0xFE);
 80035b4:	21fe      	movs	r1, #254	; 0xfe
 80035b6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80035ba:	f000 ff37 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD22E, 0x03);
 80035be:	2103      	movs	r1, #3
 80035c0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80035c4:	f000 ff32 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD22F, 0x10);
 80035c8:	2110      	movs	r1, #16
 80035ca:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80035ce:	f000 ff2d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD230, 0x03);
 80035d2:	2103      	movs	r1, #3
 80035d4:	f24d 2030 	movw	r0, #53808	; 0xd230
 80035d8:	f000 ff28 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD231, 0x33);
 80035dc:	2133      	movs	r1, #51	; 0x33
 80035de:	f24d 2031 	movw	r0, #53809	; 0xd231
 80035e2:	f000 ff23 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD232, 0x03);
 80035e6:	2103      	movs	r1, #3
 80035e8:	f24d 2032 	movw	r0, #53810	; 0xd232
 80035ec:	f000 ff1e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD233, 0x6D);
 80035f0:	216d      	movs	r1, #109	; 0x6d
 80035f2:	f24d 2033 	movw	r0, #53811	; 0xd233
 80035f6:	f000 ff19 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD300, 0x00);
 80035fa:	2100      	movs	r1, #0
 80035fc:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003600:	f000 ff14 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD301, 0x33);
 8003604:	2133      	movs	r1, #51	; 0x33
 8003606:	f24d 3001 	movw	r0, #54017	; 0xd301
 800360a:	f000 ff0f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD302, 0x00);
 800360e:	2100      	movs	r1, #0
 8003610:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003614:	f000 ff0a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD303, 0x34);
 8003618:	2134      	movs	r1, #52	; 0x34
 800361a:	f24d 3003 	movw	r0, #54019	; 0xd303
 800361e:	f000 ff05 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD304, 0x00);
 8003622:	2100      	movs	r1, #0
 8003624:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003628:	f000 ff00 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD305, 0x3A);
 800362c:	213a      	movs	r1, #58	; 0x3a
 800362e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003632:	f000 fefb 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD306, 0x00);
 8003636:	2100      	movs	r1, #0
 8003638:	f24d 3006 	movw	r0, #54022	; 0xd306
 800363c:	f000 fef6 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD307, 0x4A);
 8003640:	214a      	movs	r1, #74	; 0x4a
 8003642:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003646:	f000 fef1 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD308, 0x00);
 800364a:	2100      	movs	r1, #0
 800364c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003650:	f000 feec 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD309, 0x5C);
 8003654:	215c      	movs	r1, #92	; 0x5c
 8003656:	f24d 3009 	movw	r0, #54025	; 0xd309
 800365a:	f000 fee7 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD30A, 0x00);
 800365e:	2100      	movs	r1, #0
 8003660:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003664:	f000 fee2 	bl	800442c <lcd_write_reg>

    lcd_write_reg(0xD30B, 0x81);
 8003668:	2181      	movs	r1, #129	; 0x81
 800366a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 800366e:	f000 fedd 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD30C, 0x00);
 8003672:	2100      	movs	r1, #0
 8003674:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003678:	f000 fed8 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD30D, 0xA6);
 800367c:	21a6      	movs	r1, #166	; 0xa6
 800367e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003682:	f000 fed3 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD30E, 0x00);
 8003686:	2100      	movs	r1, #0
 8003688:	f24d 300e 	movw	r0, #54030	; 0xd30e
 800368c:	f000 fece 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD30F, 0xE5);
 8003690:	21e5      	movs	r1, #229	; 0xe5
 8003692:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003696:	f000 fec9 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD310, 0x01);
 800369a:	2101      	movs	r1, #1
 800369c:	f24d 3010 	movw	r0, #54032	; 0xd310
 80036a0:	f000 fec4 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD311, 0x13);
 80036a4:	2113      	movs	r1, #19
 80036a6:	f24d 3011 	movw	r0, #54033	; 0xd311
 80036aa:	f000 febf 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD312, 0x01);
 80036ae:	2101      	movs	r1, #1
 80036b0:	f24d 3012 	movw	r0, #54034	; 0xd312
 80036b4:	f000 feba 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD313, 0x54);
 80036b8:	2154      	movs	r1, #84	; 0x54
 80036ba:	f24d 3013 	movw	r0, #54035	; 0xd313
 80036be:	f000 feb5 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD314, 0x01);
 80036c2:	2101      	movs	r1, #1
 80036c4:	f24d 3014 	movw	r0, #54036	; 0xd314
 80036c8:	f000 feb0 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD315, 0x82);
 80036cc:	2182      	movs	r1, #130	; 0x82
 80036ce:	f24d 3015 	movw	r0, #54037	; 0xd315
 80036d2:	f000 feab 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD316, 0x01);
 80036d6:	2101      	movs	r1, #1
 80036d8:	f24d 3016 	movw	r0, #54038	; 0xd316
 80036dc:	f000 fea6 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD317, 0xCA);
 80036e0:	21ca      	movs	r1, #202	; 0xca
 80036e2:	f24d 3017 	movw	r0, #54039	; 0xd317
 80036e6:	f000 fea1 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD318, 0x02);
 80036ea:	2102      	movs	r1, #2
 80036ec:	f24d 3018 	movw	r0, #54040	; 0xd318
 80036f0:	f000 fe9c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD319, 0x00);
 80036f4:	2100      	movs	r1, #0
 80036f6:	f24d 3019 	movw	r0, #54041	; 0xd319
 80036fa:	f000 fe97 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD31A, 0x02);
 80036fe:	2102      	movs	r1, #2
 8003700:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003704:	f000 fe92 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD31B, 0x01);
 8003708:	2101      	movs	r1, #1
 800370a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800370e:	f000 fe8d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD31C, 0x02);
 8003712:	2102      	movs	r1, #2
 8003714:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003718:	f000 fe88 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD31D, 0x34);
 800371c:	2134      	movs	r1, #52	; 0x34
 800371e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003722:	f000 fe83 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD31E, 0x02);
 8003726:	2102      	movs	r1, #2
 8003728:	f24d 301e 	movw	r0, #54046	; 0xd31e
 800372c:	f000 fe7e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD31F, 0x67);
 8003730:	2167      	movs	r1, #103	; 0x67
 8003732:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003736:	f000 fe79 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD320, 0x02);
 800373a:	2102      	movs	r1, #2
 800373c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003740:	f000 fe74 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD321, 0x84);
 8003744:	2184      	movs	r1, #132	; 0x84
 8003746:	f24d 3021 	movw	r0, #54049	; 0xd321
 800374a:	f000 fe6f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD322, 0x02);
 800374e:	2102      	movs	r1, #2
 8003750:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003754:	f000 fe6a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD323, 0xA4);
 8003758:	21a4      	movs	r1, #164	; 0xa4
 800375a:	f24d 3023 	movw	r0, #54051	; 0xd323
 800375e:	f000 fe65 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD324, 0x02);
 8003762:	2102      	movs	r1, #2
 8003764:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003768:	f000 fe60 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD325, 0xB7);
 800376c:	21b7      	movs	r1, #183	; 0xb7
 800376e:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003772:	f000 fe5b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD326, 0x02);
 8003776:	2102      	movs	r1, #2
 8003778:	f24d 3026 	movw	r0, #54054	; 0xd326
 800377c:	f000 fe56 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD327, 0xCF);
 8003780:	21cf      	movs	r1, #207	; 0xcf
 8003782:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003786:	f000 fe51 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD328, 0x02);
 800378a:	2102      	movs	r1, #2
 800378c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003790:	f000 fe4c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD329, 0xDE);
 8003794:	21de      	movs	r1, #222	; 0xde
 8003796:	f24d 3029 	movw	r0, #54057	; 0xd329
 800379a:	f000 fe47 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD32A, 0x02);
 800379e:	2102      	movs	r1, #2
 80037a0:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80037a4:	f000 fe42 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD32B, 0xF2);
 80037a8:	21f2      	movs	r1, #242	; 0xf2
 80037aa:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80037ae:	f000 fe3d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD32C, 0x02);
 80037b2:	2102      	movs	r1, #2
 80037b4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80037b8:	f000 fe38 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD32D, 0xFE);
 80037bc:	21fe      	movs	r1, #254	; 0xfe
 80037be:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80037c2:	f000 fe33 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD32E, 0x03);
 80037c6:	2103      	movs	r1, #3
 80037c8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80037cc:	f000 fe2e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD32F, 0x10);
 80037d0:	2110      	movs	r1, #16
 80037d2:	f24d 302f 	movw	r0, #54063	; 0xd32f
 80037d6:	f000 fe29 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD330, 0x03);
 80037da:	2103      	movs	r1, #3
 80037dc:	f24d 3030 	movw	r0, #54064	; 0xd330
 80037e0:	f000 fe24 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD331, 0x33);
 80037e4:	2133      	movs	r1, #51	; 0x33
 80037e6:	f24d 3031 	movw	r0, #54065	; 0xd331
 80037ea:	f000 fe1f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD332, 0x03);
 80037ee:	2103      	movs	r1, #3
 80037f0:	f24d 3032 	movw	r0, #54066	; 0xd332
 80037f4:	f000 fe1a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD333, 0x6D);
 80037f8:	216d      	movs	r1, #109	; 0x6d
 80037fa:	f24d 3033 	movw	r0, #54067	; 0xd333
 80037fe:	f000 fe15 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD400, 0x00);
 8003802:	2100      	movs	r1, #0
 8003804:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003808:	f000 fe10 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD401, 0x33);
 800380c:	2133      	movs	r1, #51	; 0x33
 800380e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003812:	f000 fe0b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD402, 0x00);
 8003816:	2100      	movs	r1, #0
 8003818:	f24d 4002 	movw	r0, #54274	; 0xd402
 800381c:	f000 fe06 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD403, 0x34);
 8003820:	2134      	movs	r1, #52	; 0x34
 8003822:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003826:	f000 fe01 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD404, 0x00);
 800382a:	2100      	movs	r1, #0
 800382c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003830:	f000 fdfc 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD405, 0x3A);
 8003834:	213a      	movs	r1, #58	; 0x3a
 8003836:	f24d 4005 	movw	r0, #54277	; 0xd405
 800383a:	f000 fdf7 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD406, 0x00);
 800383e:	2100      	movs	r1, #0
 8003840:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003844:	f000 fdf2 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD407, 0x4A);
 8003848:	214a      	movs	r1, #74	; 0x4a
 800384a:	f24d 4007 	movw	r0, #54279	; 0xd407
 800384e:	f000 fded 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD408, 0x00);
 8003852:	2100      	movs	r1, #0
 8003854:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003858:	f000 fde8 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD409, 0x5C);
 800385c:	215c      	movs	r1, #92	; 0x5c
 800385e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003862:	f000 fde3 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD40A, 0x00);
 8003866:	2100      	movs	r1, #0
 8003868:	f24d 400a 	movw	r0, #54282	; 0xd40a
 800386c:	f000 fdde 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD40B, 0x81);
 8003870:	2181      	movs	r1, #129	; 0x81
 8003872:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003876:	f000 fdd9 	bl	800442c <lcd_write_reg>

    lcd_write_reg(0xD40C, 0x00);
 800387a:	2100      	movs	r1, #0
 800387c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003880:	f000 fdd4 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD40D, 0xA6);
 8003884:	21a6      	movs	r1, #166	; 0xa6
 8003886:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800388a:	f000 fdcf 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD40E, 0x00);
 800388e:	2100      	movs	r1, #0
 8003890:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003894:	f000 fdca 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD40F, 0xE5);
 8003898:	21e5      	movs	r1, #229	; 0xe5
 800389a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 800389e:	f000 fdc5 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD410, 0x01);
 80038a2:	2101      	movs	r1, #1
 80038a4:	f24d 4010 	movw	r0, #54288	; 0xd410
 80038a8:	f000 fdc0 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD411, 0x13);
 80038ac:	2113      	movs	r1, #19
 80038ae:	f24d 4011 	movw	r0, #54289	; 0xd411
 80038b2:	f000 fdbb 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD412, 0x01);
 80038b6:	2101      	movs	r1, #1
 80038b8:	f24d 4012 	movw	r0, #54290	; 0xd412
 80038bc:	f000 fdb6 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD413, 0x54);
 80038c0:	2154      	movs	r1, #84	; 0x54
 80038c2:	f24d 4013 	movw	r0, #54291	; 0xd413
 80038c6:	f000 fdb1 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD414, 0x01);
 80038ca:	2101      	movs	r1, #1
 80038cc:	f24d 4014 	movw	r0, #54292	; 0xd414
 80038d0:	f000 fdac 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD415, 0x82);
 80038d4:	2182      	movs	r1, #130	; 0x82
 80038d6:	f24d 4015 	movw	r0, #54293	; 0xd415
 80038da:	f000 fda7 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD416, 0x01);
 80038de:	2101      	movs	r1, #1
 80038e0:	f24d 4016 	movw	r0, #54294	; 0xd416
 80038e4:	f000 fda2 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD417, 0xCA);
 80038e8:	21ca      	movs	r1, #202	; 0xca
 80038ea:	f24d 4017 	movw	r0, #54295	; 0xd417
 80038ee:	f000 fd9d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD418, 0x02);
 80038f2:	2102      	movs	r1, #2
 80038f4:	f24d 4018 	movw	r0, #54296	; 0xd418
 80038f8:	f000 fd98 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD419, 0x00);
 80038fc:	2100      	movs	r1, #0
 80038fe:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003902:	f000 fd93 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD41A, 0x02);
 8003906:	2102      	movs	r1, #2
 8003908:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800390c:	f000 fd8e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD41B, 0x01);
 8003910:	2101      	movs	r1, #1
 8003912:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003916:	f000 fd89 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD41C, 0x02);
 800391a:	2102      	movs	r1, #2
 800391c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003920:	f000 fd84 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD41D, 0x34);
 8003924:	2134      	movs	r1, #52	; 0x34
 8003926:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800392a:	f000 fd7f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD41E, 0x02);
 800392e:	2102      	movs	r1, #2
 8003930:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003934:	f000 fd7a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD41F, 0x67);
 8003938:	2167      	movs	r1, #103	; 0x67
 800393a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800393e:	f000 fd75 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD420, 0x02);
 8003942:	2102      	movs	r1, #2
 8003944:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003948:	f000 fd70 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD421, 0x84);
 800394c:	2184      	movs	r1, #132	; 0x84
 800394e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003952:	f000 fd6b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD422, 0x02);
 8003956:	2102      	movs	r1, #2
 8003958:	f24d 4022 	movw	r0, #54306	; 0xd422
 800395c:	f000 fd66 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD423, 0xA4);
 8003960:	21a4      	movs	r1, #164	; 0xa4
 8003962:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003966:	f000 fd61 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD424, 0x02);
 800396a:	2102      	movs	r1, #2
 800396c:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003970:	f000 fd5c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD425, 0xB7);
 8003974:	21b7      	movs	r1, #183	; 0xb7
 8003976:	f24d 4025 	movw	r0, #54309	; 0xd425
 800397a:	f000 fd57 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD426, 0x02);
 800397e:	2102      	movs	r1, #2
 8003980:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003984:	f000 fd52 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD427, 0xCF);
 8003988:	21cf      	movs	r1, #207	; 0xcf
 800398a:	f24d 4027 	movw	r0, #54311	; 0xd427
 800398e:	f000 fd4d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD428, 0x02);
 8003992:	2102      	movs	r1, #2
 8003994:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003998:	f000 fd48 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD429, 0xDE);
 800399c:	21de      	movs	r1, #222	; 0xde
 800399e:	f24d 4029 	movw	r0, #54313	; 0xd429
 80039a2:	f000 fd43 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD42A, 0x02);
 80039a6:	2102      	movs	r1, #2
 80039a8:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80039ac:	f000 fd3e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD42B, 0xF2);
 80039b0:	21f2      	movs	r1, #242	; 0xf2
 80039b2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80039b6:	f000 fd39 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD42C, 0x02);
 80039ba:	2102      	movs	r1, #2
 80039bc:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80039c0:	f000 fd34 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD42D, 0xFE);
 80039c4:	21fe      	movs	r1, #254	; 0xfe
 80039c6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80039ca:	f000 fd2f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD42E, 0x03);
 80039ce:	2103      	movs	r1, #3
 80039d0:	f24d 402e 	movw	r0, #54318	; 0xd42e
 80039d4:	f000 fd2a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD42F, 0x10);
 80039d8:	2110      	movs	r1, #16
 80039da:	f24d 402f 	movw	r0, #54319	; 0xd42f
 80039de:	f000 fd25 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD430, 0x03);
 80039e2:	2103      	movs	r1, #3
 80039e4:	f24d 4030 	movw	r0, #54320	; 0xd430
 80039e8:	f000 fd20 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD431, 0x33);
 80039ec:	2133      	movs	r1, #51	; 0x33
 80039ee:	f24d 4031 	movw	r0, #54321	; 0xd431
 80039f2:	f000 fd1b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD432, 0x03);
 80039f6:	2103      	movs	r1, #3
 80039f8:	f24d 4032 	movw	r0, #54322	; 0xd432
 80039fc:	f000 fd16 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD433, 0x6D);
 8003a00:	216d      	movs	r1, #109	; 0x6d
 8003a02:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003a06:	f000 fd11 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD500, 0x00);
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003a10:	f000 fd0c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD501, 0x33);
 8003a14:	2133      	movs	r1, #51	; 0x33
 8003a16:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003a1a:	f000 fd07 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD502, 0x00);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003a24:	f000 fd02 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD503, 0x34);
 8003a28:	2134      	movs	r1, #52	; 0x34
 8003a2a:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003a2e:	f000 fcfd 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD504, 0x00);
 8003a32:	2100      	movs	r1, #0
 8003a34:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003a38:	f000 fcf8 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD505, 0x3A);
 8003a3c:	213a      	movs	r1, #58	; 0x3a
 8003a3e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003a42:	f000 fcf3 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD506, 0x00);
 8003a46:	2100      	movs	r1, #0
 8003a48:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003a4c:	f000 fcee 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD507, 0x4A);
 8003a50:	214a      	movs	r1, #74	; 0x4a
 8003a52:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003a56:	f000 fce9 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD508, 0x00);
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003a60:	f000 fce4 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD509, 0x5C);
 8003a64:	215c      	movs	r1, #92	; 0x5c
 8003a66:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003a6a:	f000 fcdf 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD50A, 0x00);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003a74:	f000 fcda 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD50B, 0x81);
 8003a78:	2181      	movs	r1, #129	; 0x81
 8003a7a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003a7e:	f000 fcd5 	bl	800442c <lcd_write_reg>

    lcd_write_reg(0xD50C, 0x00);
 8003a82:	2100      	movs	r1, #0
 8003a84:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003a88:	f000 fcd0 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD50D, 0xA6);
 8003a8c:	21a6      	movs	r1, #166	; 0xa6
 8003a8e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003a92:	f000 fccb 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD50E, 0x00);
 8003a96:	2100      	movs	r1, #0
 8003a98:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003a9c:	f000 fcc6 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD50F, 0xE5);
 8003aa0:	21e5      	movs	r1, #229	; 0xe5
 8003aa2:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003aa6:	f000 fcc1 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD510, 0x01);
 8003aaa:	2101      	movs	r1, #1
 8003aac:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003ab0:	f000 fcbc 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD511, 0x13);
 8003ab4:	2113      	movs	r1, #19
 8003ab6:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003aba:	f000 fcb7 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD512, 0x01);
 8003abe:	2101      	movs	r1, #1
 8003ac0:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003ac4:	f000 fcb2 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD513, 0x54);
 8003ac8:	2154      	movs	r1, #84	; 0x54
 8003aca:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003ace:	f000 fcad 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD514, 0x01);
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003ad8:	f000 fca8 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD515, 0x82);
 8003adc:	2182      	movs	r1, #130	; 0x82
 8003ade:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003ae2:	f000 fca3 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD516, 0x01);
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003aec:	f000 fc9e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD517, 0xCA);
 8003af0:	21ca      	movs	r1, #202	; 0xca
 8003af2:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003af6:	f000 fc99 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD518, 0x02);
 8003afa:	2102      	movs	r1, #2
 8003afc:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003b00:	f000 fc94 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD519, 0x00);
 8003b04:	2100      	movs	r1, #0
 8003b06:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003b0a:	f000 fc8f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD51A, 0x02);
 8003b0e:	2102      	movs	r1, #2
 8003b10:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003b14:	f000 fc8a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD51B, 0x01);
 8003b18:	2101      	movs	r1, #1
 8003b1a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003b1e:	f000 fc85 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD51C, 0x02);
 8003b22:	2102      	movs	r1, #2
 8003b24:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003b28:	f000 fc80 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD51D, 0x34);
 8003b2c:	2134      	movs	r1, #52	; 0x34
 8003b2e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003b32:	f000 fc7b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD51E, 0x02);
 8003b36:	2102      	movs	r1, #2
 8003b38:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003b3c:	f000 fc76 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD51F, 0x67);
 8003b40:	2167      	movs	r1, #103	; 0x67
 8003b42:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003b46:	f000 fc71 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD520, 0x02);
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003b50:	f000 fc6c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD521, 0x84);
 8003b54:	2184      	movs	r1, #132	; 0x84
 8003b56:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003b5a:	f000 fc67 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD522, 0x02);
 8003b5e:	2102      	movs	r1, #2
 8003b60:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003b64:	f000 fc62 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD523, 0xA4);
 8003b68:	21a4      	movs	r1, #164	; 0xa4
 8003b6a:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003b6e:	f000 fc5d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD524, 0x02);
 8003b72:	2102      	movs	r1, #2
 8003b74:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003b78:	f000 fc58 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD525, 0xB7);
 8003b7c:	21b7      	movs	r1, #183	; 0xb7
 8003b7e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003b82:	f000 fc53 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD526, 0x02);
 8003b86:	2102      	movs	r1, #2
 8003b88:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003b8c:	f000 fc4e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD527, 0xCF);
 8003b90:	21cf      	movs	r1, #207	; 0xcf
 8003b92:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003b96:	f000 fc49 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD528, 0x02);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003ba0:	f000 fc44 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD529, 0xDE);
 8003ba4:	21de      	movs	r1, #222	; 0xde
 8003ba6:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003baa:	f000 fc3f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD52A, 0x02);
 8003bae:	2102      	movs	r1, #2
 8003bb0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003bb4:	f000 fc3a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD52B, 0xF2);
 8003bb8:	21f2      	movs	r1, #242	; 0xf2
 8003bba:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003bbe:	f000 fc35 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD52C, 0x02);
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003bc8:	f000 fc30 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD52D, 0xFE);
 8003bcc:	21fe      	movs	r1, #254	; 0xfe
 8003bce:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003bd2:	f000 fc2b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD52E, 0x03);
 8003bd6:	2103      	movs	r1, #3
 8003bd8:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003bdc:	f000 fc26 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD52F, 0x10);
 8003be0:	2110      	movs	r1, #16
 8003be2:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003be6:	f000 fc21 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD530, 0x03);
 8003bea:	2103      	movs	r1, #3
 8003bec:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003bf0:	f000 fc1c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD531, 0x33);
 8003bf4:	2133      	movs	r1, #51	; 0x33
 8003bf6:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003bfa:	f000 fc17 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD532, 0x03);
 8003bfe:	2103      	movs	r1, #3
 8003c00:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003c04:	f000 fc12 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD533, 0x6D);
 8003c08:	216d      	movs	r1, #109	; 0x6d
 8003c0a:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003c0e:	f000 fc0d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD600, 0x00);
 8003c12:	2100      	movs	r1, #0
 8003c14:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003c18:	f000 fc08 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD601, 0x33);
 8003c1c:	2133      	movs	r1, #51	; 0x33
 8003c1e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003c22:	f000 fc03 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD602, 0x00);
 8003c26:	2100      	movs	r1, #0
 8003c28:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003c2c:	f000 fbfe 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD603, 0x34);
 8003c30:	2134      	movs	r1, #52	; 0x34
 8003c32:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003c36:	f000 fbf9 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD604, 0x00);
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003c40:	f000 fbf4 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD605, 0x3A);
 8003c44:	213a      	movs	r1, #58	; 0x3a
 8003c46:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003c4a:	f000 fbef 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD606, 0x00);
 8003c4e:	2100      	movs	r1, #0
 8003c50:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003c54:	f000 fbea 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD607, 0x4A);
 8003c58:	214a      	movs	r1, #74	; 0x4a
 8003c5a:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003c5e:	f000 fbe5 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD608, 0x00);
 8003c62:	2100      	movs	r1, #0
 8003c64:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003c68:	f000 fbe0 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD609, 0x5C);
 8003c6c:	215c      	movs	r1, #92	; 0x5c
 8003c6e:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003c72:	f000 fbdb 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD60A, 0x00);
 8003c76:	2100      	movs	r1, #0
 8003c78:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003c7c:	f000 fbd6 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD60B, 0x81);
 8003c80:	2181      	movs	r1, #129	; 0x81
 8003c82:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003c86:	f000 fbd1 	bl	800442c <lcd_write_reg>

    lcd_write_reg(0xD60C, 0x00);
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003c90:	f000 fbcc 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD60D, 0xA6);
 8003c94:	21a6      	movs	r1, #166	; 0xa6
 8003c96:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003c9a:	f000 fbc7 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD60E, 0x00);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003ca4:	f000 fbc2 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD60F, 0xE5);
 8003ca8:	21e5      	movs	r1, #229	; 0xe5
 8003caa:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003cae:	f000 fbbd 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD610, 0x01);
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003cb8:	f000 fbb8 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD611, 0x13);
 8003cbc:	2113      	movs	r1, #19
 8003cbe:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003cc2:	f000 fbb3 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD612, 0x01);
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003ccc:	f000 fbae 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD613, 0x54);
 8003cd0:	2154      	movs	r1, #84	; 0x54
 8003cd2:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003cd6:	f000 fba9 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD614, 0x01);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003ce0:	f000 fba4 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD615, 0x82);
 8003ce4:	2182      	movs	r1, #130	; 0x82
 8003ce6:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003cea:	f000 fb9f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD616, 0x01);
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003cf4:	f000 fb9a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD617, 0xCA);
 8003cf8:	21ca      	movs	r1, #202	; 0xca
 8003cfa:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003cfe:	f000 fb95 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD618, 0x02);
 8003d02:	2102      	movs	r1, #2
 8003d04:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003d08:	f000 fb90 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD619, 0x00);
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003d12:	f000 fb8b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD61A, 0x02);
 8003d16:	2102      	movs	r1, #2
 8003d18:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003d1c:	f000 fb86 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD61B, 0x01);
 8003d20:	2101      	movs	r1, #1
 8003d22:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003d26:	f000 fb81 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD61C, 0x02);
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003d30:	f000 fb7c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD61D, 0x34);
 8003d34:	2134      	movs	r1, #52	; 0x34
 8003d36:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003d3a:	f000 fb77 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD61E, 0x02);
 8003d3e:	2102      	movs	r1, #2
 8003d40:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003d44:	f000 fb72 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD61F, 0x67);
 8003d48:	2167      	movs	r1, #103	; 0x67
 8003d4a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003d4e:	f000 fb6d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD620, 0x02);
 8003d52:	2102      	movs	r1, #2
 8003d54:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003d58:	f000 fb68 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD621, 0x84);
 8003d5c:	2184      	movs	r1, #132	; 0x84
 8003d5e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003d62:	f000 fb63 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD622, 0x02);
 8003d66:	2102      	movs	r1, #2
 8003d68:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003d6c:	f000 fb5e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD623, 0xA4);
 8003d70:	21a4      	movs	r1, #164	; 0xa4
 8003d72:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003d76:	f000 fb59 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD624, 0x02);
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003d80:	f000 fb54 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD625, 0xB7);
 8003d84:	21b7      	movs	r1, #183	; 0xb7
 8003d86:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003d8a:	f000 fb4f 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD626, 0x02);
 8003d8e:	2102      	movs	r1, #2
 8003d90:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003d94:	f000 fb4a 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD627, 0xCF);
 8003d98:	21cf      	movs	r1, #207	; 0xcf
 8003d9a:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003d9e:	f000 fb45 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD628, 0x02);
 8003da2:	2102      	movs	r1, #2
 8003da4:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003da8:	f000 fb40 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD629, 0xDE);
 8003dac:	21de      	movs	r1, #222	; 0xde
 8003dae:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003db2:	f000 fb3b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD62A, 0x02);
 8003db6:	2102      	movs	r1, #2
 8003db8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003dbc:	f000 fb36 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD62B, 0xF2);
 8003dc0:	21f2      	movs	r1, #242	; 0xf2
 8003dc2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003dc6:	f000 fb31 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD62C, 0x02);
 8003dca:	2102      	movs	r1, #2
 8003dcc:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003dd0:	f000 fb2c 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD62D, 0xFE);
 8003dd4:	21fe      	movs	r1, #254	; 0xfe
 8003dd6:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003dda:	f000 fb27 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD62E, 0x03);
 8003dde:	2103      	movs	r1, #3
 8003de0:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003de4:	f000 fb22 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD62F, 0x10);
 8003de8:	2110      	movs	r1, #16
 8003dea:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003dee:	f000 fb1d 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD630, 0x03);
 8003df2:	2103      	movs	r1, #3
 8003df4:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003df8:	f000 fb18 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD631, 0x33);
 8003dfc:	2133      	movs	r1, #51	; 0x33
 8003dfe:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003e02:	f000 fb13 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD632, 0x03);
 8003e06:	2103      	movs	r1, #3
 8003e08:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003e0c:	f000 fb0e 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xD633, 0x6D);
 8003e10:	216d      	movs	r1, #109	; 0x6d
 8003e12:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003e16:	f000 fb09 	bl	800442c <lcd_write_reg>
    /* LV2 Page 0 enable */
    lcd_write_reg(0xF000, 0x55);
 8003e1a:	2155      	movs	r1, #85	; 0x55
 8003e1c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003e20:	f000 fb04 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8003e24:	21aa      	movs	r1, #170	; 0xaa
 8003e26:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003e2a:	f000 faff 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8003e2e:	2152      	movs	r1, #82	; 0x52
 8003e30:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003e34:	f000 fafa 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8003e38:	2108      	movs	r1, #8
 8003e3a:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003e3e:	f000 faf5 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xF004, 0x00);
 8003e42:	2100      	movs	r1, #0
 8003e44:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003e48:	f000 faf0 	bl	800442c <lcd_write_reg>
    /* Display control */
    lcd_write_reg(0xB100, 0xCC);
 8003e4c:	21cc      	movs	r1, #204	; 0xcc
 8003e4e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003e52:	f000 faeb 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB101, 0x00);
 8003e56:	2100      	movs	r1, #0
 8003e58:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003e5c:	f000 fae6 	bl	800442c <lcd_write_reg>
    /* Source hold time */
    lcd_write_reg(0xB600, 0x05);
 8003e60:	2105      	movs	r1, #5
 8003e62:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003e66:	f000 fae1 	bl	800442c <lcd_write_reg>
    /* Gate EQ control */
    lcd_write_reg(0xB700, 0x70);
 8003e6a:	2170      	movs	r1, #112	; 0x70
 8003e6c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003e70:	f000 fadc 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB701, 0x70);
 8003e74:	2170      	movs	r1, #112	; 0x70
 8003e76:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003e7a:	f000 fad7 	bl	800442c <lcd_write_reg>
    /* Source EQ control (Mode 2) */
    lcd_write_reg(0xB800, 0x01);
 8003e7e:	2101      	movs	r1, #1
 8003e80:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003e84:	f000 fad2 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB801, 0x03);
 8003e88:	2103      	movs	r1, #3
 8003e8a:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003e8e:	f000 facd 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB802, 0x03);
 8003e92:	2103      	movs	r1, #3
 8003e94:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003e98:	f000 fac8 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xB803, 0x03);
 8003e9c:	2103      	movs	r1, #3
 8003e9e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003ea2:	f000 fac3 	bl	800442c <lcd_write_reg>
    /* Inversion mode (2-dot) */
    lcd_write_reg(0xBC00, 0x02);
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003eac:	f000 fabe 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x00);
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003eb6:	f000 fab9 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003ec0:	f000 fab4 	bl	800442c <lcd_write_reg>
    /* Timing control 4H w/ 4-delay */
    lcd_write_reg(0xC900, 0xD0);
 8003ec4:	21d0      	movs	r1, #208	; 0xd0
 8003ec6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003eca:	f000 faaf 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xC901, 0x02);
 8003ece:	2102      	movs	r1, #2
 8003ed0:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003ed4:	f000 faaa 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xC902, 0x50);
 8003ed8:	2150      	movs	r1, #80	; 0x50
 8003eda:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003ede:	f000 faa5 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xC903, 0x50);
 8003ee2:	2150      	movs	r1, #80	; 0x50
 8003ee4:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003ee8:	f000 faa0 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0xC904, 0x50);
 8003eec:	2150      	movs	r1, #80	; 0x50
 8003eee:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003ef2:	f000 fa9b 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0x3500, 0x00);
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003efc:	f000 fa96 	bl	800442c <lcd_write_reg>
    lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8003f00:	2155      	movs	r1, #85	; 0x55
 8003f02:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003f06:	f000 fa91 	bl	800442c <lcd_write_reg>
    lcd_wr_regno(0x1100);
 8003f0a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003f0e:	f000 fa79 	bl	8004404 <lcd_wr_regno>
    HAL_Delay(12);
 8003f12:	200c      	movs	r0, #12
 8003f14:	f001 fe70 	bl	8005bf8 <HAL_Delay>
    lcd_wr_regno(0x2900);
 8003f18:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003f1c:	f000 fa72 	bl	8004404 <lcd_wr_regno>
}
 8003f20:	bf00      	nop
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <lcd_ex_ili9806_reginit>:
 * @brief  ILI9806 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ili9806_reginit(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
 8003f28:	20ff      	movs	r0, #255	; 0xff
 8003f2a:	f000 fa6b 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8003f2e:	20ff      	movs	r0, #255	; 0xff
 8003f30:	f000 fa54 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x98);
 8003f34:	2098      	movs	r0, #152	; 0x98
 8003f36:	f000 fa51 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x06);
 8003f3a:	2006      	movs	r0, #6
 8003f3c:	f000 fa4e 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xBC); /* GIP 1 */
 8003f40:	20bc      	movs	r0, #188	; 0xbc
 8003f42:	f000 fa5f 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8003f46:	2001      	movs	r0, #1
 8003f48:	f000 fa48 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0F);
 8003f4c:	200f      	movs	r0, #15
 8003f4e:	f000 fa45 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x61);
 8003f52:	2061      	movs	r0, #97	; 0x61
 8003f54:	f000 fa42 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003f58:	20ff      	movs	r0, #255	; 0xff
 8003f5a:	f000 fa3f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8003f5e:	2001      	movs	r0, #1
 8003f60:	f000 fa3c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8003f64:	2001      	movs	r0, #1
 8003f66:	f000 fa39 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0B);
 8003f6a:	200b      	movs	r0, #11
 8003f6c:	f000 fa36 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x10);
 8003f70:	2010      	movs	r0, #16
 8003f72:	f000 fa33 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x37);
 8003f76:	2037      	movs	r0, #55	; 0x37
 8003f78:	f000 fa30 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x63);
 8003f7c:	2063      	movs	r0, #99	; 0x63
 8003f7e:	f000 fa2d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003f82:	20ff      	movs	r0, #255	; 0xff
 8003f84:	f000 fa2a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003f88:	20ff      	movs	r0, #255	; 0xff
 8003f8a:	f000 fa27 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8003f8e:	2001      	movs	r0, #1
 8003f90:	f000 fa24 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8003f94:	2001      	movs	r0, #1
 8003f96:	f000 fa21 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	f000 fa1e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f000 fa1b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003fa6:	20ff      	movs	r0, #255	; 0xff
 8003fa8:	f000 fa18 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x52);
 8003fac:	2052      	movs	r0, #82	; 0x52
 8003fae:	f000 fa15 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	f000 fa12 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8003fb8:	2000      	movs	r0, #0
 8003fba:	f000 fa0f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x40);
 8003fbe:	2040      	movs	r0, #64	; 0x40
 8003fc0:	f000 fa0c 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xBD); /* GIP 2 */
 8003fc4:	20bd      	movs	r0, #189	; 0xbd
 8003fc6:	f000 fa1d 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f000 fa06 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x23);
 8003fd0:	2023      	movs	r0, #35	; 0x23
 8003fd2:	f000 fa03 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x45);
 8003fd6:	2045      	movs	r0, #69	; 0x45
 8003fd8:	f000 fa00 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x67);
 8003fdc:	2067      	movs	r0, #103	; 0x67
 8003fde:	f000 f9fd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	f000 f9fa 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x23);
 8003fe8:	2023      	movs	r0, #35	; 0x23
 8003fea:	f000 f9f7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x45);
 8003fee:	2045      	movs	r0, #69	; 0x45
 8003ff0:	f000 f9f4 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x67);
 8003ff4:	2067      	movs	r0, #103	; 0x67
 8003ff6:	f000 f9f1 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xBE); /* GIP 3 */
 8003ffa:	20be      	movs	r0, #190	; 0xbe
 8003ffc:	f000 fa02 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004000:	2000      	movs	r0, #0
 8004002:	f000 f9eb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8004006:	2001      	movs	r0, #1
 8004008:	f000 f9e8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xAB);
 800400c:	20ab      	movs	r0, #171	; 0xab
 800400e:	f000 f9e5 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x60);
 8004012:	2060      	movs	r0, #96	; 0x60
 8004014:	f000 f9e2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x22);
 8004018:	2022      	movs	r0, #34	; 0x22
 800401a:	f000 f9df 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x22);
 800401e:	2022      	movs	r0, #34	; 0x22
 8004020:	f000 f9dc 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x22);
 8004024:	2022      	movs	r0, #34	; 0x22
 8004026:	f000 f9d9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x22);
 800402a:	2022      	movs	r0, #34	; 0x22
 800402c:	f000 f9d6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x22);
 8004030:	2022      	movs	r0, #34	; 0x22
 8004032:	f000 f9d3 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xC7); /* VCOM Control */
 8004036:	20c7      	movs	r0, #199	; 0xc7
 8004038:	f000 f9e4 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x36);
 800403c:	2036      	movs	r0, #54	; 0x36
 800403e:	f000 f9cd 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
 8004042:	20ed      	movs	r0, #237	; 0xed
 8004044:	f000 f9de 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x7F);
 8004048:	207f      	movs	r0, #127	; 0x7f
 800404a:	f000 f9c7 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0F);
 800404e:	200f      	movs	r0, #15
 8004050:	f000 f9c4 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
 8004054:	20c0      	movs	r0, #192	; 0xc0
 8004056:	f000 f9d5 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 800405a:	200f      	movs	r0, #15
 800405c:	f000 f9be 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0B);
 8004060:	200b      	movs	r0, #11
 8004062:	f000 f9bb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0A);  /* VGH 15V,VGLO-10V */
 8004066:	200a      	movs	r0, #10
 8004068:	f000 f9b8 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
 800406c:	20fc      	movs	r0, #252	; 0xfc
 800406e:	f000 f9c9 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x08);
 8004072:	2008      	movs	r0, #8
 8004074:	f000 f9b2 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0XDF);
 8004078:	20df      	movs	r0, #223	; 0xdf
 800407a:	f000 f9c3 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800407e:	2000      	movs	r0, #0
 8004080:	f000 f9ac 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8004084:	2000      	movs	r0, #0
 8004086:	f000 f9a9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800408a:	2000      	movs	r0, #0
 800408c:	f000 f9a6 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8004090:	2000      	movs	r0, #0
 8004092:	f000 f9a3 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8004096:	2000      	movs	r0, #0
 8004098:	f000 f9a0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x20);
 800409c:	2020      	movs	r0, #32
 800409e:	f000 f99d 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
 80040a2:	20f3      	movs	r0, #243	; 0xf3
 80040a4:	f000 f9ae 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x74);
 80040a8:	2074      	movs	r0, #116	; 0x74
 80040aa:	f000 f997 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Inversion Type */
 80040ae:	20b4      	movs	r0, #180	; 0xb4
 80040b0:	f000 f9a8 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02 */
 80040b4:	2000      	movs	r0, #0
 80040b6:	f000 f991 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 80040ba:	2000      	movs	r0, #0
 80040bc:	f000 f98e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 80040c0:	2000      	movs	r0, #0
 80040c2:	f000 f98b 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xF7); /* Resolution Control */
 80040c6:	20f7      	movs	r0, #247	; 0xf7
 80040c8:	f000 f99c 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x82);  /* 480*800 */
 80040cc:	2082      	movs	r0, #130	; 0x82
 80040ce:	f000 f985 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB1); /* FRAME RATE Setting */
 80040d2:	20b1      	movs	r0, #177	; 0xb1
 80040d4:	f000 f996 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80040d8:	2000      	movs	r0, #0
 80040da:	f000 f97f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x13);
 80040de:	2013      	movs	r0, #19
 80040e0:	f000 f97c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x13);
 80040e4:	2013      	movs	r0, #19
 80040e6:	f000 f979 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
 80040ea:	20f2      	movs	r0, #242	; 0xf2
 80040ec:	f000 f98a 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x80);
 80040f0:	2080      	movs	r0, #128	; 0x80
 80040f2:	f000 f973 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x04);
 80040f6:	2004      	movs	r0, #4
 80040f8:	f000 f970 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x40);
 80040fc:	2040      	movs	r0, #64	; 0x40
 80040fe:	f000 f96d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x28);
 8004102:	2028      	movs	r0, #40	; 0x28
 8004104:	f000 f96a 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
 8004108:	20c1      	movs	r0, #193	; 0xc1
 800410a:	f000 f97b 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x17);
 800410e:	2017      	movs	r0, #23
 8004110:	f000 f964 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMP */
 8004114:	2088      	movs	r0, #136	; 0x88
 8004116:	f000 f961 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMN */
 800411a:	2088      	movs	r0, #136	; 0x88
 800411c:	f000 f95e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x20);
 8004120:	2020      	movs	r0, #32
 8004122:	f000 f95b 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Positive Gamma Control */
 8004126:	20e0      	movs	r0, #224	; 0xe0
 8004128:	f000 f96c 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 800412c:	2000      	movs	r0, #0
 800412e:	f000 f955 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P2 */
 8004132:	200a      	movs	r0, #10
 8004134:	f000 f952 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x12);  /* P3 */
 8004138:	2012      	movs	r0, #18
 800413a:	f000 f94f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x10);  /* P4 */
 800413e:	2010      	movs	r0, #16
 8004140:	f000 f94c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 8004144:	200e      	movs	r0, #14
 8004146:	f000 f949 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x20);  /* P6 */
 800414a:	2020      	movs	r0, #32
 800414c:	f000 f946 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xCC);  /* P7 */
 8004150:	20cc      	movs	r0, #204	; 0xcc
 8004152:	f000 f943 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x07);  /* P8 */
 8004156:	2007      	movs	r0, #7
 8004158:	f000 f940 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 800415c:	2006      	movs	r0, #6
 800415e:	f000 f93d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P10 */
 8004162:	200b      	movs	r0, #11
 8004164:	f000 f93a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P11 */
 8004168:	200e      	movs	r0, #14
 800416a:	f000 f937 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P12 */
 800416e:	200f      	movs	r0, #15
 8004170:	f000 f934 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P13 */
 8004174:	200d      	movs	r0, #13
 8004176:	f000 f931 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 800417a:	2015      	movs	r0, #21
 800417c:	f000 f92e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x10);  /* P15 */
 8004180:	2010      	movs	r0, #16
 8004182:	f000 f92b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 8004186:	2000      	movs	r0, #0
 8004188:	f000 f928 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xE1); /* Negative Gamma Correction */
 800418c:	20e1      	movs	r0, #225	; 0xe1
 800418e:	f000 f939 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 8004192:	2000      	movs	r0, #0
 8004194:	f000 f922 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P2 */
 8004198:	200b      	movs	r0, #11
 800419a:	f000 f91f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x13);  /* P3 */
 800419e:	2013      	movs	r0, #19
 80041a0:	f000 f91c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P4 */
 80041a4:	200d      	movs	r0, #13
 80041a6:	f000 f919 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 80041aa:	200e      	movs	r0, #14
 80041ac:	f000 f916 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x1B);  /* P6 */
 80041b0:	201b      	movs	r0, #27
 80041b2:	f000 f913 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x71);  /* P7 */
 80041b6:	2071      	movs	r0, #113	; 0x71
 80041b8:	f000 f910 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x06);  /* P8 */
 80041bc:	2006      	movs	r0, #6
 80041be:	f000 f90d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 80041c2:	2006      	movs	r0, #6
 80041c4:	f000 f90a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P10 */
 80041c8:	200a      	movs	r0, #10
 80041ca:	f000 f907 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P11 */
 80041ce:	200f      	movs	r0, #15
 80041d0:	f000 f904 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P12 */
 80041d4:	200e      	movs	r0, #14
 80041d6:	f000 f901 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P13 */
 80041da:	200f      	movs	r0, #15
 80041dc:	f000 f8fe 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 80041e0:	2015      	movs	r0, #21
 80041e2:	f000 f8fb 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x0C);  /* P15 */
 80041e6:	200c      	movs	r0, #12
 80041e8:	f000 f8f8 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 80041ec:	2000      	movs	r0, #0
 80041ee:	f000 f8f5 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x2a);
 80041f2:	202a      	movs	r0, #42	; 0x2a
 80041f4:	f000 f906 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80041f8:	2000      	movs	r0, #0
 80041fa:	f000 f8ef 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 80041fe:	2000      	movs	r0, #0
 8004200:	f000 f8ec 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);
 8004204:	2001      	movs	r0, #1
 8004206:	f000 f8e9 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xdf);
 800420a:	20df      	movs	r0, #223	; 0xdf
 800420c:	f000 f8e6 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x2b);
 8004210:	202b      	movs	r0, #43	; 0x2b
 8004212:	f000 f8f7 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004216:	2000      	movs	r0, #0
 8004218:	f000 f8e0 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800421c:	2000      	movs	r0, #0
 800421e:	f000 f8dd 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x03);
 8004222:	2003      	movs	r0, #3
 8004224:	f000 f8da 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x1f);
 8004228:	201f      	movs	r0, #31
 800422a:	f000 f8d7 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x3A); /* Pixel Format */
 800422e:	203a      	movs	r0, #58	; 0x3a
 8004230:	f000 f8e8 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8004234:	2055      	movs	r0, #85	; 0x55
 8004236:	f000 f8d1 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x36); /* Memory Access Control */
 800423a:	2036      	movs	r0, #54	; 0x36
 800423c:	f000 f8e2 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02-180 */
 8004240:	2000      	movs	r0, #0
 8004242:	f000 f8cb 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x11);
 8004246:	2011      	movs	r0, #17
 8004248:	f000 f8dc 	bl	8004404 <lcd_wr_regno>
    HAL_Delay(120);
 800424c:	2078      	movs	r0, #120	; 0x78
 800424e:	f001 fcd3 	bl	8005bf8 <HAL_Delay>
    lcd_wr_regno(0x29);
 8004252:	2029      	movs	r0, #41	; 0x29
 8004254:	f000 f8d6 	bl	8004404 <lcd_wr_regno>
    HAL_Delay(20);
 8004258:	2014      	movs	r0, #20
 800425a:	f001 fccd 	bl	8005bf8 <HAL_Delay>
    lcd_wr_regno(0x2C);
 800425e:	202c      	movs	r0, #44	; 0x2c
 8004260:	f000 f8d0 	bl	8004404 <lcd_wr_regno>
}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}

08004268 <lcd_ex_ssd1963_reginit>:
 * @brief  SSD1963 register initialization code
 * @param  None
 * @retval None
 */
void lcd_ex_ssd1963_reginit(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
 800426c:	20e2      	movs	r0, #226	; 0xe2
 800426e:	f000 f8c9 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x1D);  /* parameter 1 */
 8004272:	201d      	movs	r0, #29
 8004274:	f000 f8b2 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x02);  /* parameter 2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 8004278:	2002      	movs	r0, #2
 800427a:	f000 f8af 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x04);  /* parameter 3 Validate M and N values */
 800427e:	2004      	movs	r0, #4
 8004280:	f000 f8ac 	bl	80043dc <lcd_wr_data>
    HAL_Delay(1);
 8004284:	2001      	movs	r0, #1
 8004286:	f001 fcb7 	bl	8005bf8 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command */
 800428a:	20e0      	movs	r0, #224	; 0xe0
 800428c:	f000 f8ba 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x01);  /*  enable PLL */
 8004290:	2001      	movs	r0, #1
 8004292:	f000 f8a3 	bl	80043dc <lcd_wr_data>
    HAL_Delay(10);
 8004296:	200a      	movs	r0, #10
 8004298:	f001 fcae 	bl	8005bf8 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command again */
 800429c:	20e0      	movs	r0, #224	; 0xe0
 800429e:	f000 f8b1 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x03);  /*  now, use PLL output as system clock */
 80042a2:	2003      	movs	r0, #3
 80042a4:	f000 f89a 	bl	80043dc <lcd_wr_data>
    HAL_Delay(12);
 80042a8:	200c      	movs	r0, #12
 80042aa:	f001 fca5 	bl	8005bf8 <HAL_Delay>
    lcd_wr_regno(0x01); /* soft reset */
 80042ae:	2001      	movs	r0, #1
 80042b0:	f000 f8a8 	bl	8004404 <lcd_wr_regno>
    HAL_Delay(10);
 80042b4:	200a      	movs	r0, #10
 80042b6:	f001 fc9f 	bl	8005bf8 <HAL_Delay>

    lcd_wr_regno(0xE6); /* Set the pixel frequency,33Mhz */
 80042ba:	20e6      	movs	r0, #230	; 0xe6
 80042bc:	f000 f8a2 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x2F);
 80042c0:	202f      	movs	r0, #47	; 0x2f
 80042c2:	f000 f88b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xFF);
 80042c6:	20ff      	movs	r0, #255	; 0xff
 80042c8:	f000 f888 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xFF);
 80042cc:	20ff      	movs	r0, #255	; 0xff
 80042ce:	f000 f885 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB0); /* Setting LCD mode */
 80042d2:	20b0      	movs	r0, #176	; 0xb0
 80042d4:	f000 f896 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 24 bit mode */
 80042d8:	2020      	movs	r0, #32
 80042da:	f000 f87f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);  /* TFT pattern */
 80042de:	2000      	movs	r0, #0
 80042e0:	f000 f87c 	bl	80043dc <lcd_wr_data>

    lcd_wr_data((SSD_HOR_RESOLUTION - 1) >> 8); /* Set the LCD horizontal pixels */
 80042e4:	2003      	movs	r0, #3
 80042e6:	f000 f879 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(SSD_HOR_RESOLUTION - 1);
 80042ea:	f240 301f 	movw	r0, #799	; 0x31f
 80042ee:	f000 f875 	bl	80043dc <lcd_wr_data>
    lcd_wr_data((SSD_VER_RESOLUTION - 1) >> 8); /* Set the LCD vertical pixels */
 80042f2:	2001      	movs	r0, #1
 80042f4:	f000 f872 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(SSD_VER_RESOLUTION - 1);
 80042f8:	f240 10df 	movw	r0, #479	; 0x1df
 80042fc:	f000 f86e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);  /* RGB sequence */
 8004300:	2000      	movs	r0, #0
 8004302:	f000 f86b 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Set horizontal period */
 8004306:	20b4      	movs	r0, #180	; 0xb4
 8004308:	f000 f87c 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data((SSD_HT - 1) >> 8);
 800430c:	2004      	movs	r0, #4
 800430e:	f000 f865 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(SSD_HT - 1);
 8004312:	f240 401f 	movw	r0, #1055	; 0x41f
 8004316:	f000 f861 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(SSD_HPS >> 8);
 800431a:	2000      	movs	r0, #0
 800431c:	f000 f85e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(SSD_HPS);
 8004320:	202e      	movs	r0, #46	; 0x2e
 8004322:	f000 f85b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(SSD_HOR_PULSE_WIDTH - 1);
 8004326:	2000      	movs	r0, #0
 8004328:	f000 f858 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800432c:	2000      	movs	r0, #0
 800432e:	f000 f855 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8004332:	2000      	movs	r0, #0
 8004334:	f000 f852 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8004338:	2000      	movs	r0, #0
 800433a:	f000 f84f 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Set vertical perio */
 800433e:	20b6      	movs	r0, #182	; 0xb6
 8004340:	f000 f860 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data((SSD_VT - 1) >> 8);
 8004344:	2002      	movs	r0, #2
 8004346:	f000 f849 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(SSD_VT - 1);
 800434a:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800434e:	f000 f845 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(SSD_VPS >> 8);
 8004352:	2000      	movs	r0, #0
 8004354:	f000 f842 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(SSD_VPS);
 8004358:	2017      	movs	r0, #23
 800435a:	f000 f83f 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(SSD_VER_FRONT_PORCH - 1);
 800435e:	2015      	movs	r0, #21
 8004360:	f000 f83c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 8004364:	2000      	movs	r0, #0
 8004366:	f000 f839 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);
 800436a:	2000      	movs	r0, #0
 800436c:	f000 f836 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xF0); /* Set the interface between SSD1963 and CPU to 16bit */
 8004370:	20f0      	movs	r0, #240	; 0xf0
 8004372:	f000 f847 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 16-bit(565 format) data for 16bpp */
 8004376:	2003      	movs	r0, #3
 8004378:	f000 f830 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0x29); /* Enable display */
 800437c:	2029      	movs	r0, #41	; 0x29
 800437e:	f000 f841 	bl	8004404 <lcd_wr_regno>
    /* Setting the PWM output backlight is adjustable through the duty cycle */
    lcd_wr_regno(0xD0); /* Set the automatic white balance DBC */
 8004382:	20d0      	movs	r0, #208	; 0xd0
 8004384:	f000 f83e 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* disable */
 8004388:	2000      	movs	r0, #0
 800438a:	f000 f827 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xBE); /* Configure PWM output */
 800438e:	20be      	movs	r0, #190	; 0xbe
 8004390:	f000 f838 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x05);  /* 1 Set the PWM frequency */
 8004394:	2005      	movs	r0, #5
 8004396:	f000 f821 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xFE);  /* 2 Set the PWM duty cycle */
 800439a:	20fe      	movs	r0, #254	; 0xfe
 800439c:	f000 f81e 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);  /* 3 set C */
 80043a0:	2001      	movs	r0, #1
 80043a2:	f000 f81b 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);  /* 4 set D */
 80043a6:	2000      	movs	r0, #0
 80043a8:	f000 f818 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);  /* 5 set E */
 80043ac:	2000      	movs	r0, #0
 80043ae:	f000 f815 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);  /* 6 set F */
 80043b2:	2000      	movs	r0, #0
 80043b4:	f000 f812 	bl	80043dc <lcd_wr_data>

    lcd_wr_regno(0xB8); /* Set the GPIO configuration */
 80043b8:	20b8      	movs	r0, #184	; 0xb8
 80043ba:	f000 f823 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* Two IO ports are set as output */
 80043be:	2003      	movs	r0, #3
 80043c0:	f000 f80c 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);  /* GPIO uses normal IO functionality */
 80043c4:	2001      	movs	r0, #1
 80043c6:	f000 f809 	bl	80043dc <lcd_wr_data>
    lcd_wr_regno(0xBA);
 80043ca:	20ba      	movs	r0, #186	; 0xba
 80043cc:	f000 f81a 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0X01);  /* GPIO[1:0]=01, controls LCD orientation */
 80043d0:	2001      	movs	r0, #1
 80043d2:	f000 f803 	bl	80043dc <lcd_wr_data>
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <lcd_wr_data>:
 * @brief   LCD write data
 * @param   data: data to be written
 * @retval  None
 */
void lcd_wr_data(volatile uint16_t data)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	80fb      	strh	r3, [r7, #6]
    data = data;
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <lcd_wr_data+0x24>)
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	b292      	uxth	r2, r2
 80043f2:	805a      	strh	r2, [r3, #2]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	600ffffe 	.word	0x600ffffe

08004404 <lcd_wr_regno>:
 * @brief   LCD write register number/address function
 * @param   regno: register number/address
 * @retval  None
 */
void lcd_wr_regno(volatile uint16_t regno)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	80fb      	strh	r3, [r7, #6]
    regno = regno;
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	b29b      	uxth	r3, r3
 8004412:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <lcd_wr_regno+0x24>)
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	b292      	uxth	r2, r2
 800441a:	801a      	strh	r2, [r3, #0]

}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	600ffffe 	.word	0x600ffffe

0800442c <lcd_write_reg>:
 * @param   regno: register number/address
 * @param   data: data to be written
 * @retval  None
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	460a      	mov	r2, r1
 8004436:	80fb      	strh	r3, [r7, #6]
 8004438:	4613      	mov	r3, r2
 800443a:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = regno;   /* Writes the register sequence number to be written */
 800443c:	4a05      	ldr	r2, [pc, #20]	; (8004454 <lcd_write_reg+0x28>)
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = data;    /* Write in data */
 8004442:	4a04      	ldr	r2, [pc, #16]	; (8004454 <lcd_write_reg+0x28>)
 8004444:	88bb      	ldrh	r3, [r7, #4]
 8004446:	8053      	strh	r3, [r2, #2]
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	600ffffe 	.word	0x600ffffe

08004458 <lcd_rd_data>:
 * @brief   LCD read register function
 * @param   None.
 * @retval  The data read
 */
static uint16_t lcd_rd_data(void)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
    volatile uint16_t ram;
    ram = LCD->LCD_RAM;
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <lcd_rd_data+0x1c>)
 8004460:	885b      	ldrh	r3, [r3, #2]
 8004462:	b29b      	uxth	r3, r3
 8004464:	80fb      	strh	r3, [r7, #6]
    return ram;
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	b29b      	uxth	r3, r3
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	600ffffe 	.word	0x600ffffe

08004478 <lcd_write_ram_prepare>:
 * @brief   LCD ready to write GRAM
 * @param   None.
 * @retval  None.
 */
void lcd_write_ram_prepare(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <lcd_write_ram_prepare+0x14>)
 800447e:	4a04      	ldr	r2, [pc, #16]	; (8004490 <lcd_write_ram_prepare+0x18>)
 8004480:	8912      	ldrh	r2, [r2, #8]
 8004482:	801a      	strh	r2, [r3, #0]
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr
 800448c:	600ffffe 	.word	0x600ffffe
 8004490:	200001b8 	.word	0x200001b8

08004494 <lcd_set_cursor>:
 * @brief   Sets the cursor position
 * @param   x,y: coordinate
 * @retval  None.
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	460a      	mov	r2, r1
 800449e:	80fb      	strh	r3, [r7, #6]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 80044a4:	4b65      	ldr	r3, [pc, #404]	; (800463c <lcd_set_cursor+0x1a8>)
 80044a6:	889b      	ldrh	r3, [r3, #4]
 80044a8:	f641 1263 	movw	r2, #6499	; 0x1963
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d167      	bne.n	8004580 <lcd_set_cursor+0xec>
    {
        if (lcddev.dir == 0)    /* In portrait mode, the x-coordinate needs to be transformed */
 80044b0:	4b62      	ldr	r3, [pc, #392]	; (800463c <lcd_set_cursor+0x1a8>)
 80044b2:	799b      	ldrb	r3, [r3, #6]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d11e      	bne.n	80044f6 <lcd_set_cursor+0x62>
        {
            x = lcddev.width - 1 - x;
 80044b8:	4b60      	ldr	r3, [pc, #384]	; (800463c <lcd_set_cursor+0x1a8>)
 80044ba:	881a      	ldrh	r2, [r3, #0]
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 80044c6:	4b5d      	ldr	r3, [pc, #372]	; (800463c <lcd_set_cursor+0x1a8>)
 80044c8:	895b      	ldrh	r3, [r3, #10]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff9a 	bl	8004404 <lcd_wr_regno>
            lcd_wr_data(0);
 80044d0:	2000      	movs	r0, #0
 80044d2:	f7ff ff83 	bl	80043dc <lcd_wr_data>
            lcd_wr_data(0);
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7ff ff80 	bl	80043dc <lcd_wr_data>
            lcd_wr_data(x >> 8);
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ff7a 	bl	80043dc <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ff74 	bl	80043dc <lcd_wr_data>
 80044f4:	e021      	b.n	800453a <lcd_set_cursor+0xa6>
        }
        else                    /* landscape mode */
        {
            lcd_wr_regno(lcddev.setxcmd);
 80044f6:	4b51      	ldr	r3, [pc, #324]	; (800463c <lcd_set_cursor+0x1a8>)
 80044f8:	895b      	ldrh	r3, [r3, #10]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff ff82 	bl	8004404 <lcd_wr_regno>
            lcd_wr_data(x >> 8);
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	0a1b      	lsrs	r3, r3, #8
 8004504:	b29b      	uxth	r3, r3
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff68 	bl	80043dc <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	b29b      	uxth	r3, r3
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff62 	bl	80043dc <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) >> 8);
 8004518:	4b48      	ldr	r3, [pc, #288]	; (800463c <lcd_set_cursor+0x1a8>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	3b01      	subs	r3, #1
 800451e:	121b      	asrs	r3, r3, #8
 8004520:	b29b      	uxth	r3, r3
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff ff5a 	bl	80043dc <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8004528:	4b44      	ldr	r3, [pc, #272]	; (800463c <lcd_set_cursor+0x1a8>)
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	3b01      	subs	r3, #1
 800452e:	b29b      	uxth	r3, r3
 8004530:	b2db      	uxtb	r3, r3
 8004532:	b29b      	uxth	r3, r3
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff ff51 	bl	80043dc <lcd_wr_data>
        }

        lcd_wr_regno(lcddev.setycmd);
 800453a:	4b40      	ldr	r3, [pc, #256]	; (800463c <lcd_set_cursor+0x1a8>)
 800453c:	899b      	ldrh	r3, [r3, #12]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff ff60 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8004544:	88bb      	ldrh	r3, [r7, #4]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	b29b      	uxth	r3, r3
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff ff46 	bl	80043dc <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 8004550:	88bb      	ldrh	r3, [r7, #4]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	b29b      	uxth	r3, r3
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ff40 	bl	80043dc <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 800455c:	4b37      	ldr	r3, [pc, #220]	; (800463c <lcd_set_cursor+0x1a8>)
 800455e:	885b      	ldrh	r3, [r3, #2]
 8004560:	3b01      	subs	r3, #1
 8004562:	121b      	asrs	r3, r3, #8
 8004564:	b29b      	uxth	r3, r3
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff ff38 	bl	80043dc <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 800456c:	4b33      	ldr	r3, [pc, #204]	; (800463c <lcd_set_cursor+0x1a8>)
 800456e:	885b      	ldrh	r3, [r3, #2]
 8004570:	3b01      	subs	r3, #1
 8004572:	b29b      	uxth	r3, r3
 8004574:	b2db      	uxtb	r3, r3
 8004576:	b29b      	uxth	r3, r3
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff ff2f 	bl	80043dc <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 800457e:	e058      	b.n	8004632 <lcd_set_cursor+0x19e>
    else if (lcddev.id == 0X5510)
 8004580:	4b2e      	ldr	r3, [pc, #184]	; (800463c <lcd_set_cursor+0x1a8>)
 8004582:	889b      	ldrh	r3, [r3, #4]
 8004584:	f245 5210 	movw	r2, #21776	; 0x5510
 8004588:	4293      	cmp	r3, r2
 800458a:	d130      	bne.n	80045ee <lcd_set_cursor+0x15a>
        lcd_wr_regno(lcddev.setxcmd);
 800458c:	4b2b      	ldr	r3, [pc, #172]	; (800463c <lcd_set_cursor+0x1a8>)
 800458e:	895b      	ldrh	r3, [r3, #10]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff37 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	0a1b      	lsrs	r3, r3, #8
 800459a:	b29b      	uxth	r3, r3
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ff1d 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 80045a2:	4b26      	ldr	r3, [pc, #152]	; (800463c <lcd_set_cursor+0x1a8>)
 80045a4:	895b      	ldrh	r3, [r3, #10]
 80045a6:	3301      	adds	r3, #1
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff2a 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(x & 0XFF);
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff ff10 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 80045bc:	4b1f      	ldr	r3, [pc, #124]	; (800463c <lcd_set_cursor+0x1a8>)
 80045be:	899b      	ldrh	r3, [r3, #12]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff1f 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 80045c6:	88bb      	ldrh	r3, [r7, #4]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff ff05 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <lcd_set_cursor+0x1a8>)
 80045d4:	899b      	ldrh	r3, [r3, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	b29b      	uxth	r3, r3
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ff12 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(y & 0XFF);
 80045e0:	88bb      	ldrh	r3, [r7, #4]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fef8 	bl	80043dc <lcd_wr_data>
}
 80045ec:	e021      	b.n	8004632 <lcd_set_cursor+0x19e>
        lcd_wr_regno(lcddev.setxcmd);
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <lcd_set_cursor+0x1a8>)
 80045f0:	895b      	ldrh	r3, [r3, #10]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff ff06 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff feec 	bl	80043dc <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	b29b      	uxth	r3, r3
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fee6 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <lcd_set_cursor+0x1a8>)
 8004612:	899b      	ldrh	r3, [r3, #12]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fef5 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 800461a:	88bb      	ldrh	r3, [r7, #4]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	b29b      	uxth	r3, r3
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fedb 	bl	80043dc <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 8004626:	88bb      	ldrh	r3, [r7, #4]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	b29b      	uxth	r3, r3
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fed5 	bl	80043dc <lcd_wr_data>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200001b8 	.word	0x200001b8

08004640 <lcd_scan_dir>:
 * @brief   Set the automatic scanning direction of LCD
 * @param   dir: 0 to 7, representing 8 directions (see lcd.h for definitions)
 * @retval  None.
 */
void lcd_scan_dir(uint8_t dir)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	81fb      	strh	r3, [r7, #14]
    uint16_t dirreg = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	81bb      	strh	r3, [r7, #12]
    uint16_t temp;

    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 8004652:	4b9c      	ldr	r3, [pc, #624]	; (80048c4 <lcd_scan_dir+0x284>)
 8004654:	799b      	ldrb	r3, [r3, #6]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d105      	bne.n	8004666 <lcd_scan_dir+0x26>
 800465a:	4b9a      	ldr	r3, [pc, #616]	; (80048c4 <lcd_scan_dir+0x284>)
 800465c:	889b      	ldrh	r3, [r3, #4]
 800465e:	f641 1263 	movw	r2, #6499	; 0x1963
 8004662:	4293      	cmp	r3, r2
 8004664:	d109      	bne.n	800467a <lcd_scan_dir+0x3a>
 8004666:	4b97      	ldr	r3, [pc, #604]	; (80048c4 <lcd_scan_dir+0x284>)
 8004668:	799b      	ldrb	r3, [r3, #6]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d134      	bne.n	80046d8 <lcd_scan_dir+0x98>
 800466e:	4b95      	ldr	r3, [pc, #596]	; (80048c4 <lcd_scan_dir+0x284>)
 8004670:	889b      	ldrh	r3, [r3, #4]
 8004672:	f641 1263 	movw	r2, #6499	; 0x1963
 8004676:	4293      	cmp	r3, r2
 8004678:	d12e      	bne.n	80046d8 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* Change of direction */
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	2b07      	cmp	r3, #7
 800467e:	d82b      	bhi.n	80046d8 <lcd_scan_dir+0x98>
 8004680:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <lcd_scan_dir+0x48>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046a9 	.word	0x080046a9
 800468c:	080046af 	.word	0x080046af
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bb 	.word	0x080046bb
 8004698:	080046c1 	.word	0x080046c1
 800469c:	080046c7 	.word	0x080046c7
 80046a0:	080046cd 	.word	0x080046cd
 80046a4:	080046d3 	.word	0x080046d3
        {
            case L2R_U2D:
                dir = D2U_L2R;
 80046a8:	2306      	movs	r3, #6
 80046aa:	71fb      	strb	r3, [r7, #7]
                break;
 80046ac:	e014      	b.n	80046d8 <lcd_scan_dir+0x98>

            case L2R_D2U:
                dir = D2U_R2L;
 80046ae:	2307      	movs	r3, #7
 80046b0:	71fb      	strb	r3, [r7, #7]
                break;
 80046b2:	e011      	b.n	80046d8 <lcd_scan_dir+0x98>

            case R2L_U2D:
                dir = U2D_L2R;
 80046b4:	2304      	movs	r3, #4
 80046b6:	71fb      	strb	r3, [r7, #7]
                break;
 80046b8:	e00e      	b.n	80046d8 <lcd_scan_dir+0x98>

            case R2L_D2U:
                dir = U2D_R2L;
 80046ba:	2305      	movs	r3, #5
 80046bc:	71fb      	strb	r3, [r7, #7]
                break;
 80046be:	e00b      	b.n	80046d8 <lcd_scan_dir+0x98>

            case U2D_L2R:
                dir = L2R_D2U;
 80046c0:	2301      	movs	r3, #1
 80046c2:	71fb      	strb	r3, [r7, #7]
                break;
 80046c4:	e008      	b.n	80046d8 <lcd_scan_dir+0x98>

            case U2D_R2L:
                dir = L2R_U2D;
 80046c6:	2300      	movs	r3, #0
 80046c8:	71fb      	strb	r3, [r7, #7]
                break;
 80046ca:	e005      	b.n	80046d8 <lcd_scan_dir+0x98>

            case D2U_L2R:
                dir = R2L_D2U;
 80046cc:	2303      	movs	r3, #3
 80046ce:	71fb      	strb	r3, [r7, #7]
                break;
 80046d0:	e002      	b.n	80046d8 <lcd_scan_dir+0x98>

            case D2U_R2L:
                dir = R2L_U2D;
 80046d2:	2302      	movs	r3, #2
 80046d4:	71fb      	strb	r3, [r7, #7]
                break;
 80046d6:	bf00      	nop
        }
    }

    /* Set the value of 0X36/0X3600 register bit 5,6,7 according to the scan mode */
    switch (dir)
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	2b07      	cmp	r3, #7
 80046dc:	d835      	bhi.n	800474a <lcd_scan_dir+0x10a>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <lcd_scan_dir+0xa4>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	0800474b 	.word	0x0800474b
 80046e8:	08004705 	.word	0x08004705
 80046ec:	0800470f 	.word	0x0800470f
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004723 	.word	0x08004723
 80046f8:	0800472d 	.word	0x0800472d
 80046fc:	08004737 	.word	0x08004737
 8004700:	08004741 	.word	0x08004741
        case L2R_U2D:/* From left to right, from top to bottom */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* From left to right, from bottom to top */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8004704:	89fb      	ldrh	r3, [r7, #14]
 8004706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470a:	81fb      	strh	r3, [r7, #14]
            break;
 800470c:	e01d      	b.n	800474a <lcd_scan_dir+0x10a>

        case R2L_U2D:/* From right to left, from top to bottom */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800470e:	89fb      	ldrh	r3, [r7, #14]
 8004710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004714:	81fb      	strh	r3, [r7, #14]
            break;
 8004716:	e018      	b.n	800474a <lcd_scan_dir+0x10a>

        case R2L_D2U:/* From right to left, from bottom to top */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800471e:	81fb      	strh	r3, [r7, #14]
            break;
 8004720:	e013      	b.n	800474a <lcd_scan_dir+0x10a>

        case U2D_L2R:/* From top to bottom, left to right */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8004722:	89fb      	ldrh	r3, [r7, #14]
 8004724:	f043 0320 	orr.w	r3, r3, #32
 8004728:	81fb      	strh	r3, [r7, #14]
            break;
 800472a:	e00e      	b.n	800474a <lcd_scan_dir+0x10a>

        case U2D_R2L:/* From top to bottom, right to left */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 800472c:	89fb      	ldrh	r3, [r7, #14]
 800472e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004732:	81fb      	strh	r3, [r7, #14]
            break;
 8004734:	e009      	b.n	800474a <lcd_scan_dir+0x10a>

        case D2U_L2R:/* From bottom to top, left to right */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8004736:	89fb      	ldrh	r3, [r7, #14]
 8004738:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800473c:	81fb      	strh	r3, [r7, #14]
            break;
 800473e:	e004      	b.n	800474a <lcd_scan_dir+0x10a>

        case D2U_R2L:/* From bottom to top, right to left */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8004740:	89fb      	ldrh	r3, [r7, #14]
 8004742:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004746:	81fb      	strh	r3, [r7, #14]
            break;
 8004748:	bf00      	nop
    }

    if (lcddev.id == 0X5510)
 800474a:	4b5e      	ldr	r3, [pc, #376]	; (80048c4 <lcd_scan_dir+0x284>)
 800474c:	889b      	ldrh	r3, [r3, #4]
 800474e:	f245 5210 	movw	r2, #21776	; 0x5510
 8004752:	4293      	cmp	r3, r2
 8004754:	d103      	bne.n	800475e <lcd_scan_dir+0x11e>
    {
        dirreg = 0X3600;    /* For 5510, there is a difference between the registers of the other driver ics */
 8004756:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800475a:	81bb      	strh	r3, [r7, #12]
 800475c:	e001      	b.n	8004762 <lcd_scan_dir+0x122>
    }
    else
    {
    	dirreg = 0X36;  /* For most driver ics, it is controlled by the 0X36 register */
 800475e:	2336      	movs	r3, #54	; 0x36
 8004760:	81bb      	strh	r3, [r7, #12]
    }

    /* 9341 & 7789 & 7796 to set the BGR bit */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 8004762:	4b58      	ldr	r3, [pc, #352]	; (80048c4 <lcd_scan_dir+0x284>)
 8004764:	889b      	ldrh	r3, [r3, #4]
 8004766:	f249 3241 	movw	r2, #37697	; 0x9341
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <lcd_scan_dir+0x146>
 800476e:	4b55      	ldr	r3, [pc, #340]	; (80048c4 <lcd_scan_dir+0x284>)
 8004770:	889b      	ldrh	r3, [r3, #4]
 8004772:	f247 7289 	movw	r2, #30601	; 0x7789
 8004776:	4293      	cmp	r3, r2
 8004778:	d005      	beq.n	8004786 <lcd_scan_dir+0x146>
 800477a:	4b52      	ldr	r3, [pc, #328]	; (80048c4 <lcd_scan_dir+0x284>)
 800477c:	889b      	ldrh	r3, [r3, #4]
 800477e:	f247 7296 	movw	r2, #30614	; 0x7796
 8004782:	4293      	cmp	r3, r2
 8004784:	d103      	bne.n	800478e <lcd_scan_dir+0x14e>
    {
        regval |= 0X08;
 8004786:	89fb      	ldrh	r3, [r7, #14]
 8004788:	f043 0308 	orr.w	r3, r3, #8
 800478c:	81fb      	strh	r3, [r7, #14]
    }

    lcd_write_reg(dirreg, regval);
 800478e:	89fa      	ldrh	r2, [r7, #14]
 8004790:	89bb      	ldrh	r3, [r7, #12]
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff fe49 	bl	800442c <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963 no coordinate manipulation */
 800479a:	4b4a      	ldr	r3, [pc, #296]	; (80048c4 <lcd_scan_dir+0x284>)
 800479c:	889b      	ldrh	r3, [r3, #4]
 800479e:	f641 1263 	movw	r2, #6499	; 0x1963
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d025      	beq.n	80047f2 <lcd_scan_dir+0x1b2>
    {
        if (regval & 0X20)
 80047a6:	89fb      	ldrh	r3, [r7, #14]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d010      	beq.n	80047d2 <lcd_scan_dir+0x192>
        {
            if (lcddev.width < lcddev.height)   /* Swap X and Y */
 80047b0:	4b44      	ldr	r3, [pc, #272]	; (80048c4 <lcd_scan_dir+0x284>)
 80047b2:	881a      	ldrh	r2, [r3, #0]
 80047b4:	4b43      	ldr	r3, [pc, #268]	; (80048c4 <lcd_scan_dir+0x284>)
 80047b6:	885b      	ldrh	r3, [r3, #2]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d21a      	bcs.n	80047f2 <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 80047bc:	4b41      	ldr	r3, [pc, #260]	; (80048c4 <lcd_scan_dir+0x284>)
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 80047c2:	4b40      	ldr	r3, [pc, #256]	; (80048c4 <lcd_scan_dir+0x284>)
 80047c4:	885a      	ldrh	r2, [r3, #2]
 80047c6:	4b3f      	ldr	r3, [pc, #252]	; (80048c4 <lcd_scan_dir+0x284>)
 80047c8:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80047ca:	4a3e      	ldr	r2, [pc, #248]	; (80048c4 <lcd_scan_dir+0x284>)
 80047cc:	897b      	ldrh	r3, [r7, #10]
 80047ce:	8053      	strh	r3, [r2, #2]
 80047d0:	e00f      	b.n	80047f2 <lcd_scan_dir+0x1b2>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* Swap X and Y */
 80047d2:	4b3c      	ldr	r3, [pc, #240]	; (80048c4 <lcd_scan_dir+0x284>)
 80047d4:	881a      	ldrh	r2, [r3, #0]
 80047d6:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <lcd_scan_dir+0x284>)
 80047d8:	885b      	ldrh	r3, [r3, #2]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d909      	bls.n	80047f2 <lcd_scan_dir+0x1b2>
            {
                temp = lcddev.width;
 80047de:	4b39      	ldr	r3, [pc, #228]	; (80048c4 <lcd_scan_dir+0x284>)
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 80047e4:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <lcd_scan_dir+0x284>)
 80047e6:	885a      	ldrh	r2, [r3, #2]
 80047e8:	4b36      	ldr	r3, [pc, #216]	; (80048c4 <lcd_scan_dir+0x284>)
 80047ea:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 80047ec:	4a35      	ldr	r2, [pc, #212]	; (80048c4 <lcd_scan_dir+0x284>)
 80047ee:	897b      	ldrh	r3, [r7, #10]
 80047f0:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* Set the size of the display area (window) */
    if (lcddev.id == 0X5510)
 80047f2:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <lcd_scan_dir+0x284>)
 80047f4:	889b      	ldrh	r3, [r3, #4]
 80047f6:	f245 5210 	movw	r2, #21776	; 0x5510
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d164      	bne.n	80048c8 <lcd_scan_dir+0x288>
    {
        lcd_wr_regno(lcddev.setxcmd);
 80047fe:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <lcd_scan_dir+0x284>)
 8004800:	895b      	ldrh	r3, [r3, #10]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fdfe 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(0);
 8004808:	2000      	movs	r0, #0
 800480a:	f7ff fde7 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 800480e:	4b2d      	ldr	r3, [pc, #180]	; (80048c4 <lcd_scan_dir+0x284>)
 8004810:	895b      	ldrh	r3, [r3, #10]
 8004812:	3301      	adds	r3, #1
 8004814:	b29b      	uxth	r3, r3
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fdf4 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(0);
 800481c:	2000      	movs	r0, #0
 800481e:	f7ff fddd 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 2);
 8004822:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <lcd_scan_dir+0x284>)
 8004824:	895b      	ldrh	r3, [r3, #10]
 8004826:	3302      	adds	r3, #2
 8004828:	b29b      	uxth	r3, r3
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff fdea 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8004830:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <lcd_scan_dir+0x284>)
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	3b01      	subs	r3, #1
 8004836:	121b      	asrs	r3, r3, #8
 8004838:	b29b      	uxth	r3, r3
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fdce 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 3);
 8004840:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <lcd_scan_dir+0x284>)
 8004842:	895b      	ldrh	r3, [r3, #10]
 8004844:	3303      	adds	r3, #3
 8004846:	b29b      	uxth	r3, r3
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fddb 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 800484e:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <lcd_scan_dir+0x284>)
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	3b01      	subs	r3, #1
 8004854:	b29b      	uxth	r3, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	b29b      	uxth	r3, r3
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fdbe 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8004860:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <lcd_scan_dir+0x284>)
 8004862:	899b      	ldrh	r3, [r3, #12]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff fdcd 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(0);
 800486a:	2000      	movs	r0, #0
 800486c:	f7ff fdb6 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 8004870:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <lcd_scan_dir+0x284>)
 8004872:	899b      	ldrh	r3, [r3, #12]
 8004874:	3301      	adds	r3, #1
 8004876:	b29b      	uxth	r3, r3
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fdc3 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(0);
 800487e:	2000      	movs	r0, #0
 8004880:	f7ff fdac 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 2);
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <lcd_scan_dir+0x284>)
 8004886:	899b      	ldrh	r3, [r3, #12]
 8004888:	3302      	adds	r3, #2
 800488a:	b29b      	uxth	r3, r3
 800488c:	4618      	mov	r0, r3
 800488e:	f7ff fdb9 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <lcd_scan_dir+0x284>)
 8004894:	885b      	ldrh	r3, [r3, #2]
 8004896:	3b01      	subs	r3, #1
 8004898:	121b      	asrs	r3, r3, #8
 800489a:	b29b      	uxth	r3, r3
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fd9d 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 3);
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <lcd_scan_dir+0x284>)
 80048a4:	899b      	ldrh	r3, [r3, #12]
 80048a6:	3303      	adds	r3, #3
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fdaa 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <lcd_scan_dir+0x284>)
 80048b2:	885b      	ldrh	r3, [r3, #2]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fd8d 	bl	80043dc <lcd_wr_data>
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 80048c2:	e039      	b.n	8004938 <lcd_scan_dir+0x2f8>
 80048c4:	200001b8 	.word	0x200001b8
        lcd_wr_regno(lcddev.setxcmd);
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <lcd_scan_dir+0x300>)
 80048ca:	895b      	ldrh	r3, [r3, #10]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fd99 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(0);
 80048d2:	2000      	movs	r0, #0
 80048d4:	f7ff fd82 	bl	80043dc <lcd_wr_data>
        lcd_wr_data(0);
 80048d8:	2000      	movs	r0, #0
 80048da:	f7ff fd7f 	bl	80043dc <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) >> 8);
 80048de:	4b18      	ldr	r3, [pc, #96]	; (8004940 <lcd_scan_dir+0x300>)
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	121b      	asrs	r3, r3, #8
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fd77 	bl	80043dc <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <lcd_scan_dir+0x300>)
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fd6e 	bl	80043dc <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8004900:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <lcd_scan_dir+0x300>)
 8004902:	899b      	ldrh	r3, [r3, #12]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fd7d 	bl	8004404 <lcd_wr_regno>
        lcd_wr_data(0);
 800490a:	2000      	movs	r0, #0
 800490c:	f7ff fd66 	bl	80043dc <lcd_wr_data>
        lcd_wr_data(0);
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff fd63 	bl	80043dc <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <lcd_scan_dir+0x300>)
 8004918:	885b      	ldrh	r3, [r3, #2]
 800491a:	3b01      	subs	r3, #1
 800491c:	121b      	asrs	r3, r3, #8
 800491e:	b29b      	uxth	r3, r3
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fd5b 	bl	80043dc <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <lcd_scan_dir+0x300>)
 8004928:	885b      	ldrh	r3, [r3, #2]
 800492a:	3b01      	subs	r3, #1
 800492c:	b29b      	uxth	r3, r3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	b29b      	uxth	r3, r3
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fd52 	bl	80043dc <lcd_wr_data>
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	200001b8 	.word	0x200001b8

08004944 <lcd_draw_point>:
 * @param   x,y  : coordinate
 * @param   color: Point color
 * @retval  None.
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	603a      	str	r2, [r7, #0]
 800494e:	80fb      	strh	r3, [r7, #6]
 8004950:	460b      	mov	r3, r1
 8004952:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* Sets the cursor position */
 8004954:	88ba      	ldrh	r2, [r7, #4]
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	4611      	mov	r1, r2
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fd9a 	bl	8004494 <lcd_set_cursor>
    lcd_write_ram_prepare();    /* Start writing GRAM */
 8004960:	f7ff fd8a 	bl	8004478 <lcd_write_ram_prepare>
    LCD->LCD_RAM = color;
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <lcd_draw_point+0x30>)
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	b292      	uxth	r2, r2
 800496a:	805a      	strh	r2, [r3, #2]
}
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	600ffffe 	.word	0x600ffffe

08004978 <lcd_ssd_backlight_set>:
 * @brief   SSD1963 backlight brightness setting function
 * @param   pwm  : Backlight level,0~100. The larger the brighter.
 * @retval  None.
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
    lcd_wr_regno(0xBE);         /* Configure PWM output */
 8004982:	20be      	movs	r0, #190	; 0xbe
 8004984:	f7ff fd3e 	bl	8004404 <lcd_wr_regno>
    lcd_wr_data(0x05);          /* 1 Set the PWM frequency */
 8004988:	2005      	movs	r0, #5
 800498a:	f7ff fd27 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(pwm * 2.55);    /* 2 Set the PWM duty cycle */
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	4618      	mov	r0, r3
 8004992:	f7fb fec5 	bl	8000720 <__aeabi_i2d>
 8004996:	a310      	add	r3, pc, #64	; (adr r3, 80049d8 <lcd_ssd_backlight_set+0x60>)
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f7fb fc44 	bl	8000228 <__aeabi_dmul>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	f7fb ff24 	bl	80007f4 <__aeabi_d2uiz>
 80049ac:	4603      	mov	r3, r0
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fd13 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x01);          /* 3 Setting C */
 80049b6:	2001      	movs	r0, #1
 80049b8:	f7ff fd10 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0xFF);          /* 4 Setting D */
 80049bc:	20ff      	movs	r0, #255	; 0xff
 80049be:	f7ff fd0d 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);          /* 5 Setting E */
 80049c2:	2000      	movs	r0, #0
 80049c4:	f7ff fd0a 	bl	80043dc <lcd_wr_data>
    lcd_wr_data(0x00);          /* 6 Setting F */
 80049c8:	2000      	movs	r0, #0
 80049ca:	f7ff fd07 	bl	80043dc <lcd_wr_data>
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	66666666 	.word	0x66666666
 80049dc:	40046666 	.word	0x40046666

080049e0 <lcd_display_dir>:
 * @brief   Set the LCD display orientation
 * @param   dir  : 0, portrait; 1. Landscape
 * @retval  None.
 */
void lcd_display_dir(uint8_t dir)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* Portrait/landscape */
 80049ea:	4a68      	ldr	r2, [pc, #416]	; (8004b8c <lcd_display_dir+0x1ac>)
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* Portrait */
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d165      	bne.n	8004ac2 <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 80049f6:	4b65      	ldr	r3, [pc, #404]	; (8004b8c <lcd_display_dir+0x1ac>)
 80049f8:	22f0      	movs	r2, #240	; 0xf0
 80049fa:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 80049fc:	4b63      	ldr	r3, [pc, #396]	; (8004b8c <lcd_display_dir+0x1ac>)
 80049fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a02:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8004a04:	4b61      	ldr	r3, [pc, #388]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a06:	889b      	ldrh	r3, [r3, #4]
 8004a08:	f245 5210 	movw	r2, #21776	; 0x5510
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d114      	bne.n	8004a3a <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8004a10:	4b5e      	ldr	r3, [pc, #376]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a12:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8004a16:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8004a18:	4b5c      	ldr	r3, [pc, #368]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a1a:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8004a1e:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8004a20:	4b5a      	ldr	r3, [pc, #360]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a22:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8004a26:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8004a28:	4b58      	ldr	r3, [pc, #352]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a2e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8004a30:	4b56      	ldr	r3, [pc, #344]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a32:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004a36:	805a      	strh	r2, [r3, #2]
 8004a38:	e020      	b.n	8004a7c <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8004a3a:	4b54      	ldr	r3, [pc, #336]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a3c:	889b      	ldrh	r3, [r3, #4]
 8004a3e:	f641 1263 	movw	r2, #6499	; 0x1963
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d111      	bne.n	8004a6a <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 8004a46:	4b51      	ldr	r3, [pc, #324]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a48:	222c      	movs	r2, #44	; 0x2c
 8004a4a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* Set the write x-coordinate instruction */
 8004a4c:	4b4f      	ldr	r3, [pc, #316]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a4e:	222b      	movs	r2, #43	; 0x2b
 8004a50:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* Set the write y-coordinate instruction */
 8004a52:	4b4e      	ldr	r3, [pc, #312]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a54:	222a      	movs	r2, #42	; 0x2a
 8004a56:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* Set width 480 */
 8004a58:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a5e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* Set height 800 */
 8004a60:	4b4a      	ldr	r3, [pc, #296]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a62:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004a66:	805a      	strh	r2, [r3, #2]
 8004a68:	e008      	b.n	8004a7c <lcd_display_dir+0x9c>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 8004a6a:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a6c:	222c      	movs	r2, #44	; 0x2c
 8004a6e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8004a70:	4b46      	ldr	r3, [pc, #280]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a72:	222a      	movs	r2, #42	; 0x2a
 8004a74:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8004a76:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a78:	222b      	movs	r2, #43	; 0x2b
 8004a7a:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 8004a7c:	4b43      	ldr	r3, [pc, #268]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a7e:	889b      	ldrh	r3, [r3, #4]
 8004a80:	f245 3210 	movw	r2, #21264	; 0x5310
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d005      	beq.n	8004a94 <lcd_display_dir+0xb4>
 8004a88:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a8a:	889b      	ldrh	r3, [r3, #4]
 8004a8c:	f247 7296 	movw	r2, #30614	; 0x7796
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d107      	bne.n	8004aa4 <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8004a94:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a96:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a9a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004a9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004aa2:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* 9806 means 480*800 resolution */
 8004aa4:	4b39      	ldr	r3, [pc, #228]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004aa6:	889b      	ldrh	r3, [r3, #4]
 8004aa8:	f649 0206 	movw	r2, #38918	; 0x9806
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d165      	bne.n	8004b7c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8004ab0:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004ab2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004ab6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8004ab8:	4b34      	ldr	r3, [pc, #208]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004aba:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004abe:	805a      	strh	r2, [r3, #2]
 8004ac0:	e05c      	b.n	8004b7c <lcd_display_dir+0x19c>
        }
    }
    else                            /* landscape */
    {
        lcddev.width = 320;         /* Default width */
 8004ac2:	4b32      	ldr	r3, [pc, #200]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004ac4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ac8:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* Default height */
 8004aca:	4b30      	ldr	r3, [pc, #192]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004acc:	22f0      	movs	r2, #240	; 0xf0
 8004ace:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8004ad0:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004ad2:	889b      	ldrh	r3, [r3, #4]
 8004ad4:	f245 5210 	movw	r2, #21776	; 0x5510
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d114      	bne.n	8004b06 <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 8004adc:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004ade:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8004ae2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8004ae4:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004ae6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8004aea:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8004aec:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004aee:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8004af2:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8004af4:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004af6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004afa:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8004afc:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004afe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004b02:	805a      	strh	r2, [r3, #2]
 8004b04:	e026      	b.n	8004b54 <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8004b06:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b08:	889b      	ldrh	r3, [r3, #4]
 8004b0a:	f641 1263 	movw	r2, #6499	; 0x1963
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d005      	beq.n	8004b1e <lcd_display_dir+0x13e>
 8004b12:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b14:	889b      	ldrh	r3, [r3, #4]
 8004b16:	f649 0206 	movw	r2, #38918	; 0x9806
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d111      	bne.n	8004b42 <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* Set the instruction to write GRAM */
 8004b1e:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b20:	222c      	movs	r2, #44	; 0x2c
 8004b22:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* Set the write x-coordinate instruction */
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b26:	222a      	movs	r2, #42	; 0x2a
 8004b28:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* Set the write y-coordinate instruction */
 8004b2a:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b2c:	222b      	movs	r2, #43	; 0x2b
 8004b2e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* Set width 800 */
 8004b30:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b32:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004b36:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* Set height 480 */
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004b3e:	805a      	strh	r2, [r3, #2]
 8004b40:	e008      	b.n	8004b54 <lcd_display_dir+0x174>
        }
        else
        {
            lcddev.wramcmd = 0X2C;
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b44:	222c      	movs	r2, #44	; 0x2c
 8004b46:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b4a:	222a      	movs	r2, #42	; 0x2a
 8004b4c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b50:	222b      	movs	r2, #43	; 0x2b
 8004b52:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* If it's 5310/7796, it's 320*480 */
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b56:	889b      	ldrh	r3, [r3, #4]
 8004b58:	f245 3210 	movw	r2, #21264	; 0x5310
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d005      	beq.n	8004b6c <lcd_display_dir+0x18c>
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b62:	889b      	ldrh	r3, [r3, #4]
 8004b64:	f247 7296 	movw	r2, #30614	; 0x7796
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d107      	bne.n	8004b7c <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b6e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004b72:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <lcd_display_dir+0x1ac>)
 8004b76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b7a:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* Default scan direction */
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	f7ff fd5f 	bl	8004640 <lcd_scan_dir>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200001b8 	.word	0x200001b8

08004b90 <lcd_init>:
 * @note    This initialization function can initialize various types of LCD
 * @param   None.
 * @retval  None.
 */
void lcd_init(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	HAL_Delay(50);        /* After initializing the FSMC, a certain amount of time must be waited before the initialization can start */
 8004b94:	2032      	movs	r0, #50	; 0x32
 8004b96:	f001 f82f 	bl	8005bf8 <HAL_Delay>

    /* Try a read of 9341 ID */
    lcd_wr_regno(0XD3);
 8004b9a:	20d3      	movs	r0, #211	; 0xd3
 8004b9c:	f7ff fc32 	bl	8004404 <lcd_wr_regno>
    lcddev.id = lcd_rd_data();  /* dummy read */
 8004ba0:	f7ff fc5a 	bl	8004458 <lcd_rd_data>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4bb0      	ldr	r3, [pc, #704]	; (8004e6c <lcd_init+0x2dc>)
 8004baa:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8004bac:	f7ff fc54 	bl	8004458 <lcd_rd_data>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4bad      	ldr	r3, [pc, #692]	; (8004e6c <lcd_init+0x2dc>)
 8004bb6:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* Read 0X93 */
 8004bb8:	f7ff fc4e 	bl	8004458 <lcd_rd_data>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4baa      	ldr	r3, [pc, #680]	; (8004e6c <lcd_init+0x2dc>)
 8004bc2:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 8004bc4:	4ba9      	ldr	r3, [pc, #676]	; (8004e6c <lcd_init+0x2dc>)
 8004bc6:	889b      	ldrh	r3, [r3, #4]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	4ba7      	ldr	r3, [pc, #668]	; (8004e6c <lcd_init+0x2dc>)
 8004bce:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* Read 0X41 */
 8004bd0:	f7ff fc42 	bl	8004458 <lcd_rd_data>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4ba4      	ldr	r3, [pc, #656]	; (8004e6c <lcd_init+0x2dc>)
 8004bda:	889b      	ldrh	r3, [r3, #4]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	4ba2      	ldr	r3, [pc, #648]	; (8004e6c <lcd_init+0x2dc>)
 8004be2:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* Not 9341, try to see if it's ST7789 */
 8004be4:	4ba1      	ldr	r3, [pc, #644]	; (8004e6c <lcd_init+0x2dc>)
 8004be6:	889b      	ldrh	r3, [r3, #4]
 8004be8:	f249 3241 	movw	r2, #37697	; 0x9341
 8004bec:	4293      	cmp	r3, r2
 8004bee:	f000 8122 	beq.w	8004e36 <lcd_init+0x2a6>
    {
        lcd_wr_regno(0X04);
 8004bf2:	2004      	movs	r0, #4
 8004bf4:	f7ff fc06 	bl	8004404 <lcd_wr_regno>
        lcddev.id = lcd_rd_data();      /* dummy read */
 8004bf8:	f7ff fc2e 	bl	8004458 <lcd_rd_data>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4b9a      	ldr	r3, [pc, #616]	; (8004e6c <lcd_init+0x2dc>)
 8004c02:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read to 0X85 */
 8004c04:	f7ff fc28 	bl	8004458 <lcd_rd_data>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b97      	ldr	r3, [pc, #604]	; (8004e6c <lcd_init+0x2dc>)
 8004c0e:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* Read 0X85 */
 8004c10:	f7ff fc22 	bl	8004458 <lcd_rd_data>
 8004c14:	4603      	mov	r3, r0
 8004c16:	461a      	mov	r2, r3
 8004c18:	4b94      	ldr	r3, [pc, #592]	; (8004e6c <lcd_init+0x2dc>)
 8004c1a:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8004c1c:	4b93      	ldr	r3, [pc, #588]	; (8004e6c <lcd_init+0x2dc>)
 8004c1e:	889b      	ldrh	r3, [r3, #4]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	4b91      	ldr	r3, [pc, #580]	; (8004e6c <lcd_init+0x2dc>)
 8004c26:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* Read 0X52 */
 8004c28:	f7ff fc16 	bl	8004458 <lcd_rd_data>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	461a      	mov	r2, r3
 8004c30:	4b8e      	ldr	r3, [pc, #568]	; (8004e6c <lcd_init+0x2dc>)
 8004c32:	889b      	ldrh	r3, [r3, #4]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	4b8c      	ldr	r3, [pc, #560]	; (8004e6c <lcd_init+0x2dc>)
 8004c3a:	809a      	strh	r2, [r3, #4]

        if (lcddev.id == 0X8552)        /* Convert the ID of 8552 to 7789 */
 8004c3c:	4b8b      	ldr	r3, [pc, #556]	; (8004e6c <lcd_init+0x2dc>)
 8004c3e:	889b      	ldrh	r3, [r3, #4]
 8004c40:	f248 5252 	movw	r2, #34130	; 0x8552
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d103      	bne.n	8004c50 <lcd_init+0xc0>
        {
            lcddev.id = 0x7789;
 8004c48:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <lcd_init+0x2dc>)
 8004c4a:	f247 7289 	movw	r2, #30601	; 0x7789
 8004c4e:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* Also not ST7789, try not NT35310 */
 8004c50:	4b86      	ldr	r3, [pc, #536]	; (8004e6c <lcd_init+0x2dc>)
 8004c52:	889b      	ldrh	r3, [r3, #4]
 8004c54:	f247 7289 	movw	r2, #30601	; 0x7789
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	f000 80ec 	beq.w	8004e36 <lcd_init+0x2a6>
        {
            lcd_wr_regno(0xD4);
 8004c5e:	20d4      	movs	r0, #212	; 0xd4
 8004c60:	f7ff fbd0 	bl	8004404 <lcd_wr_regno>
            lcddev.id = lcd_rd_data();  /* dummy read */
 8004c64:	f7ff fbf8 	bl	8004458 <lcd_rd_data>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4b7f      	ldr	r3, [pc, #508]	; (8004e6c <lcd_init+0x2dc>)
 8004c6e:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x01 */
 8004c70:	f7ff fbf2 	bl	8004458 <lcd_rd_data>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	4b7c      	ldr	r3, [pc, #496]	; (8004e6c <lcd_init+0x2dc>)
 8004c7a:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* Read back 0x53 */
 8004c7c:	f7ff fbec 	bl	8004458 <lcd_rd_data>
 8004c80:	4603      	mov	r3, r0
 8004c82:	461a      	mov	r2, r3
 8004c84:	4b79      	ldr	r3, [pc, #484]	; (8004e6c <lcd_init+0x2dc>)
 8004c86:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8004c88:	4b78      	ldr	r3, [pc, #480]	; (8004e6c <lcd_init+0x2dc>)
 8004c8a:	889b      	ldrh	r3, [r3, #4]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <lcd_init+0x2dc>)
 8004c92:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8004c94:	f7ff fbe0 	bl	8004458 <lcd_rd_data>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4b73      	ldr	r3, [pc, #460]	; (8004e6c <lcd_init+0x2dc>)
 8004c9e:	889b      	ldrh	r3, [r3, #4]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	4b71      	ldr	r3, [pc, #452]	; (8004e6c <lcd_init+0x2dc>)
 8004ca6:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* Also not NT35310, try to see if it is ST7796 */
 8004ca8:	4b70      	ldr	r3, [pc, #448]	; (8004e6c <lcd_init+0x2dc>)
 8004caa:	889b      	ldrh	r3, [r3, #4]
 8004cac:	f245 3210 	movw	r2, #21264	; 0x5310
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	f000 80c0 	beq.w	8004e36 <lcd_init+0x2a6>
            {
                lcd_wr_regno(0XD3);
 8004cb6:	20d3      	movs	r0, #211	; 0xd3
 8004cb8:	f7ff fba4 	bl	8004404 <lcd_wr_regno>
                lcddev.id = lcd_rd_data();  /* dummy read */
 8004cbc:	f7ff fbcc 	bl	8004458 <lcd_rd_data>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	4b69      	ldr	r3, [pc, #420]	; (8004e6c <lcd_init+0x2dc>)
 8004cc6:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read to 0X00 */
 8004cc8:	f7ff fbc6 	bl	8004458 <lcd_rd_data>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4b66      	ldr	r3, [pc, #408]	; (8004e6c <lcd_init+0x2dc>)
 8004cd2:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* Read 0X77 */
 8004cd4:	f7ff fbc0 	bl	8004458 <lcd_rd_data>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4b63      	ldr	r3, [pc, #396]	; (8004e6c <lcd_init+0x2dc>)
 8004cde:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 8004ce0:	4b62      	ldr	r3, [pc, #392]	; (8004e6c <lcd_init+0x2dc>)
 8004ce2:	889b      	ldrh	r3, [r3, #4]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	4b60      	ldr	r3, [pc, #384]	; (8004e6c <lcd_init+0x2dc>)
 8004cea:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* Read 0X96 */
 8004cec:	f7ff fbb4 	bl	8004458 <lcd_rd_data>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4b5d      	ldr	r3, [pc, #372]	; (8004e6c <lcd_init+0x2dc>)
 8004cf6:	889b      	ldrh	r3, [r3, #4]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	4b5b      	ldr	r3, [pc, #364]	; (8004e6c <lcd_init+0x2dc>)
 8004cfe:	809a      	strh	r2, [r3, #4]

                if (lcddev.id != 0x7796)    /* Also not ST7796, try to see if it is NT35510 */
 8004d00:	4b5a      	ldr	r3, [pc, #360]	; (8004e6c <lcd_init+0x2dc>)
 8004d02:	889b      	ldrh	r3, [r3, #4]
 8004d04:	f247 7296 	movw	r2, #30614	; 0x7796
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	f000 8094 	beq.w	8004e36 <lcd_init+0x2a6>
                {
                    /* Send key (provided by manufacturer) */
                    lcd_write_reg(0xF000, 0x0055);
 8004d0e:	2155      	movs	r1, #85	; 0x55
 8004d10:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004d14:	f7ff fb8a 	bl	800442c <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 8004d18:	21aa      	movs	r1, #170	; 0xaa
 8004d1a:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004d1e:	f7ff fb85 	bl	800442c <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 8004d22:	2152      	movs	r1, #82	; 0x52
 8004d24:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004d28:	f7ff fb80 	bl	800442c <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 8004d2c:	2108      	movs	r1, #8
 8004d2e:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004d32:	f7ff fb7b 	bl	800442c <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 8004d36:	2101      	movs	r1, #1
 8004d38:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004d3c:	f7ff fb76 	bl	800442c <lcd_write_reg>

                    lcd_wr_regno(0xC500);       /* Read the lower eight bits of the ID */
 8004d40:	f44f 4045 	mov.w	r0, #50432	; 0xc500
 8004d44:	f7ff fb5e 	bl	8004404 <lcd_wr_regno>
                    lcddev.id = lcd_rd_data();  /* Read back 0x55 */
 8004d48:	f7ff fb86 	bl	8004458 <lcd_rd_data>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4b46      	ldr	r3, [pc, #280]	; (8004e6c <lcd_init+0x2dc>)
 8004d52:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8004d54:	4b45      	ldr	r3, [pc, #276]	; (8004e6c <lcd_init+0x2dc>)
 8004d56:	889b      	ldrh	r3, [r3, #4]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <lcd_init+0x2dc>)
 8004d5e:	809a      	strh	r2, [r3, #4]

                    lcd_wr_regno(0xC501);       /* Read the high eight bits of the ID */
 8004d60:	f24c 5001 	movw	r0, #50433	; 0xc501
 8004d64:	f7ff fb4e 	bl	8004404 <lcd_wr_regno>
                    lcddev.id |= lcd_rd_data(); /* Read back 0x10 */
 8004d68:	f7ff fb76 	bl	8004458 <lcd_rd_data>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	4b3e      	ldr	r3, [pc, #248]	; (8004e6c <lcd_init+0x2dc>)
 8004d72:	889b      	ldrh	r3, [r3, #4]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	4b3c      	ldr	r3, [pc, #240]	; (8004e6c <lcd_init+0x2dc>)
 8004d7a:	809a      	strh	r2, [r3, #4]

                    HAL_Delay(5);                /* Wait 5ms, because instruction 0XC501 is a software reset instruction for 1963, wait 5ms for 1963 reset to complete */
 8004d7c:	2005      	movs	r0, #5
 8004d7e:	f000 ff3b 	bl	8005bf8 <HAL_Delay>

                    if (lcddev.id != 0x5510)    /* Also not NT5510, try to see if it is ILI9806 */
 8004d82:	4b3a      	ldr	r3, [pc, #232]	; (8004e6c <lcd_init+0x2dc>)
 8004d84:	889b      	ldrh	r3, [r3, #4]
 8004d86:	f245 5210 	movw	r2, #21776	; 0x5510
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d053      	beq.n	8004e36 <lcd_init+0x2a6>
                    {
                        lcd_wr_regno(0XD3);
 8004d8e:	20d3      	movs	r0, #211	; 0xd3
 8004d90:	f7ff fb38 	bl	8004404 <lcd_wr_regno>
                        lcddev.id = lcd_rd_data();  /* dummy read */
 8004d94:	f7ff fb60 	bl	8004458 <lcd_rd_data>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <lcd_init+0x2dc>)
 8004d9e:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X00 */
 8004da0:	f7ff fb5a 	bl	8004458 <lcd_rd_data>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <lcd_init+0x2dc>)
 8004daa:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* Read back 0X98 */
 8004dac:	f7ff fb54 	bl	8004458 <lcd_rd_data>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b2d      	ldr	r3, [pc, #180]	; (8004e6c <lcd_init+0x2dc>)
 8004db6:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 8004db8:	4b2c      	ldr	r3, [pc, #176]	; (8004e6c <lcd_init+0x2dc>)
 8004dba:	889b      	ldrh	r3, [r3, #4]
 8004dbc:	021b      	lsls	r3, r3, #8
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	4b2a      	ldr	r3, [pc, #168]	; (8004e6c <lcd_init+0x2dc>)
 8004dc2:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* Read back 0X06 */
 8004dc4:	f7ff fb48 	bl	8004458 <lcd_rd_data>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b27      	ldr	r3, [pc, #156]	; (8004e6c <lcd_init+0x2dc>)
 8004dce:	889b      	ldrh	r3, [r3, #4]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <lcd_init+0x2dc>)
 8004dd6:	809a      	strh	r2, [r3, #4]

                        if (lcddev.id != 0x9806)    /* Not ILI9806 either, try to see if it's SSD1963 */
 8004dd8:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <lcd_init+0x2dc>)
 8004dda:	889b      	ldrh	r3, [r3, #4]
 8004ddc:	f649 0206 	movw	r2, #38918	; 0x9806
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d028      	beq.n	8004e36 <lcd_init+0x2a6>
                        {
                            lcd_wr_regno(0xA1);
 8004de4:	20a1      	movs	r0, #161	; 0xa1
 8004de6:	f7ff fb0d 	bl	8004404 <lcd_wr_regno>
                            lcddev.id = lcd_rd_data();
 8004dea:	f7ff fb35 	bl	8004458 <lcd_rd_data>
 8004dee:	4603      	mov	r3, r0
 8004df0:	461a      	mov	r2, r3
 8004df2:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <lcd_init+0x2dc>)
 8004df4:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* Read back 0x57 */
 8004df6:	f7ff fb2f 	bl	8004458 <lcd_rd_data>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <lcd_init+0x2dc>)
 8004e00:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 8004e02:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <lcd_init+0x2dc>)
 8004e04:	889b      	ldrh	r3, [r3, #4]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <lcd_init+0x2dc>)
 8004e0c:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* Read back 0x61 */
 8004e0e:	f7ff fb23 	bl	8004458 <lcd_rd_data>
 8004e12:	4603      	mov	r3, r0
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <lcd_init+0x2dc>)
 8004e18:	889b      	ldrh	r3, [r3, #4]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <lcd_init+0x2dc>)
 8004e20:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* The ID read back by SSD1963 is 5761H, which we force to be 1963 for convenience */
 8004e22:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <lcd_init+0x2dc>)
 8004e24:	889b      	ldrh	r3, [r3, #4]
 8004e26:	f245 7261 	movw	r2, #22369	; 0x5761
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d103      	bne.n	8004e36 <lcd_init+0x2a6>
 8004e2e:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <lcd_init+0x2dc>)
 8004e30:	f641 1263 	movw	r2, #6499	; 0x1963
 8004e34:	809a      	strh	r2, [r3, #4]
                }
            }
        }
    }

    if (lcddev.id == 0X7789)
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <lcd_init+0x2dc>)
 8004e38:	889b      	ldrh	r3, [r3, #4]
 8004e3a:	f247 7289 	movw	r2, #30601	; 0x7789
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d102      	bne.n	8004e48 <lcd_init+0x2b8>
    {
        lcd_ex_st7789_reginit();    /* Perform ST7789 initialization */
 8004e42:	f7fc fea1 	bl	8001b88 <lcd_ex_st7789_reginit>
 8004e46:	e039      	b.n	8004ebc <lcd_init+0x32c>
    }
    else if (lcddev.id == 0X9341)
 8004e48:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <lcd_init+0x2dc>)
 8004e4a:	889b      	ldrh	r3, [r3, #4]
 8004e4c:	f249 3241 	movw	r2, #37697	; 0x9341
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d102      	bne.n	8004e5a <lcd_init+0x2ca>
    {
        lcd_ex_ili9341_reginit();   /* Perform ILI9341 initialization */
 8004e54:	f7fc ff6e 	bl	8001d34 <lcd_ex_ili9341_reginit>
 8004e58:	e030      	b.n	8004ebc <lcd_init+0x32c>
    }
    else if (lcddev.id == 0x5310)
 8004e5a:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <lcd_init+0x2dc>)
 8004e5c:	889b      	ldrh	r3, [r3, #4]
 8004e5e:	f245 3210 	movw	r2, #21264	; 0x5310
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d104      	bne.n	8004e70 <lcd_init+0x2e0>
    {
        lcd_ex_nt35310_reginit();   /* Perform NT35310 initialization */
 8004e66:	f7fd f87d 	bl	8001f64 <lcd_ex_nt35310_reginit>
 8004e6a:	e027      	b.n	8004ebc <lcd_init+0x32c>
 8004e6c:	200001b8 	.word	0x200001b8
    }
    else if (lcddev.id == 0x7796)
 8004e70:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <lcd_init+0x348>)
 8004e72:	889b      	ldrh	r3, [r3, #4]
 8004e74:	f247 7296 	movw	r2, #30614	; 0x7796
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d102      	bne.n	8004e82 <lcd_init+0x2f2>
    {
        lcd_ex_st7796_reginit();    /* Perform ST7796 initialization */
 8004e7c:	f7fd ffed 	bl	8002e5a <lcd_ex_st7796_reginit>
 8004e80:	e01c      	b.n	8004ebc <lcd_init+0x32c>
    }
    else if (lcddev.id == 0x5510)
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <lcd_init+0x348>)
 8004e84:	889b      	ldrh	r3, [r3, #4]
 8004e86:	f245 5210 	movw	r2, #21776	; 0x5510
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d102      	bne.n	8004e94 <lcd_init+0x304>
    {
        lcd_ex_nt35510_reginit();   /* Perform NT35510 initialization */
 8004e8e:	f7fe f8c9 	bl	8003024 <lcd_ex_nt35510_reginit>
 8004e92:	e013      	b.n	8004ebc <lcd_init+0x32c>
    }
    else if (lcddev.id == 0x9806)
 8004e94:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <lcd_init+0x348>)
 8004e96:	889b      	ldrh	r3, [r3, #4]
 8004e98:	f649 0206 	movw	r2, #38918	; 0x9806
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d102      	bne.n	8004ea6 <lcd_init+0x316>
    {
        lcd_ex_ili9806_reginit();   /* Perform ILI9806 initialization */
 8004ea0:	f7ff f840 	bl	8003f24 <lcd_ex_ili9806_reginit>
 8004ea4:	e00a      	b.n	8004ebc <lcd_init+0x32c>
    }
    else if (lcddev.id == 0x1963)
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <lcd_init+0x348>)
 8004ea8:	889b      	ldrh	r3, [r3, #4]
 8004eaa:	f641 1263 	movw	r2, #6499	; 0x1963
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d104      	bne.n	8004ebc <lcd_init+0x32c>
    {
        lcd_ex_ssd1963_reginit();   /* Perform SSD1963 initialization */
 8004eb2:	f7ff f9d9 	bl	8004268 <lcd_ex_ssd1963_reginit>
        lcd_ssd_backlight_set(100); /* The backlight is set to its brightest */
 8004eb6:	2064      	movs	r0, #100	; 0x64
 8004eb8:	f7ff fd5e 	bl	8004978 <lcd_ssd_backlight_set>
    }

    lcd_display_dir(0); /* Portrait is the default */
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f7ff fd8f 	bl	80049e0 <lcd_display_dir>
    LCD_BL(1);          /* Light up the backlight */
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	2120      	movs	r1, #32
 8004ec6:	4805      	ldr	r0, [pc, #20]	; (8004edc <lcd_init+0x34c>)
 8004ec8:	f001 fa9e 	bl	8006408 <HAL_GPIO_WritePin>
    lcd_clear(WHITE);
 8004ecc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004ed0:	f000 f806 	bl	8004ee0 <lcd_clear>
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	200001b8 	.word	0x200001b8
 8004edc:	40010c00 	.word	0x40010c00

08004ee0 <lcd_clear>:
 * @brief   Screen clearing function
 * @param   color : To clear the screen color
 * @retval  None.
 */
void lcd_clear(uint16_t color)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]

    totalpoint = lcddev.width * lcddev.height;    /* Get the total points */
 8004ef2:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <lcd_clear+0x54>)
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <lcd_clear+0x54>)
 8004efa:	885b      	ldrh	r3, [r3, #2]
 8004efc:	fb02 f303 	mul.w	r3, r2, r3
 8004f00:	60bb      	str	r3, [r7, #8]
    lcd_set_cursor(0x00, 0x0000);   /* Sets the cursor position */
 8004f02:	2100      	movs	r1, #0
 8004f04:	2000      	movs	r0, #0
 8004f06:	f7ff fac5 	bl	8004494 <lcd_set_cursor>
    lcd_write_ram_prepare();        /* Start writing GRAM */
 8004f0a:	f7ff fab5 	bl	8004478 <lcd_write_ram_prepare>

    for (index = 0; index < totalpoint; index++)
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	e005      	b.n	8004f20 <lcd_clear+0x40>
    {
        LCD->LCD_RAM = color;
 8004f14:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <lcd_clear+0x58>)
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d3f5      	bcc.n	8004f14 <lcd_clear+0x34>
   }
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	200001b8 	.word	0x200001b8
 8004f38:	600ffffe 	.word	0x600ffffe

08004f3c <lcd_show_char>:
 * @param   mode  : Overlay mode (1); Non-superposition (0);
 * @param   color : The color of the character;
 * @retval  None.
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8004f3c:	b590      	push	{r4, r7, lr}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4604      	mov	r4, r0
 8004f44:	4608      	mov	r0, r1
 8004f46:	4611      	mov	r1, r2
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	80fb      	strh	r3, [r7, #6]
 8004f4e:	4603      	mov	r3, r0
 8004f50:	80bb      	strh	r3, [r7, #4]
 8004f52:	460b      	mov	r3, r1
 8004f54:	70fb      	strb	r3, [r7, #3]
 8004f56:	4613      	mov	r3, r2
 8004f58:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8004f5a:	88bb      	ldrh	r3, [r7, #4]
 8004f5c:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]

    csize = ((size >> 3) + (((size & 0x7) != 0) ? 1 : 0)) * (size >> 1); /* Get the number of bytes of a font character corresponding to the dot matrix set */
 8004f66:	78bb      	ldrb	r3, [r7, #2]
 8004f68:	08db      	lsrs	r3, r3, #3
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	78bb      	ldrb	r3, [r7, #2]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf14      	ite	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	2300      	moveq	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	4413      	add	r3, r2
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	78ba      	ldrb	r2, [r7, #2]
 8004f84:	0852      	lsrs	r2, r2, #1
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	fb02 f303 	mul.w	r3, r2, r3
 8004f8c:	737b      	strb	r3, [r7, #13]
    chr -= ' ';    /* Get the offset value (ASCII fonts start modulo Spaces, so - "is the font for the corresponding character) */
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	3b20      	subs	r3, #32
 8004f92:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8004f94:	78bb      	ldrb	r3, [r7, #2]
 8004f96:	3b0c      	subs	r3, #12
 8004f98:	2b14      	cmp	r3, #20
 8004f9a:	f200 809a 	bhi.w	80050d2 <lcd_show_char+0x196>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <lcd_show_char+0x68>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004ff9 	.word	0x08004ff9
 8004fa8:	080050d3 	.word	0x080050d3
 8004fac:	080050d3 	.word	0x080050d3
 8004fb0:	080050d3 	.word	0x080050d3
 8004fb4:	0800500b 	.word	0x0800500b
 8004fb8:	080050d3 	.word	0x080050d3
 8004fbc:	080050d3 	.word	0x080050d3
 8004fc0:	080050d3 	.word	0x080050d3
 8004fc4:	080050d3 	.word	0x080050d3
 8004fc8:	080050d3 	.word	0x080050d3
 8004fcc:	080050d3 	.word	0x080050d3
 8004fd0:	080050d3 	.word	0x080050d3
 8004fd4:	08005017 	.word	0x08005017
 8004fd8:	080050d3 	.word	0x080050d3
 8004fdc:	080050d3 	.word	0x080050d3
 8004fe0:	080050d3 	.word	0x080050d3
 8004fe4:	080050d3 	.word	0x080050d3
 8004fe8:	080050d3 	.word	0x080050d3
 8004fec:	080050d3 	.word	0x080050d3
 8004ff0:	080050d3 	.word	0x080050d3
 8004ff4:	08005029 	.word	0x08005029
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[(uint8_t)chr];  /* Call 1206 font */
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4a37      	ldr	r2, [pc, #220]	; (80050e0 <lcd_show_char+0x1a4>)
 8005004:	4413      	add	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
            break;
 8005008:	e014      	b.n	8005034 <lcd_show_char+0xf8>

        case 16:
            pfont = (uint8_t *)asc2_1608[(uint8_t)chr];  /* Call 1608 font */
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	4a35      	ldr	r2, [pc, #212]	; (80050e4 <lcd_show_char+0x1a8>)
 8005010:	4413      	add	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
            break;
 8005014:	e00e      	b.n	8005034 <lcd_show_char+0xf8>

        case 24:
            pfont = (uint8_t *)asc2_2412[(uint8_t)chr];  /* Call 2412 font */
 8005016:	78fa      	ldrb	r2, [r7, #3]
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4a31      	ldr	r2, [pc, #196]	; (80050e8 <lcd_show_char+0x1ac>)
 8005022:	4413      	add	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
            break;
 8005026:	e005      	b.n	8005034 <lcd_show_char+0xf8>

        case 32:
            pfont = (uint8_t *)asc2_3216[(uint8_t)chr];  /* Call 3216 font */
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	019b      	lsls	r3, r3, #6
 800502c:	4a2f      	ldr	r2, [pc, #188]	; (80050ec <lcd_show_char+0x1b0>)
 800502e:	4413      	add	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
            break;
 8005032:	bf00      	nop

        default:
            return ;
    }

    y0 = y;
 8005034:	88bb      	ldrh	r3, [r7, #4]
 8005036:	81fb      	strh	r3, [r7, #14]
    for (t = 0; t < csize; t++)
 8005038:	2300      	movs	r3, #0
 800503a:	757b      	strb	r3, [r7, #21]
 800503c:	e044      	b.n	80050c8 <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* Retrieves the dot matrix data of the character */
 800503e:	7d7b      	ldrb	r3, [r7, #21]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 8005048:	2300      	movs	r3, #0
 800504a:	75bb      	strb	r3, [r7, #22]
 800504c:	e034      	b.n	80050b8 <lcd_show_char+0x17c>
        {
            if ((temp & 0x80) != 0)        /* Valid points, need to be displayed */
 800504e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005052:	2b00      	cmp	r3, #0
 8005054:	da06      	bge.n	8005064 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* Let me draw the dot, let me show the dot */
 8005056:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005058:	88b9      	ldrh	r1, [r7, #4]
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fc71 	bl	8004944 <lcd_draw_point>
 8005062:	e00a      	b.n	800507a <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* Invalid point, not shown */
 8005064:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* Drawing the background color is equivalent to not showing the point (note that the background color is controlled by a global variable). */
 800506c:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <lcd_show_char+0x1b4>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	88b9      	ldrh	r1, [r7, #4]
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fc65 	bl	8004944 <lcd_draw_point>
            }

            temp <<= 1; /* Shift in order to get the state of the next bit */
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	75fb      	strb	r3, [r7, #23]
            y++;
 8005080:	88bb      	ldrh	r3, [r7, #4]
 8005082:	3301      	adds	r3, #1
 8005084:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* Hyper region */
 8005086:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <lcd_show_char+0x1b8>)
 8005088:	885b      	ldrh	r3, [r3, #2]
 800508a:	88ba      	ldrh	r2, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d222      	bcs.n	80050d6 <lcd_show_char+0x19a>

            if ((y - y0) == size)
 8005090:	88ba      	ldrh	r2, [r7, #4]
 8005092:	89fb      	ldrh	r3, [r7, #14]
 8005094:	1ad2      	subs	r2, r2, r3
 8005096:	78bb      	ldrb	r3, [r7, #2]
 8005098:	429a      	cmp	r2, r3
 800509a:	d10a      	bne.n	80050b2 <lcd_show_char+0x176>
            {
                y = y0;          /* y coordinate reset */
 800509c:	89fb      	ldrh	r3, [r7, #14]
 800509e:	80bb      	strh	r3, [r7, #4]
                x++;             /* The x-coordinate is increasing */
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	3301      	adds	r3, #1
 80050a4:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <lcd_show_char+0x1b8>)
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d307      	bcc.n	80050c0 <lcd_show_char+0x184>
                {
                    return;     /* The x-coordinate hyperregion */
 80050b0:	e012      	b.n	80050d8 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)  /* There are 8 points in a byte */
 80050b2:	7dbb      	ldrb	r3, [r7, #22]
 80050b4:	3301      	adds	r3, #1
 80050b6:	75bb      	strb	r3, [r7, #22]
 80050b8:	7dbb      	ldrb	r3, [r7, #22]
 80050ba:	2b07      	cmp	r3, #7
 80050bc:	d9c7      	bls.n	800504e <lcd_show_char+0x112>
 80050be:	e000      	b.n	80050c2 <lcd_show_char+0x186>
                }

                break;
 80050c0:	bf00      	nop
    for (t = 0; t < csize; t++)
 80050c2:	7d7b      	ldrb	r3, [r7, #21]
 80050c4:	3301      	adds	r3, #1
 80050c6:	757b      	strb	r3, [r7, #21]
 80050c8:	7d7a      	ldrb	r2, [r7, #21]
 80050ca:	7b7b      	ldrb	r3, [r7, #13]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d3b6      	bcc.n	800503e <lcd_show_char+0x102>
 80050d0:	e002      	b.n	80050d8 <lcd_show_char+0x19c>
            return ;
 80050d2:	bf00      	nop
 80050d4:	e000      	b.n	80050d8 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* Hyper region */
 80050d6:	bf00      	nop
            }
        }
    }
}
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd90      	pop	{r4, r7, pc}
 80050de:	bf00      	nop
 80050e0:	080099cc 	.word	0x080099cc
 80050e4:	08009e40 	.word	0x08009e40
 80050e8:	0800a430 	.word	0x0800a430
 80050ec:	0800b18c 	.word	0x0800b18c
 80050f0:	20000130 	.word	0x20000130
 80050f4:	200001b8 	.word	0x200001b8

080050f8 <lcd_show_string>:
 * @param   p            : The first address of the string
 * @param   color        : The color of the string;
 * @retval  None
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 80050f8:	b590      	push	{r4, r7, lr}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4623      	mov	r3, r4
 8005108:	80fb      	strh	r3, [r7, #6]
 800510a:	4603      	mov	r3, r0
 800510c:	80bb      	strh	r3, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	807b      	strh	r3, [r7, #2]
 8005112:	4613      	mov	r3, r2
 8005114:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	73fb      	strb	r3, [r7, #15]
    width += x;
 800511a:	887a      	ldrh	r2, [r7, #2]
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	4413      	add	r3, r2
 8005120:	807b      	strh	r3, [r7, #2]
    height += y;
 8005122:	883a      	ldrh	r2, [r7, #0]
 8005124:	88bb      	ldrh	r3, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 800512a:	e027      	b.n	800517c <lcd_show_string+0x84>
    {
        if (x >= width)
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	887b      	ldrh	r3, [r7, #2]
 8005130:	429a      	cmp	r2, r3
 8005132:	d307      	bcc.n	8005144 <lcd_show_string+0x4c>
        {
            x = x0;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	80fb      	strh	r3, [r7, #6]
            y += size;
 8005138:	f897 3020 	ldrb.w	r3, [r7, #32]
 800513c:	b29a      	uxth	r2, r3
 800513e:	88bb      	ldrh	r3, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* quit */
 8005144:	88ba      	ldrh	r2, [r7, #4]
 8005146:	883b      	ldrh	r3, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d220      	bcs.n	800518e <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	f897 4020 	ldrb.w	r4, [r7, #32]
 8005154:	88b9      	ldrh	r1, [r7, #4]
 8005156:	88f8      	ldrh	r0, [r7, #6]
 8005158:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	2300      	movs	r3, #0
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	4623      	mov	r3, r4
 8005162:	f7ff feeb 	bl	8004f3c <lcd_show_char>
        x += size / 2;
 8005166:	f897 3020 	ldrb.w	r3, [r7, #32]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	b29a      	uxth	r2, r3
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	4413      	add	r3, r2
 8005174:	80fb      	strh	r3, [r7, #6]
        p++;
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	3301      	adds	r3, #1
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
    while ((*p <= '~') && (*p >= ' '))   /* Check whether it is an illegal character! */
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b7e      	cmp	r3, #126	; 0x7e
 8005182:	d805      	bhi.n	8005190 <lcd_show_string+0x98>
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b1f      	cmp	r3, #31
 800518a:	d8cf      	bhi.n	800512c <lcd_show_string+0x34>
    }
}
 800518c:	e000      	b.n	8005190 <lcd_show_string+0x98>
        if (y >= height)break;  /* quit */
 800518e:	bf00      	nop
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	bd90      	pop	{r4, r7, pc}

08005198 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08e      	sub	sp, #56	; 0x38
 800519c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800519e:	f107 031c 	add.w	r3, r7, #28
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	609a      	str	r2, [r3, #8]
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	611a      	str	r2, [r3, #16]
 80051ae:	615a      	str	r2, [r3, #20]
 80051b0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80051b2:	463b      	mov	r3, r7
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	605a      	str	r2, [r3, #4]
 80051ba:	609a      	str	r2, [r3, #8]
 80051bc:	60da      	str	r2, [r3, #12]
 80051be:	611a      	str	r2, [r3, #16]
 80051c0:	615a      	str	r2, [r3, #20]
 80051c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80051c4:	4b30      	ldr	r3, [pc, #192]	; (8005288 <MX_FSMC_Init+0xf0>)
 80051c6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80051ca:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80051cc:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <MX_FSMC_Init+0xf0>)
 80051ce:	4a2f      	ldr	r2, [pc, #188]	; (800528c <MX_FSMC_Init+0xf4>)
 80051d0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80051d2:	4b2d      	ldr	r3, [pc, #180]	; (8005288 <MX_FSMC_Init+0xf0>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80051d8:	4b2b      	ldr	r3, [pc, #172]	; (8005288 <MX_FSMC_Init+0xf0>)
 80051da:	2200      	movs	r2, #0
 80051dc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80051de:	4b2a      	ldr	r3, [pc, #168]	; (8005288 <MX_FSMC_Init+0xf0>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80051e4:	4b28      	ldr	r3, [pc, #160]	; (8005288 <MX_FSMC_Init+0xf0>)
 80051e6:	2210      	movs	r2, #16
 80051e8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80051ea:	4b27      	ldr	r3, [pc, #156]	; (8005288 <MX_FSMC_Init+0xf0>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80051f0:	4b25      	ldr	r3, [pc, #148]	; (8005288 <MX_FSMC_Init+0xf0>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <MX_FSMC_Init+0xf0>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80051fc:	4b22      	ldr	r3, [pc, #136]	; (8005288 <MX_FSMC_Init+0xf0>)
 80051fe:	2200      	movs	r2, #0
 8005200:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8005202:	4b21      	ldr	r3, [pc, #132]	; (8005288 <MX_FSMC_Init+0xf0>)
 8005204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005208:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800520a:	4b1f      	ldr	r3, [pc, #124]	; (8005288 <MX_FSMC_Init+0xf0>)
 800520c:	2200      	movs	r2, #0
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8005210:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <MX_FSMC_Init+0xf0>)
 8005212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8005218:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <MX_FSMC_Init+0xf0>)
 800521a:	2200      	movs	r2, #0
 800521c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800521e:	4b1a      	ldr	r3, [pc, #104]	; (8005288 <MX_FSMC_Init+0xf0>)
 8005220:	2200      	movs	r2, #0
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8005228:	230f      	movs	r3, #15
 800522a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 800522c:	230f      	movs	r3, #15
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8005230:	230f      	movs	r3, #15
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8005234:	2310      	movs	r3, #16
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8005238:	2311      	movs	r3, #17
 800523a:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800523c:	2300      	movs	r3, #0
 800523e:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8005244:	230f      	movs	r3, #15
 8005246:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 1;
 8005248:	2301      	movs	r3, #1
 800524a:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 800524c:	230f      	movs	r3, #15
 800524e:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8005250:	2310      	movs	r3, #16
 8005252:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8005254:	2311      	movs	r3, #17
 8005256:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8005258:	2300      	movs	r3, #0
 800525a:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800525c:	463a      	mov	r2, r7
 800525e:	f107 031c 	add.w	r3, r7, #28
 8005262:	4619      	mov	r1, r3
 8005264:	4808      	ldr	r0, [pc, #32]	; (8005288 <MX_FSMC_Init+0xf0>)
 8005266:	f001 fd11 	bl	8006c8c <HAL_SRAM_Init>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8005270:	f000 f9c1 	bl	80055f6 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8005274:	4b06      	ldr	r3, [pc, #24]	; (8005290 <MX_FSMC_Init+0xf8>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4a05      	ldr	r2, [pc, #20]	; (8005290 <MX_FSMC_Init+0xf8>)
 800527a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800527e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8005280:	bf00      	nop
 8005282:	3738      	adds	r7, #56	; 0x38
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	200001c8 	.word	0x200001c8
 800528c:	a0000104 	.word	0xa0000104
 8005290:	40010000 	.word	0x40010000

08005294 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800529a:	f107 0308 	add.w	r3, r7, #8
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	605a      	str	r2, [r3, #4]
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80052a8:	4b18      	ldr	r3, [pc, #96]	; (800530c <HAL_FSMC_MspInit+0x78>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d129      	bne.n	8005304 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80052b0:	4b16      	ldr	r3, [pc, #88]	; (800530c <HAL_FSMC_MspInit+0x78>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80052b6:	4b16      	ldr	r3, [pc, #88]	; (8005310 <HAL_FSMC_MspInit+0x7c>)
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	4a15      	ldr	r2, [pc, #84]	; (8005310 <HAL_FSMC_MspInit+0x7c>)
 80052bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c0:	6153      	str	r3, [r2, #20]
 80052c2:	4b13      	ldr	r3, [pc, #76]	; (8005310 <HAL_FSMC_MspInit+0x7c>)
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80052ce:	f64f 7388 	movw	r3, #65416	; 0xff88
 80052d2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d4:	2302      	movs	r3, #2
 80052d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052d8:	2303      	movs	r3, #3
 80052da:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	4619      	mov	r1, r3
 80052e2:	480c      	ldr	r0, [pc, #48]	; (8005314 <HAL_FSMC_MspInit+0x80>)
 80052e4:	f000 fefc 	bl	80060e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80052e8:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80052ec:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ee:	2302      	movs	r3, #2
 80052f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052f2:	2303      	movs	r3, #3
 80052f4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4619      	mov	r1, r3
 80052fc:	4806      	ldr	r0, [pc, #24]	; (8005318 <HAL_FSMC_MspInit+0x84>)
 80052fe:	f000 feef 	bl	80060e0 <HAL_GPIO_Init>
 8005302:	e000      	b.n	8005306 <HAL_FSMC_MspInit+0x72>
    return;
 8005304:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000210 	.word	0x20000210
 8005310:	40021000 	.word	0x40021000
 8005314:	40011800 	.word	0x40011800
 8005318:	40011400 	.word	0x40011400

0800531c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005324:	f7ff ffb6 	bl	8005294 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005336:	f107 0318 	add.w	r3, r7, #24
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	605a      	str	r2, [r3, #4]
 8005340:	609a      	str	r2, [r3, #8]
 8005342:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005344:	4b39      	ldr	r3, [pc, #228]	; (800542c <MX_GPIO_Init+0xfc>)
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	4a38      	ldr	r2, [pc, #224]	; (800542c <MX_GPIO_Init+0xfc>)
 800534a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534e:	6193      	str	r3, [r2, #24]
 8005350:	4b36      	ldr	r3, [pc, #216]	; (800542c <MX_GPIO_Init+0xfc>)
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800535c:	4b33      	ldr	r3, [pc, #204]	; (800542c <MX_GPIO_Init+0xfc>)
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	4a32      	ldr	r2, [pc, #200]	; (800542c <MX_GPIO_Init+0xfc>)
 8005362:	f043 0310 	orr.w	r3, r3, #16
 8005366:	6193      	str	r3, [r2, #24]
 8005368:	4b30      	ldr	r3, [pc, #192]	; (800542c <MX_GPIO_Init+0xfc>)
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005374:	4b2d      	ldr	r3, [pc, #180]	; (800542c <MX_GPIO_Init+0xfc>)
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	4a2c      	ldr	r2, [pc, #176]	; (800542c <MX_GPIO_Init+0xfc>)
 800537a:	f043 0304 	orr.w	r3, r3, #4
 800537e:	6193      	str	r3, [r2, #24]
 8005380:	4b2a      	ldr	r3, [pc, #168]	; (800542c <MX_GPIO_Init+0xfc>)
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800538c:	4b27      	ldr	r3, [pc, #156]	; (800542c <MX_GPIO_Init+0xfc>)
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	4a26      	ldr	r2, [pc, #152]	; (800542c <MX_GPIO_Init+0xfc>)
 8005392:	f043 0320 	orr.w	r3, r3, #32
 8005396:	6193      	str	r3, [r2, #24]
 8005398:	4b24      	ldr	r3, [pc, #144]	; (800542c <MX_GPIO_Init+0xfc>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053a4:	4b21      	ldr	r3, [pc, #132]	; (800542c <MX_GPIO_Init+0xfc>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	4a20      	ldr	r2, [pc, #128]	; (800542c <MX_GPIO_Init+0xfc>)
 80053aa:	f043 0308 	orr.w	r3, r3, #8
 80053ae:	6193      	str	r3, [r2, #24]
 80053b0:	4b1e      	ldr	r3, [pc, #120]	; (800542c <MX_GPIO_Init+0xfc>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 80053bc:	2201      	movs	r2, #1
 80053be:	2160      	movs	r1, #96	; 0x60
 80053c0:	481b      	ldr	r0, [pc, #108]	; (8005430 <MX_GPIO_Init+0x100>)
 80053c2:	f001 f821 	bl	8006408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80053c6:	2201      	movs	r2, #1
 80053c8:	2120      	movs	r1, #32
 80053ca:	481a      	ldr	r0, [pc, #104]	; (8005434 <MX_GPIO_Init+0x104>)
 80053cc:	f001 f81c 	bl	8006408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80053d0:	2360      	movs	r3, #96	; 0x60
 80053d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053d4:	2301      	movs	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053d8:	2301      	movs	r3, #1
 80053da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053dc:	2303      	movs	r3, #3
 80053de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80053e0:	f107 0318 	add.w	r3, r7, #24
 80053e4:	4619      	mov	r1, r3
 80053e6:	4812      	ldr	r0, [pc, #72]	; (8005430 <MX_GPIO_Init+0x100>)
 80053e8:	f000 fe7a 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = WK_UP_Pin|KEY0_Pin;
 80053ec:	f248 0301 	movw	r3, #32769	; 0x8001
 80053f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80053f6:	2302      	movs	r3, #2
 80053f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fa:	f107 0318 	add.w	r3, r7, #24
 80053fe:	4619      	mov	r1, r3
 8005400:	480d      	ldr	r0, [pc, #52]	; (8005438 <MX_GPIO_Init+0x108>)
 8005402:	f000 fe6d 	bl	80060e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8005406:	2320      	movs	r3, #32
 8005408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800540a:	2301      	movs	r3, #1
 800540c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800540e:	2301      	movs	r3, #1
 8005410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005412:	2303      	movs	r3, #3
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8005416:	f107 0318 	add.w	r3, r7, #24
 800541a:	4619      	mov	r1, r3
 800541c:	4805      	ldr	r0, [pc, #20]	; (8005434 <MX_GPIO_Init+0x104>)
 800541e:	f000 fe5f 	bl	80060e0 <HAL_GPIO_Init>

}
 8005422:	bf00      	nop
 8005424:	3728      	adds	r7, #40	; 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40021000 	.word	0x40021000
 8005430:	40011800 	.word	0x40011800
 8005434:	40010c00 	.word	0x40010c00
 8005438:	40010800 	.word	0x40010800

0800543c <led_set>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* LED state setting function */
void led_set(uint8_t sta)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	71fb      	strb	r3, [r7, #7]
    LED1(sta);
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <led_set+0x1c>
 800544c:	2201      	movs	r2, #1
 800544e:	2140      	movs	r1, #64	; 0x40
 8005450:	4806      	ldr	r0, [pc, #24]	; (800546c <led_set+0x30>)
 8005452:	f000 ffd9 	bl	8006408 <HAL_GPIO_WritePin>
}
 8005456:	e004      	b.n	8005462 <led_set+0x26>
    LED1(sta);
 8005458:	2200      	movs	r2, #0
 800545a:	2140      	movs	r1, #64	; 0x40
 800545c:	4803      	ldr	r0, [pc, #12]	; (800546c <led_set+0x30>)
 800545e:	f000 ffd3 	bl	8006408 <HAL_GPIO_WritePin>
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40011800 	.word	0x40011800

08005470 <test_fun>:

/* Function arguments call the test function */
void test_fun(void(*ledset)(uint8_t), uint8_t sta)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	70fb      	strb	r3, [r7, #3]
    ledset(sta);
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4610      	mov	r0, r2
 8005482:	4798      	blx	r3
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <stm32f103ve_show_mesg>:
 * @brief   Displays information about the experiment
 * @param   None
 * @retval  None
 */
void stm32f103ve_show_mesg(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
	/* The serial port outputs the experimental information */
	printf("\n");
 8005490:	200a      	movs	r0, #10
 8005492:	f002 ff5d 	bl	8008350 <putchar>
	printf("********************************\r\n");
 8005496:	480a      	ldr	r0, [pc, #40]	; (80054c0 <stm32f103ve_show_mesg+0x34>)
 8005498:	f002 ffb6 	bl	8008408 <puts>
	printf("STM32F103\r\n");
 800549c:	4809      	ldr	r0, [pc, #36]	; (80054c4 <stm32f103ve_show_mesg+0x38>)
 800549e:	f002 ffb3 	bl	8008408 <puts>
	printf("USMART Test\r\n");
 80054a2:	4809      	ldr	r0, [pc, #36]	; (80054c8 <stm32f103ve_show_mesg+0x3c>)
 80054a4:	f002 ffb0 	bl	8008408 <puts>
	printf("ATOM@ALIENTEK\r\n");
 80054a8:	4808      	ldr	r0, [pc, #32]	; (80054cc <stm32f103ve_show_mesg+0x40>)
 80054aa:	f002 ffad 	bl	8008408 <puts>
	printf("********************************\r\n");
 80054ae:	4804      	ldr	r0, [pc, #16]	; (80054c0 <stm32f103ve_show_mesg+0x34>)
 80054b0:	f002 ffaa 	bl	8008408 <puts>
	printf("\r\n");
 80054b4:	4806      	ldr	r0, [pc, #24]	; (80054d0 <stm32f103ve_show_mesg+0x44>)
 80054b6:	f002 ffa7 	bl	8008408 <puts>
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	08009954 	.word	0x08009954
 80054c4:	08009978 	.word	0x08009978
 80054c8:	08009984 	.word	0x08009984
 80054cc:	08009994 	.word	0x08009994
 80054d0:	080099a4 	.word	0x080099a4

080054d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054da:	f000 fb2b 	bl	8005b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80054de:	f000 f845 	bl	800556c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80054e2:	f7ff ff25 	bl	8005330 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80054e6:	f000 fa21 	bl	800592c <MX_USART1_UART_Init>
  MX_FSMC_Init();
 80054ea:	f7ff fe55 	bl	8005198 <MX_FSMC_Init>
  MX_TIM4_Init();
 80054ee:	f000 f993 	bl	8005818 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();                                         /* Initialize LCD */
 80054f2:	f7ff fb4d 	bl	8004b90 <lcd_init>
  stm32f103ve_show_mesg();
 80054f6:	f7ff ffc9 	bl	800548c <stm32f103ve_show_mesg>
  lcd_show_string(30, 50, 200, 16, 16, "STM32", RED);
 80054fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80054fe:	9302      	str	r3, [sp, #8]
 8005500:	4b16      	ldr	r3, [pc, #88]	; (800555c <main+0x88>)
 8005502:	9301      	str	r3, [sp, #4]
 8005504:	2310      	movs	r3, #16
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	2310      	movs	r3, #16
 800550a:	22c8      	movs	r2, #200	; 0xc8
 800550c:	2132      	movs	r1, #50	; 0x32
 800550e:	201e      	movs	r0, #30
 8005510:	f7ff fdf2 	bl	80050f8 <lcd_show_string>
  lcd_show_string(30, 70, 200, 16, 16, "USMART TEST", RED);
 8005514:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005518:	9302      	str	r3, [sp, #8]
 800551a:	4b11      	ldr	r3, [pc, #68]	; (8005560 <main+0x8c>)
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	2310      	movs	r3, #16
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	2310      	movs	r3, #16
 8005524:	22c8      	movs	r2, #200	; 0xc8
 8005526:	2146      	movs	r1, #70	; 0x46
 8005528:	201e      	movs	r0, #30
 800552a:	f7ff fde5 	bl	80050f8 <lcd_show_string>
  lcd_show_string(30, 90, 200, 16, 16, "ATOM@ALIENTEK", RED);
 800552e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005532:	9302      	str	r3, [sp, #8]
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <main+0x90>)
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	2310      	movs	r3, #16
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	2310      	movs	r3, #16
 800553e:	22c8      	movs	r2, #200	; 0xc8
 8005540:	215a      	movs	r1, #90	; 0x5a
 8005542:	201e      	movs	r0, #30
 8005544:	f7ff fdd8 	bl	80050f8 <lcd_show_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	LED0_TOGGLE();        /* flashing LED0 indicates that the system is running */
 8005548:	2120      	movs	r1, #32
 800554a:	4807      	ldr	r0, [pc, #28]	; (8005568 <main+0x94>)
 800554c:	f000 ff74 	bl	8006438 <HAL_GPIO_TogglePin>
	HAL_Delay(500);       /* delay 500ms */
 8005550:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005554:	f000 fb50 	bl	8005bf8 <HAL_Delay>
	LED0_TOGGLE();        /* flashing LED0 indicates that the system is running */
 8005558:	e7f6      	b.n	8005548 <main+0x74>
 800555a:	bf00      	nop
 800555c:	080099a8 	.word	0x080099a8
 8005560:	080099b0 	.word	0x080099b0
 8005564:	080099bc 	.word	0x080099bc
 8005568:	40011800 	.word	0x40011800

0800556c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b090      	sub	sp, #64	; 0x40
 8005570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005572:	f107 0318 	add.w	r3, r7, #24
 8005576:	2228      	movs	r2, #40	; 0x28
 8005578:	2100      	movs	r1, #0
 800557a:	4618      	mov	r0, r3
 800557c:	f003 f824 	bl	80085c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	605a      	str	r2, [r3, #4]
 8005588:	609a      	str	r2, [r3, #8]
 800558a:	60da      	str	r2, [r3, #12]
 800558c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800558e:	2301      	movs	r3, #1
 8005590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005598:	2300      	movs	r3, #0
 800559a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800559c:	2301      	movs	r3, #1
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055a0:	2302      	movs	r3, #2
 80055a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80055aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055b0:	f107 0318 	add.w	r3, r7, #24
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 ff59 	bl	800646c <HAL_RCC_OscConfig>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80055c0:	f000 f819 	bl	80055f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055c4:	230f      	movs	r3, #15
 80055c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055c8:	2302      	movs	r3, #2
 80055ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80055d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	2102      	movs	r1, #2
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 f9c6 	bl	8006970 <HAL_RCC_ClockConfig>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80055ea:	f000 f804 	bl	80055f6 <Error_Handler>
  }
}
 80055ee:	bf00      	nop
 80055f0:	3740      	adds	r7, #64	; 0x40
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055fa:	b672      	cpsid	i
}
 80055fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80055fe:	e7fe      	b.n	80055fe <Error_Handler+0x8>

08005600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005606:	4b16      	ldr	r3, [pc, #88]	; (8005660 <HAL_MspInit+0x60>)
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	4a15      	ldr	r2, [pc, #84]	; (8005660 <HAL_MspInit+0x60>)
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	6193      	str	r3, [r2, #24]
 8005612:	4b13      	ldr	r3, [pc, #76]	; (8005660 <HAL_MspInit+0x60>)
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	60bb      	str	r3, [r7, #8]
 800561c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <HAL_MspInit+0x60>)
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4a0f      	ldr	r2, [pc, #60]	; (8005660 <HAL_MspInit+0x60>)
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005628:	61d3      	str	r3, [r2, #28]
 800562a:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <HAL_MspInit+0x60>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005632:	607b      	str	r3, [r7, #4]
 8005634:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8005636:	2005      	movs	r0, #5
 8005638:	f000 fbce 	bl	8005dd8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800563c:	4b09      	ldr	r3, [pc, #36]	; (8005664 <HAL_MspInit+0x64>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	4a04      	ldr	r2, [pc, #16]	; (8005664 <HAL_MspInit+0x64>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40021000 	.word	0x40021000
 8005664:	40010000 	.word	0x40010000

08005668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800566c:	e7fe      	b.n	800566c <NMI_Handler+0x4>

0800566e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800566e:	b480      	push	{r7}
 8005670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005672:	e7fe      	b.n	8005672 <HardFault_Handler+0x4>

08005674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005678:	e7fe      	b.n	8005678 <MemManage_Handler+0x4>

0800567a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800567e:	e7fe      	b.n	800567e <BusFault_Handler+0x4>

08005680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005684:	e7fe      	b.n	8005684 <UsageFault_Handler+0x4>

08005686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005686:	b480      	push	{r7}
 8005688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800568a:	bf00      	nop
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005692:	b480      	push	{r7}
 8005694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800569e:	b480      	push	{r7}
 80056a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056a2:	bf00      	nop
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr

080056aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056ae:	f000 fa87 	bl	8005bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80056bc:	4802      	ldr	r0, [pc, #8]	; (80056c8 <USART1_IRQHandler+0x10>)
 80056be:	f001 ff1d 	bl	80074fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000330 	.word	0x20000330

080056cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e00a      	b.n	80056f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80056de:	f3af 8000 	nop.w
 80056e2:	4601      	mov	r1, r0
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	60ba      	str	r2, [r7, #8]
 80056ea:	b2ca      	uxtb	r2, r1
 80056ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	3301      	adds	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	dbf0      	blt.n	80056de <_read+0x12>
  }

  return len;
 80056fc:	687b      	ldr	r3, [r7, #4]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b086      	sub	sp, #24
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	e009      	b.n	800572c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	60ba      	str	r2, [r7, #8]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f8f1 	bl	8005908 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	3301      	adds	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	dbf1      	blt.n	8005718 <_write+0x12>
  }
  return len;
 8005734:	687b      	ldr	r3, [r7, #4]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <_close>:

int _close(int file)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005764:	605a      	str	r2, [r3, #4]
  return 0;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr

08005772 <_isatty>:

int _isatty(int file)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800577a:	2301      	movs	r3, #1
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr

08005786 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr
	...

080057a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057a8:	4a14      	ldr	r2, [pc, #80]	; (80057fc <_sbrk+0x5c>)
 80057aa:	4b15      	ldr	r3, [pc, #84]	; (8005800 <_sbrk+0x60>)
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057b4:	4b13      	ldr	r3, [pc, #76]	; (8005804 <_sbrk+0x64>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d102      	bne.n	80057c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057bc:	4b11      	ldr	r3, [pc, #68]	; (8005804 <_sbrk+0x64>)
 80057be:	4a12      	ldr	r2, [pc, #72]	; (8005808 <_sbrk+0x68>)
 80057c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <_sbrk+0x64>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4413      	add	r3, r2
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d207      	bcs.n	80057e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057d0:	f002 ff48 	bl	8008664 <__errno>
 80057d4:	4603      	mov	r3, r0
 80057d6:	220c      	movs	r2, #12
 80057d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057da:	f04f 33ff 	mov.w	r3, #4294967295
 80057de:	e009      	b.n	80057f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <_sbrk+0x64>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057e6:	4b07      	ldr	r3, [pc, #28]	; (8005804 <_sbrk+0x64>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	4a05      	ldr	r2, [pc, #20]	; (8005804 <_sbrk+0x64>)
 80057f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057f2:	68fb      	ldr	r3, [r7, #12]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20010000 	.word	0x20010000
 8005800:	00000400 	.word	0x00000400
 8005804:	20000214 	.word	0x20000214
 8005808:	200004c8 	.word	0x200004c8

0800580c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005810:	bf00      	nop
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr

08005818 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800581e:	f107 0308 	add.w	r3, r7, #8
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	609a      	str	r2, [r3, #8]
 800582a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800582c:	463b      	mov	r3, r7
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005834:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <MX_TIM4_Init+0x9c>)
 8005836:	4a20      	ldr	r2, [pc, #128]	; (80058b8 <MX_TIM4_Init+0xa0>)
 8005838:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 800583a:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <MX_TIM4_Init+0x9c>)
 800583c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005840:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005842:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <MX_TIM4_Init+0x9c>)
 8005844:	2200      	movs	r2, #0
 8005846:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8005848:	4b1a      	ldr	r3, [pc, #104]	; (80058b4 <MX_TIM4_Init+0x9c>)
 800584a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800584e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005850:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <MX_TIM4_Init+0x9c>)
 8005852:	2200      	movs	r2, #0
 8005854:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005856:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <MX_TIM4_Init+0x9c>)
 8005858:	2280      	movs	r2, #128	; 0x80
 800585a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800585c:	4815      	ldr	r0, [pc, #84]	; (80058b4 <MX_TIM4_Init+0x9c>)
 800585e:	f001 fa62 	bl	8006d26 <HAL_TIM_Base_Init>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005868:	f7ff fec5 	bl	80055f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800586c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4619      	mov	r1, r3
 8005878:	480e      	ldr	r0, [pc, #56]	; (80058b4 <MX_TIM4_Init+0x9c>)
 800587a:	f001 fb03 	bl	8006e84 <HAL_TIM_ConfigClockSource>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005884:	f7ff feb7 	bl	80055f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005888:	2300      	movs	r3, #0
 800588a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800588c:	2300      	movs	r3, #0
 800588e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005890:	463b      	mov	r3, r7
 8005892:	4619      	mov	r1, r3
 8005894:	4807      	ldr	r0, [pc, #28]	; (80058b4 <MX_TIM4_Init+0x9c>)
 8005896:	f001 fccd 	bl	8007234 <HAL_TIMEx_MasterConfigSynchronization>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80058a0:	f7ff fea9 	bl	80055f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);        	/* Enable timers and timer interrupts */
 80058a4:	4803      	ldr	r0, [pc, #12]	; (80058b4 <MX_TIM4_Init+0x9c>)
 80058a6:	f001 fa8d 	bl	8006dc4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 80058aa:	bf00      	nop
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000218 	.word	0x20000218
 80058b8:	40000800 	.word	0x40000800

080058bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a0d      	ldr	r2, [pc, #52]	; (8005900 <HAL_TIM_Base_MspInit+0x44>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d113      	bne.n	80058f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058ce:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <HAL_TIM_Base_MspInit+0x48>)
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	4a0c      	ldr	r2, [pc, #48]	; (8005904 <HAL_TIM_Base_MspInit+0x48>)
 80058d4:	f043 0304 	orr.w	r3, r3, #4
 80058d8:	61d3      	str	r3, [r2, #28]
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <HAL_TIM_Base_MspInit+0x48>)
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 1);
 80058e6:	2201      	movs	r2, #1
 80058e8:	2102      	movs	r1, #2
 80058ea:	201e      	movs	r0, #30
 80058ec:	f000 fa7f 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80058f0:	201e      	movs	r0, #30
 80058f2:	f000 fa98 	bl	8005e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40000800 	.word	0x40000800
 8005904:	40021000 	.word	0x40021000

08005908 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8005910:	1d39      	adds	r1, r7, #4
 8005912:	f04f 33ff 	mov.w	r3, #4294967295
 8005916:	2201      	movs	r2, #1
 8005918:	4803      	ldr	r0, [pc, #12]	; (8005928 <__io_putchar+0x20>)
 800591a:	f001 fd47 	bl	80073ac <HAL_UART_Transmit>
	return ch;
 800591e:	687b      	ldr	r3, [r7, #4]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000330 	.word	0x20000330

0800592c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005930:	4b13      	ldr	r3, [pc, #76]	; (8005980 <MX_USART1_UART_Init+0x54>)
 8005932:	4a14      	ldr	r2, [pc, #80]	; (8005984 <MX_USART1_UART_Init+0x58>)
 8005934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005936:	4b12      	ldr	r3, [pc, #72]	; (8005980 <MX_USART1_UART_Init+0x54>)
 8005938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800593c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800593e:	4b10      	ldr	r3, [pc, #64]	; (8005980 <MX_USART1_UART_Init+0x54>)
 8005940:	2200      	movs	r2, #0
 8005942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005944:	4b0e      	ldr	r3, [pc, #56]	; (8005980 <MX_USART1_UART_Init+0x54>)
 8005946:	2200      	movs	r2, #0
 8005948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800594a:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <MX_USART1_UART_Init+0x54>)
 800594c:	2200      	movs	r2, #0
 800594e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <MX_USART1_UART_Init+0x54>)
 8005952:	220c      	movs	r2, #12
 8005954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <MX_USART1_UART_Init+0x54>)
 8005958:	2200      	movs	r2, #0
 800595a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800595c:	4b08      	ldr	r3, [pc, #32]	; (8005980 <MX_USART1_UART_Init+0x54>)
 800595e:	2200      	movs	r2, #0
 8005960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005962:	4807      	ldr	r0, [pc, #28]	; (8005980 <MX_USART1_UART_Init+0x54>)
 8005964:	f001 fcd2 	bl	800730c <HAL_UART_Init>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800596e:	f7ff fe42 	bl	80055f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* This function enables the receive interrupt: flag UART_IT_RXNE and sets
   * the receive buffer and the maximum amount of data the receive buffer can receive */
   HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8005972:	2201      	movs	r2, #1
 8005974:	4904      	ldr	r1, [pc, #16]	; (8005988 <MX_USART1_UART_Init+0x5c>)
 8005976:	4802      	ldr	r0, [pc, #8]	; (8005980 <MX_USART1_UART_Init+0x54>)
 8005978:	f001 fd9b 	bl	80074b2 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 800597c:	bf00      	nop
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000330 	.word	0x20000330
 8005984:	40013800 	.word	0x40013800
 8005988:	2000032c 	.word	0x2000032c

0800598c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005994:	f107 0310 	add.w	r3, r7, #16
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a20      	ldr	r2, [pc, #128]	; (8005a28 <HAL_UART_MspInit+0x9c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d139      	bne.n	8005a20 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80059ac:	4b1f      	ldr	r3, [pc, #124]	; (8005a2c <HAL_UART_MspInit+0xa0>)
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <HAL_UART_MspInit+0xa0>)
 80059b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059b6:	6193      	str	r3, [r2, #24]
 80059b8:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <HAL_UART_MspInit+0xa0>)
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c4:	4b19      	ldr	r3, [pc, #100]	; (8005a2c <HAL_UART_MspInit+0xa0>)
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <HAL_UART_MspInit+0xa0>)
 80059ca:	f043 0304 	orr.w	r3, r3, #4
 80059ce:	6193      	str	r3, [r2, #24]
 80059d0:	4b16      	ldr	r3, [pc, #88]	; (8005a2c <HAL_UART_MspInit+0xa0>)
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80059dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e2:	2302      	movs	r3, #2
 80059e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059e6:	2303      	movs	r3, #3
 80059e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ea:	f107 0310 	add.w	r3, r7, #16
 80059ee:	4619      	mov	r1, r3
 80059f0:	480f      	ldr	r0, [pc, #60]	; (8005a30 <HAL_UART_MspInit+0xa4>)
 80059f2:	f000 fb75 	bl	80060e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80059f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a04:	f107 0310 	add.w	r3, r7, #16
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4809      	ldr	r0, [pc, #36]	; (8005a30 <HAL_UART_MspInit+0xa4>)
 8005a0c:	f000 fb68 	bl	80060e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 2);
 8005a10:	2202      	movs	r2, #2
 8005a12:	2102      	movs	r1, #2
 8005a14:	2025      	movs	r0, #37	; 0x25
 8005a16:	f000 f9ea 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a1a:	2025      	movs	r0, #37	; 0x25
 8005a1c:	f000 fa03 	bl	8005e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005a20:	bf00      	nop
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40013800 	.word	0x40013800
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40010800 	.word	0x40010800

08005a34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)                      /* if it is serial port USART1 */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a24      	ldr	r2, [pc, #144]	; (8005ad4 <HAL_UART_RxCpltCallback+0xa0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d142      	bne.n	8005acc <HAL_UART_RxCpltCallback+0x98>
    {
        if ((g_usart_rx_sta & 0x8000) == 0)             /* receipt not completed */
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	b21b      	sxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	db38      	blt.n	8005ac2 <HAL_UART_RxCpltCallback+0x8e>
        {
            if (g_usart_rx_sta & 0x4000)                /* 0x0d has been received (the Enter key). */
 8005a50:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d011      	beq.n	8005a80 <HAL_UART_RxCpltCallback+0x4c>
            {
                if (g_rx_buffer[0] != 0x0a)             /* this is not 0x0a (that is, not a newline key) */
 8005a5c:	4b1f      	ldr	r3, [pc, #124]	; (8005adc <HAL_UART_RxCpltCallback+0xa8>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b0a      	cmp	r3, #10
 8005a62:	d003      	beq.n	8005a6c <HAL_UART_RxCpltCallback+0x38>
                {
                    g_usart_rx_sta = 0;                 /* receive error,restart */
 8005a64:	4b1c      	ldr	r3, [pc, #112]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	e02a      	b.n	8005ac2 <HAL_UART_RxCpltCallback+0x8e>
                }
                else                                    /* it gets 0x0a (the newline key) */
                {
                    g_usart_rx_sta |= 0x8000;           /* the reception is complete */
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	e020      	b.n	8005ac2 <HAL_UART_RxCpltCallback+0x8e>
                }
            }
            else                                        /* 0X0d has not been reached yet (the Enter key) */
            {
                if (g_rx_buffer[0] == 0x0d)
 8005a80:	4b16      	ldr	r3, [pc, #88]	; (8005adc <HAL_UART_RxCpltCallback+0xa8>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b0d      	cmp	r3, #13
 8005a86:	d107      	bne.n	8005a98 <HAL_UART_RxCpltCallback+0x64>
                    g_usart_rx_sta |= 0x4000;
 8005a88:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	e014      	b.n	8005ac2 <HAL_UART_RxCpltCallback+0x8e>
                else
                {
                    g_usart_rx_buf[g_usart_rx_sta & 0X3FFF] = g_rx_buffer[0];
 8005a98:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005aa0:	4a0e      	ldr	r2, [pc, #56]	; (8005adc <HAL_UART_RxCpltCallback+0xa8>)
 8005aa2:	7811      	ldrb	r1, [r2, #0]
 8005aa4:	4a0e      	ldr	r2, [pc, #56]	; (8005ae0 <HAL_UART_RxCpltCallback+0xac>)
 8005aa6:	54d1      	strb	r1, [r2, r3]
                    g_usart_rx_sta++;
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005ab2:	801a      	strh	r2, [r3, #0]

                    if (g_usart_rx_sta > (USART_REC_LEN - 1))
 8005ab4:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	2bc7      	cmp	r3, #199	; 0xc7
 8005aba:	d902      	bls.n	8005ac2 <HAL_UART_RxCpltCallback+0x8e>
                    {
                        g_usart_rx_sta = 0;             /* receive data error, start receive again */
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_UART_RxCpltCallback+0xa4>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	801a      	strh	r2, [r3, #0]
                    }
                }
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t *)g_rx_buffer, RXBUFFERSIZE);
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4905      	ldr	r1, [pc, #20]	; (8005adc <HAL_UART_RxCpltCallback+0xa8>)
 8005ac6:	4807      	ldr	r0, [pc, #28]	; (8005ae4 <HAL_UART_RxCpltCallback+0xb0>)
 8005ac8:	f001 fcf3 	bl	80074b2 <HAL_UART_Receive_IT>
    }
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40013800 	.word	0x40013800
 8005ad8:	20000328 	.word	0x20000328
 8005adc:	2000032c 	.word	0x2000032c
 8005ae0:	20000260 	.word	0x20000260
 8005ae4:	20000330 	.word	0x20000330

08005ae8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ae8:	f7ff fe90 	bl	800580c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005aec:	480b      	ldr	r0, [pc, #44]	; (8005b1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005aee:	490c      	ldr	r1, [pc, #48]	; (8005b20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005af0:	4a0c      	ldr	r2, [pc, #48]	; (8005b24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005af4:	e002      	b.n	8005afc <LoopCopyDataInit>

08005af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005afa:	3304      	adds	r3, #4

08005afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b00:	d3f9      	bcc.n	8005af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b02:	4a09      	ldr	r2, [pc, #36]	; (8005b28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005b04:	4c09      	ldr	r4, [pc, #36]	; (8005b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b08:	e001      	b.n	8005b0e <LoopFillZerobss>

08005b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b0c:	3204      	adds	r2, #4

08005b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b10:	d3fb      	bcc.n	8005b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005b12:	f002 fdad 	bl	8008670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005b16:	f7ff fcdd 	bl	80054d4 <main>
  bx lr
 8005b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8005b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b20:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8005b24:	0800c9b4 	.word	0x0800c9b4
  ldr r2, =_sbss
 8005b28:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8005b2c:	200004c8 	.word	0x200004c8

08005b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005b30:	e7fe      	b.n	8005b30 <ADC1_2_IRQHandler>
	...

08005b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b38:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <HAL_Init+0x28>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a07      	ldr	r2, [pc, #28]	; (8005b5c <HAL_Init+0x28>)
 8005b3e:	f043 0310 	orr.w	r3, r3, #16
 8005b42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b44:	2003      	movs	r0, #3
 8005b46:	f000 f947 	bl	8005dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	f000 f808 	bl	8005b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b50:	f7ff fd56 	bl	8005600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40022000 	.word	0x40022000

08005b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b68:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <HAL_InitTick+0x54>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <HAL_InitTick+0x58>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	4619      	mov	r1, r3
 8005b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f95f 	bl	8005e42 <HAL_SYSTICK_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e00e      	b.n	8005bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b0f      	cmp	r3, #15
 8005b92:	d80a      	bhi.n	8005baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b94:	2200      	movs	r2, #0
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	f000 f927 	bl	8005dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ba0:	4a06      	ldr	r2, [pc, #24]	; (8005bbc <HAL_InitTick+0x5c>)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e000      	b.n	8005bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	20000134 	.word	0x20000134
 8005bb8:	2000013c 	.word	0x2000013c
 8005bbc:	20000138 	.word	0x20000138

08005bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bc4:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <HAL_IncTick+0x1c>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <HAL_IncTick+0x20>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4413      	add	r3, r2
 8005bd0:	4a03      	ldr	r2, [pc, #12]	; (8005be0 <HAL_IncTick+0x20>)
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr
 8005bdc:	2000013c 	.word	0x2000013c
 8005be0:	20000378 	.word	0x20000378

08005be4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  return uwTick;
 8005be8:	4b02      	ldr	r3, [pc, #8]	; (8005bf4 <HAL_GetTick+0x10>)
 8005bea:	681b      	ldr	r3, [r3, #0]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr
 8005bf4:	20000378 	.word	0x20000378

08005bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c00:	f7ff fff0 	bl	8005be4 <HAL_GetTick>
 8005c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d005      	beq.n	8005c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c12:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <HAL_Delay+0x44>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c1e:	bf00      	nop
 8005c20:	f7ff ffe0 	bl	8005be4 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d8f7      	bhi.n	8005c20 <HAL_Delay+0x28>
  {
  }
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	2000013c 	.word	0x2000013c

08005c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <__NVIC_SetPriorityGrouping+0x44>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c72:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <__NVIC_SetPriorityGrouping+0x44>)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	60d3      	str	r3, [r2, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	e000ed00 	.word	0xe000ed00

08005c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c8c:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	0a1b      	lsrs	r3, r3, #8
 8005c92:	f003 0307 	and.w	r3, r3, #7
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	e000ed00 	.word	0xe000ed00

08005ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	db0b      	blt.n	8005cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	f003 021f 	and.w	r2, r3, #31
 8005cbc:	4906      	ldr	r1, [pc, #24]	; (8005cd8 <__NVIC_EnableIRQ+0x34>)
 8005cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr
 8005cd8:	e000e100 	.word	0xe000e100

08005cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	6039      	str	r1, [r7, #0]
 8005ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	db0a      	blt.n	8005d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	490c      	ldr	r1, [pc, #48]	; (8005d28 <__NVIC_SetPriority+0x4c>)
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	0112      	lsls	r2, r2, #4
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	440b      	add	r3, r1
 8005d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d04:	e00a      	b.n	8005d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	4908      	ldr	r1, [pc, #32]	; (8005d2c <__NVIC_SetPriority+0x50>)
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	3b04      	subs	r3, #4
 8005d14:	0112      	lsls	r2, r2, #4
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	440b      	add	r3, r1
 8005d1a:	761a      	strb	r2, [r3, #24]
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	e000e100 	.word	0xe000e100
 8005d2c:	e000ed00 	.word	0xe000ed00

08005d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b089      	sub	sp, #36	; 0x24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f1c3 0307 	rsb	r3, r3, #7
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	bf28      	it	cs
 8005d4e:	2304      	movcs	r3, #4
 8005d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3304      	adds	r3, #4
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d902      	bls.n	8005d60 <NVIC_EncodePriority+0x30>
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3b03      	subs	r3, #3
 8005d5e:	e000      	b.n	8005d62 <NVIC_EncodePriority+0x32>
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	401a      	ands	r2, r3
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d78:	f04f 31ff 	mov.w	r1, #4294967295
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d82:	43d9      	mvns	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d88:	4313      	orrs	r3, r2
         );
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3724      	adds	r7, #36	; 0x24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005da4:	d301      	bcc.n	8005daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005da6:	2301      	movs	r3, #1
 8005da8:	e00f      	b.n	8005dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005daa:	4a0a      	ldr	r2, [pc, #40]	; (8005dd4 <SysTick_Config+0x40>)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005db2:	210f      	movs	r1, #15
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	f7ff ff90 	bl	8005cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dbc:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <SysTick_Config+0x40>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dc2:	4b04      	ldr	r3, [pc, #16]	; (8005dd4 <SysTick_Config+0x40>)
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	e000e010 	.word	0xe000e010

08005dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff ff2d 	bl	8005c40 <__NVIC_SetPriorityGrouping>
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	4603      	mov	r3, r0
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e00:	f7ff ff42 	bl	8005c88 <__NVIC_GetPriorityGrouping>
 8005e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	6978      	ldr	r0, [r7, #20]
 8005e0c:	f7ff ff90 	bl	8005d30 <NVIC_EncodePriority>
 8005e10:	4602      	mov	r2, r0
 8005e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e16:	4611      	mov	r1, r2
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff ff5f 	bl	8005cdc <__NVIC_SetPriority>
}
 8005e1e:	bf00      	nop
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff ff35 	bl	8005ca4 <__NVIC_EnableIRQ>
}
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff ffa2 	bl	8005d94 <SysTick_Config>
 8005e50:	4603      	mov	r3, r0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d008      	beq.n	8005e84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2204      	movs	r2, #4
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e020      	b.n	8005ec6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 020e 	bic.w	r2, r2, #14
 8005e92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eac:	2101      	movs	r1, #1
 8005eae:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr

08005ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d005      	beq.n	8005ef4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2204      	movs	r2, #4
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
 8005ef2:	e0d6      	b.n	80060a2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 020e 	bic.w	r2, r2, #14
 8005f02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4b64      	ldr	r3, [pc, #400]	; (80060ac <HAL_DMA_Abort_IT+0x1dc>)
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d958      	bls.n	8005fd2 <HAL_DMA_Abort_IT+0x102>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a62      	ldr	r2, [pc, #392]	; (80060b0 <HAL_DMA_Abort_IT+0x1e0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d04f      	beq.n	8005fca <HAL_DMA_Abort_IT+0xfa>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a61      	ldr	r2, [pc, #388]	; (80060b4 <HAL_DMA_Abort_IT+0x1e4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d048      	beq.n	8005fc6 <HAL_DMA_Abort_IT+0xf6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a5f      	ldr	r2, [pc, #380]	; (80060b8 <HAL_DMA_Abort_IT+0x1e8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d040      	beq.n	8005fc0 <HAL_DMA_Abort_IT+0xf0>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a5e      	ldr	r2, [pc, #376]	; (80060bc <HAL_DMA_Abort_IT+0x1ec>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d038      	beq.n	8005fba <HAL_DMA_Abort_IT+0xea>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5c      	ldr	r2, [pc, #368]	; (80060c0 <HAL_DMA_Abort_IT+0x1f0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d030      	beq.n	8005fb4 <HAL_DMA_Abort_IT+0xe4>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5b      	ldr	r2, [pc, #364]	; (80060c4 <HAL_DMA_Abort_IT+0x1f4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d028      	beq.n	8005fae <HAL_DMA_Abort_IT+0xde>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a52      	ldr	r2, [pc, #328]	; (80060ac <HAL_DMA_Abort_IT+0x1dc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d020      	beq.n	8005fa8 <HAL_DMA_Abort_IT+0xd8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a57      	ldr	r2, [pc, #348]	; (80060c8 <HAL_DMA_Abort_IT+0x1f8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d019      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xd4>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a55      	ldr	r2, [pc, #340]	; (80060cc <HAL_DMA_Abort_IT+0x1fc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d012      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0xd0>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a54      	ldr	r2, [pc, #336]	; (80060d0 <HAL_DMA_Abort_IT+0x200>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00a      	beq.n	8005f9a <HAL_DMA_Abort_IT+0xca>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a52      	ldr	r2, [pc, #328]	; (80060d4 <HAL_DMA_Abort_IT+0x204>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d102      	bne.n	8005f94 <HAL_DMA_Abort_IT+0xc4>
 8005f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f92:	e01b      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f98:	e018      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f9e:	e015      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	e013      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e011      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fac:	e00e      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005fae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fb2:	e00b      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fb8:	e008      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fbe:	e005      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fc4:	e002      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	e000      	b.n	8005fcc <HAL_DMA_Abort_IT+0xfc>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4a42      	ldr	r2, [pc, #264]	; (80060d8 <HAL_DMA_Abort_IT+0x208>)
 8005fce:	6053      	str	r3, [r2, #4]
 8005fd0:	e057      	b.n	8006082 <HAL_DMA_Abort_IT+0x1b2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a36      	ldr	r2, [pc, #216]	; (80060b0 <HAL_DMA_Abort_IT+0x1e0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d04f      	beq.n	800607c <HAL_DMA_Abort_IT+0x1ac>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a34      	ldr	r2, [pc, #208]	; (80060b4 <HAL_DMA_Abort_IT+0x1e4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d048      	beq.n	8006078 <HAL_DMA_Abort_IT+0x1a8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a33      	ldr	r2, [pc, #204]	; (80060b8 <HAL_DMA_Abort_IT+0x1e8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d040      	beq.n	8006072 <HAL_DMA_Abort_IT+0x1a2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a31      	ldr	r2, [pc, #196]	; (80060bc <HAL_DMA_Abort_IT+0x1ec>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d038      	beq.n	800606c <HAL_DMA_Abort_IT+0x19c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a30      	ldr	r2, [pc, #192]	; (80060c0 <HAL_DMA_Abort_IT+0x1f0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d030      	beq.n	8006066 <HAL_DMA_Abort_IT+0x196>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a2e      	ldr	r2, [pc, #184]	; (80060c4 <HAL_DMA_Abort_IT+0x1f4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d028      	beq.n	8006060 <HAL_DMA_Abort_IT+0x190>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a26      	ldr	r2, [pc, #152]	; (80060ac <HAL_DMA_Abort_IT+0x1dc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d020      	beq.n	800605a <HAL_DMA_Abort_IT+0x18a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a2a      	ldr	r2, [pc, #168]	; (80060c8 <HAL_DMA_Abort_IT+0x1f8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d019      	beq.n	8006056 <HAL_DMA_Abort_IT+0x186>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a29      	ldr	r2, [pc, #164]	; (80060cc <HAL_DMA_Abort_IT+0x1fc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d012      	beq.n	8006052 <HAL_DMA_Abort_IT+0x182>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a27      	ldr	r2, [pc, #156]	; (80060d0 <HAL_DMA_Abort_IT+0x200>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00a      	beq.n	800604c <HAL_DMA_Abort_IT+0x17c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a26      	ldr	r2, [pc, #152]	; (80060d4 <HAL_DMA_Abort_IT+0x204>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d102      	bne.n	8006046 <HAL_DMA_Abort_IT+0x176>
 8006040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006044:	e01b      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 8006046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800604a:	e018      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 800604c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006050:	e015      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 8006052:	2310      	movs	r3, #16
 8006054:	e013      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 8006056:	2301      	movs	r3, #1
 8006058:	e011      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 800605a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800605e:	e00e      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 8006060:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006064:	e00b      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 8006066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800606a:	e008      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 800606c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006070:	e005      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 8006072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006076:	e002      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 8006078:	2310      	movs	r3, #16
 800607a:	e000      	b.n	800607e <HAL_DMA_Abort_IT+0x1ae>
 800607c:	2301      	movs	r3, #1
 800607e:	4a17      	ldr	r2, [pc, #92]	; (80060dc <HAL_DMA_Abort_IT+0x20c>)
 8006080:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
    } 
  }
  return status;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40020080 	.word	0x40020080
 80060b0:	40020008 	.word	0x40020008
 80060b4:	4002001c 	.word	0x4002001c
 80060b8:	40020030 	.word	0x40020030
 80060bc:	40020044 	.word	0x40020044
 80060c0:	40020058 	.word	0x40020058
 80060c4:	4002006c 	.word	0x4002006c
 80060c8:	40020408 	.word	0x40020408
 80060cc:	4002041c 	.word	0x4002041c
 80060d0:	40020430 	.word	0x40020430
 80060d4:	40020444 	.word	0x40020444
 80060d8:	40020400 	.word	0x40020400
 80060dc:	40020000 	.word	0x40020000

080060e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b08b      	sub	sp, #44	; 0x2c
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060ea:	2300      	movs	r3, #0
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80060ee:	2300      	movs	r3, #0
 80060f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060f2:	e179      	b.n	80063e8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80060f4:	2201      	movs	r2, #1
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	4013      	ands	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	429a      	cmp	r2, r3
 800610e:	f040 8168 	bne.w	80063e2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4a96      	ldr	r2, [pc, #600]	; (8006370 <HAL_GPIO_Init+0x290>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d05e      	beq.n	80061da <HAL_GPIO_Init+0xfa>
 800611c:	4a94      	ldr	r2, [pc, #592]	; (8006370 <HAL_GPIO_Init+0x290>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d875      	bhi.n	800620e <HAL_GPIO_Init+0x12e>
 8006122:	4a94      	ldr	r2, [pc, #592]	; (8006374 <HAL_GPIO_Init+0x294>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d058      	beq.n	80061da <HAL_GPIO_Init+0xfa>
 8006128:	4a92      	ldr	r2, [pc, #584]	; (8006374 <HAL_GPIO_Init+0x294>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d86f      	bhi.n	800620e <HAL_GPIO_Init+0x12e>
 800612e:	4a92      	ldr	r2, [pc, #584]	; (8006378 <HAL_GPIO_Init+0x298>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d052      	beq.n	80061da <HAL_GPIO_Init+0xfa>
 8006134:	4a90      	ldr	r2, [pc, #576]	; (8006378 <HAL_GPIO_Init+0x298>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d869      	bhi.n	800620e <HAL_GPIO_Init+0x12e>
 800613a:	4a90      	ldr	r2, [pc, #576]	; (800637c <HAL_GPIO_Init+0x29c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d04c      	beq.n	80061da <HAL_GPIO_Init+0xfa>
 8006140:	4a8e      	ldr	r2, [pc, #568]	; (800637c <HAL_GPIO_Init+0x29c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d863      	bhi.n	800620e <HAL_GPIO_Init+0x12e>
 8006146:	4a8e      	ldr	r2, [pc, #568]	; (8006380 <HAL_GPIO_Init+0x2a0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d046      	beq.n	80061da <HAL_GPIO_Init+0xfa>
 800614c:	4a8c      	ldr	r2, [pc, #560]	; (8006380 <HAL_GPIO_Init+0x2a0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d85d      	bhi.n	800620e <HAL_GPIO_Init+0x12e>
 8006152:	2b12      	cmp	r3, #18
 8006154:	d82a      	bhi.n	80061ac <HAL_GPIO_Init+0xcc>
 8006156:	2b12      	cmp	r3, #18
 8006158:	d859      	bhi.n	800620e <HAL_GPIO_Init+0x12e>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <HAL_GPIO_Init+0x80>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	080061db 	.word	0x080061db
 8006164:	080061b5 	.word	0x080061b5
 8006168:	080061c7 	.word	0x080061c7
 800616c:	08006209 	.word	0x08006209
 8006170:	0800620f 	.word	0x0800620f
 8006174:	0800620f 	.word	0x0800620f
 8006178:	0800620f 	.word	0x0800620f
 800617c:	0800620f 	.word	0x0800620f
 8006180:	0800620f 	.word	0x0800620f
 8006184:	0800620f 	.word	0x0800620f
 8006188:	0800620f 	.word	0x0800620f
 800618c:	0800620f 	.word	0x0800620f
 8006190:	0800620f 	.word	0x0800620f
 8006194:	0800620f 	.word	0x0800620f
 8006198:	0800620f 	.word	0x0800620f
 800619c:	0800620f 	.word	0x0800620f
 80061a0:	0800620f 	.word	0x0800620f
 80061a4:	080061bd 	.word	0x080061bd
 80061a8:	080061d1 	.word	0x080061d1
 80061ac:	4a75      	ldr	r2, [pc, #468]	; (8006384 <HAL_GPIO_Init+0x2a4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80061b2:	e02c      	b.n	800620e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	623b      	str	r3, [r7, #32]
          break;
 80061ba:	e029      	b.n	8006210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	3304      	adds	r3, #4
 80061c2:	623b      	str	r3, [r7, #32]
          break;
 80061c4:	e024      	b.n	8006210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	3308      	adds	r3, #8
 80061cc:	623b      	str	r3, [r7, #32]
          break;
 80061ce:	e01f      	b.n	8006210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	330c      	adds	r3, #12
 80061d6:	623b      	str	r3, [r7, #32]
          break;
 80061d8:	e01a      	b.n	8006210 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d102      	bne.n	80061e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80061e2:	2304      	movs	r3, #4
 80061e4:	623b      	str	r3, [r7, #32]
          break;
 80061e6:	e013      	b.n	8006210 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d105      	bne.n	80061fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80061f0:	2308      	movs	r3, #8
 80061f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	611a      	str	r2, [r3, #16]
          break;
 80061fa:	e009      	b.n	8006210 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80061fc:	2308      	movs	r3, #8
 80061fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	615a      	str	r2, [r3, #20]
          break;
 8006206:	e003      	b.n	8006210 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006208:	2300      	movs	r3, #0
 800620a:	623b      	str	r3, [r7, #32]
          break;
 800620c:	e000      	b.n	8006210 <HAL_GPIO_Init+0x130>
          break;
 800620e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2bff      	cmp	r3, #255	; 0xff
 8006214:	d801      	bhi.n	800621a <HAL_GPIO_Init+0x13a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	e001      	b.n	800621e <HAL_GPIO_Init+0x13e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3304      	adds	r3, #4
 800621e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2bff      	cmp	r3, #255	; 0xff
 8006224:	d802      	bhi.n	800622c <HAL_GPIO_Init+0x14c>
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	e002      	b.n	8006232 <HAL_GPIO_Init+0x152>
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	3b08      	subs	r3, #8
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	210f      	movs	r1, #15
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	43db      	mvns	r3, r3
 8006242:	401a      	ands	r2, r3
 8006244:	6a39      	ldr	r1, [r7, #32]
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	fa01 f303 	lsl.w	r3, r1, r3
 800624c:	431a      	orrs	r2, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 80c1 	beq.w	80063e2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006260:	4b49      	ldr	r3, [pc, #292]	; (8006388 <HAL_GPIO_Init+0x2a8>)
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	4a48      	ldr	r2, [pc, #288]	; (8006388 <HAL_GPIO_Init+0x2a8>)
 8006266:	f043 0301 	orr.w	r3, r3, #1
 800626a:	6193      	str	r3, [r2, #24]
 800626c:	4b46      	ldr	r3, [pc, #280]	; (8006388 <HAL_GPIO_Init+0x2a8>)
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006278:	4a44      	ldr	r2, [pc, #272]	; (800638c <HAL_GPIO_Init+0x2ac>)
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	089b      	lsrs	r3, r3, #2
 800627e:	3302      	adds	r3, #2
 8006280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006284:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	f003 0303 	and.w	r3, r3, #3
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	220f      	movs	r2, #15
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	43db      	mvns	r3, r3
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4013      	ands	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3c      	ldr	r2, [pc, #240]	; (8006390 <HAL_GPIO_Init+0x2b0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d01f      	beq.n	80062e4 <HAL_GPIO_Init+0x204>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3b      	ldr	r2, [pc, #236]	; (8006394 <HAL_GPIO_Init+0x2b4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d019      	beq.n	80062e0 <HAL_GPIO_Init+0x200>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3a      	ldr	r2, [pc, #232]	; (8006398 <HAL_GPIO_Init+0x2b8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d013      	beq.n	80062dc <HAL_GPIO_Init+0x1fc>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a39      	ldr	r2, [pc, #228]	; (800639c <HAL_GPIO_Init+0x2bc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00d      	beq.n	80062d8 <HAL_GPIO_Init+0x1f8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a38      	ldr	r2, [pc, #224]	; (80063a0 <HAL_GPIO_Init+0x2c0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d007      	beq.n	80062d4 <HAL_GPIO_Init+0x1f4>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a37      	ldr	r2, [pc, #220]	; (80063a4 <HAL_GPIO_Init+0x2c4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d101      	bne.n	80062d0 <HAL_GPIO_Init+0x1f0>
 80062cc:	2305      	movs	r3, #5
 80062ce:	e00a      	b.n	80062e6 <HAL_GPIO_Init+0x206>
 80062d0:	2306      	movs	r3, #6
 80062d2:	e008      	b.n	80062e6 <HAL_GPIO_Init+0x206>
 80062d4:	2304      	movs	r3, #4
 80062d6:	e006      	b.n	80062e6 <HAL_GPIO_Init+0x206>
 80062d8:	2303      	movs	r3, #3
 80062da:	e004      	b.n	80062e6 <HAL_GPIO_Init+0x206>
 80062dc:	2302      	movs	r3, #2
 80062de:	e002      	b.n	80062e6 <HAL_GPIO_Init+0x206>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <HAL_GPIO_Init+0x206>
 80062e4:	2300      	movs	r3, #0
 80062e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e8:	f002 0203 	and.w	r2, r2, #3
 80062ec:	0092      	lsls	r2, r2, #2
 80062ee:	4093      	lsls	r3, r2
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80062f6:	4925      	ldr	r1, [pc, #148]	; (800638c <HAL_GPIO_Init+0x2ac>)
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	089b      	lsrs	r3, r3, #2
 80062fc:	3302      	adds	r3, #2
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d006      	beq.n	800631e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006310:	4b25      	ldr	r3, [pc, #148]	; (80063a8 <HAL_GPIO_Init+0x2c8>)
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	4924      	ldr	r1, [pc, #144]	; (80063a8 <HAL_GPIO_Init+0x2c8>)
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	4313      	orrs	r3, r2
 800631a:	608b      	str	r3, [r1, #8]
 800631c:	e006      	b.n	800632c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800631e:	4b22      	ldr	r3, [pc, #136]	; (80063a8 <HAL_GPIO_Init+0x2c8>)
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	43db      	mvns	r3, r3
 8006326:	4920      	ldr	r1, [pc, #128]	; (80063a8 <HAL_GPIO_Init+0x2c8>)
 8006328:	4013      	ands	r3, r2
 800632a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d006      	beq.n	8006346 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006338:	4b1b      	ldr	r3, [pc, #108]	; (80063a8 <HAL_GPIO_Init+0x2c8>)
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	491a      	ldr	r1, [pc, #104]	; (80063a8 <HAL_GPIO_Init+0x2c8>)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	4313      	orrs	r3, r2
 8006342:	60cb      	str	r3, [r1, #12]
 8006344:	e006      	b.n	8006354 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006346:	4b18      	ldr	r3, [pc, #96]	; (80063a8 <HAL_GPIO_Init+0x2c8>)
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	43db      	mvns	r3, r3
 800634e:	4916      	ldr	r1, [pc, #88]	; (80063a8 <HAL_GPIO_Init+0x2c8>)
 8006350:	4013      	ands	r3, r2
 8006352:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d025      	beq.n	80063ac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006360:	4b11      	ldr	r3, [pc, #68]	; (80063a8 <HAL_GPIO_Init+0x2c8>)
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	4910      	ldr	r1, [pc, #64]	; (80063a8 <HAL_GPIO_Init+0x2c8>)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	4313      	orrs	r3, r2
 800636a:	604b      	str	r3, [r1, #4]
 800636c:	e025      	b.n	80063ba <HAL_GPIO_Init+0x2da>
 800636e:	bf00      	nop
 8006370:	10320000 	.word	0x10320000
 8006374:	10310000 	.word	0x10310000
 8006378:	10220000 	.word	0x10220000
 800637c:	10210000 	.word	0x10210000
 8006380:	10120000 	.word	0x10120000
 8006384:	10110000 	.word	0x10110000
 8006388:	40021000 	.word	0x40021000
 800638c:	40010000 	.word	0x40010000
 8006390:	40010800 	.word	0x40010800
 8006394:	40010c00 	.word	0x40010c00
 8006398:	40011000 	.word	0x40011000
 800639c:	40011400 	.word	0x40011400
 80063a0:	40011800 	.word	0x40011800
 80063a4:	40011c00 	.word	0x40011c00
 80063a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80063ac:	4b15      	ldr	r3, [pc, #84]	; (8006404 <HAL_GPIO_Init+0x324>)
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	43db      	mvns	r3, r3
 80063b4:	4913      	ldr	r1, [pc, #76]	; (8006404 <HAL_GPIO_Init+0x324>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d006      	beq.n	80063d4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80063c6:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <HAL_GPIO_Init+0x324>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	490e      	ldr	r1, [pc, #56]	; (8006404 <HAL_GPIO_Init+0x324>)
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	600b      	str	r3, [r1, #0]
 80063d2:	e006      	b.n	80063e2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80063d4:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <HAL_GPIO_Init+0x324>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	43db      	mvns	r3, r3
 80063dc:	4909      	ldr	r1, [pc, #36]	; (8006404 <HAL_GPIO_Init+0x324>)
 80063de:	4013      	ands	r3, r2
 80063e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	3301      	adds	r3, #1
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	fa22 f303 	lsr.w	r3, r2, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f47f ae7e 	bne.w	80060f4 <HAL_GPIO_Init+0x14>
  }
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	372c      	adds	r7, #44	; 0x2c
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr
 8006404:	40010400 	.word	0x40010400

08006408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	807b      	strh	r3, [r7, #2]
 8006414:	4613      	mov	r3, r2
 8006416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006418:	787b      	ldrb	r3, [r7, #1]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800641e:	887a      	ldrh	r2, [r7, #2]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006424:	e003      	b.n	800642e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006426:	887b      	ldrh	r3, [r7, #2]
 8006428:	041a      	lsls	r2, r3, #16
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	611a      	str	r2, [r3, #16]
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800644a:	887a      	ldrh	r2, [r7, #2]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4013      	ands	r3, r2
 8006450:	041a      	lsls	r2, r3, #16
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	43d9      	mvns	r1, r3
 8006456:	887b      	ldrh	r3, [r7, #2]
 8006458:	400b      	ands	r3, r1
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	611a      	str	r2, [r3, #16]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr
	...

0800646c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e272      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8087 	beq.w	800659a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800648c:	4b92      	ldr	r3, [pc, #584]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 030c 	and.w	r3, r3, #12
 8006494:	2b04      	cmp	r3, #4
 8006496:	d00c      	beq.n	80064b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006498:	4b8f      	ldr	r3, [pc, #572]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f003 030c 	and.w	r3, r3, #12
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d112      	bne.n	80064ca <HAL_RCC_OscConfig+0x5e>
 80064a4:	4b8c      	ldr	r3, [pc, #560]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b0:	d10b      	bne.n	80064ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064b2:	4b89      	ldr	r3, [pc, #548]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d06c      	beq.n	8006598 <HAL_RCC_OscConfig+0x12c>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d168      	bne.n	8006598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e24c      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d2:	d106      	bne.n	80064e2 <HAL_RCC_OscConfig+0x76>
 80064d4:	4b80      	ldr	r3, [pc, #512]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a7f      	ldr	r2, [pc, #508]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80064da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	e02e      	b.n	8006540 <HAL_RCC_OscConfig+0xd4>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10c      	bne.n	8006504 <HAL_RCC_OscConfig+0x98>
 80064ea:	4b7b      	ldr	r3, [pc, #492]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a7a      	ldr	r2, [pc, #488]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80064f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	4b78      	ldr	r3, [pc, #480]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a77      	ldr	r2, [pc, #476]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80064fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	e01d      	b.n	8006540 <HAL_RCC_OscConfig+0xd4>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800650c:	d10c      	bne.n	8006528 <HAL_RCC_OscConfig+0xbc>
 800650e:	4b72      	ldr	r3, [pc, #456]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a71      	ldr	r2, [pc, #452]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 8006514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	4b6f      	ldr	r3, [pc, #444]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a6e      	ldr	r2, [pc, #440]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 8006520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	e00b      	b.n	8006540 <HAL_RCC_OscConfig+0xd4>
 8006528:	4b6b      	ldr	r3, [pc, #428]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a6a      	ldr	r2, [pc, #424]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 800652e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	4b68      	ldr	r3, [pc, #416]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a67      	ldr	r2, [pc, #412]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 800653a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800653e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d013      	beq.n	8006570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006548:	f7ff fb4c 	bl	8005be4 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006550:	f7ff fb48 	bl	8005be4 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b64      	cmp	r3, #100	; 0x64
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e200      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006562:	4b5d      	ldr	r3, [pc, #372]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0f0      	beq.n	8006550 <HAL_RCC_OscConfig+0xe4>
 800656e:	e014      	b.n	800659a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006570:	f7ff fb38 	bl	8005be4 <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006578:	f7ff fb34 	bl	8005be4 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b64      	cmp	r3, #100	; 0x64
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e1ec      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800658a:	4b53      	ldr	r3, [pc, #332]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f0      	bne.n	8006578 <HAL_RCC_OscConfig+0x10c>
 8006596:	e000      	b.n	800659a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d063      	beq.n	800666e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065a6:	4b4c      	ldr	r3, [pc, #304]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f003 030c 	and.w	r3, r3, #12
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065b2:	4b49      	ldr	r3, [pc, #292]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f003 030c 	and.w	r3, r3, #12
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d11c      	bne.n	80065f8 <HAL_RCC_OscConfig+0x18c>
 80065be:	4b46      	ldr	r3, [pc, #280]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d116      	bne.n	80065f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ca:	4b43      	ldr	r3, [pc, #268]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <HAL_RCC_OscConfig+0x176>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d001      	beq.n	80065e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e1c0      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e2:	4b3d      	ldr	r3, [pc, #244]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	4939      	ldr	r1, [pc, #228]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065f6:	e03a      	b.n	800666e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d020      	beq.n	8006642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006600:	4b36      	ldr	r3, [pc, #216]	; (80066dc <HAL_RCC_OscConfig+0x270>)
 8006602:	2201      	movs	r2, #1
 8006604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006606:	f7ff faed 	bl	8005be4 <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800660e:	f7ff fae9 	bl	8005be4 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e1a1      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006620:	4b2d      	ldr	r3, [pc, #180]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f0      	beq.n	800660e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800662c:	4b2a      	ldr	r3, [pc, #168]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	4927      	ldr	r1, [pc, #156]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 800663c:	4313      	orrs	r3, r2
 800663e:	600b      	str	r3, [r1, #0]
 8006640:	e015      	b.n	800666e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006642:	4b26      	ldr	r3, [pc, #152]	; (80066dc <HAL_RCC_OscConfig+0x270>)
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006648:	f7ff facc 	bl	8005be4 <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006650:	f7ff fac8 	bl	8005be4 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e180      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d03a      	beq.n	80066f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d019      	beq.n	80066b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006682:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <HAL_RCC_OscConfig+0x274>)
 8006684:	2201      	movs	r2, #1
 8006686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006688:	f7ff faac 	bl	8005be4 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006690:	f7ff faa8 	bl	8005be4 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e160      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066a2:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <HAL_RCC_OscConfig+0x26c>)
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0f0      	beq.n	8006690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80066ae:	2001      	movs	r0, #1
 80066b0:	f000 face 	bl	8006c50 <RCC_Delay>
 80066b4:	e01c      	b.n	80066f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066b6:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <HAL_RCC_OscConfig+0x274>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066bc:	f7ff fa92 	bl	8005be4 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066c2:	e00f      	b.n	80066e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066c4:	f7ff fa8e 	bl	8005be4 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d908      	bls.n	80066e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e146      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
 80066d6:	bf00      	nop
 80066d8:	40021000 	.word	0x40021000
 80066dc:	42420000 	.word	0x42420000
 80066e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e4:	4b92      	ldr	r3, [pc, #584]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e9      	bne.n	80066c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80a6 	beq.w	800684a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006702:	4b8b      	ldr	r3, [pc, #556]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10d      	bne.n	800672a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800670e:	4b88      	ldr	r3, [pc, #544]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	4a87      	ldr	r2, [pc, #540]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006718:	61d3      	str	r3, [r2, #28]
 800671a:	4b85      	ldr	r3, [pc, #532]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006722:	60bb      	str	r3, [r7, #8]
 8006724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006726:	2301      	movs	r3, #1
 8006728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800672a:	4b82      	ldr	r3, [pc, #520]	; (8006934 <HAL_RCC_OscConfig+0x4c8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d118      	bne.n	8006768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006736:	4b7f      	ldr	r3, [pc, #508]	; (8006934 <HAL_RCC_OscConfig+0x4c8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a7e      	ldr	r2, [pc, #504]	; (8006934 <HAL_RCC_OscConfig+0x4c8>)
 800673c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006742:	f7ff fa4f 	bl	8005be4 <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800674a:	f7ff fa4b 	bl	8005be4 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b64      	cmp	r3, #100	; 0x64
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e103      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800675c:	4b75      	ldr	r3, [pc, #468]	; (8006934 <HAL_RCC_OscConfig+0x4c8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d106      	bne.n	800677e <HAL_RCC_OscConfig+0x312>
 8006770:	4b6f      	ldr	r3, [pc, #444]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	4a6e      	ldr	r2, [pc, #440]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006776:	f043 0301 	orr.w	r3, r3, #1
 800677a:	6213      	str	r3, [r2, #32]
 800677c:	e02d      	b.n	80067da <HAL_RCC_OscConfig+0x36e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10c      	bne.n	80067a0 <HAL_RCC_OscConfig+0x334>
 8006786:	4b6a      	ldr	r3, [pc, #424]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	4a69      	ldr	r2, [pc, #420]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	6213      	str	r3, [r2, #32]
 8006792:	4b67      	ldr	r3, [pc, #412]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	4a66      	ldr	r2, [pc, #408]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006798:	f023 0304 	bic.w	r3, r3, #4
 800679c:	6213      	str	r3, [r2, #32]
 800679e:	e01c      	b.n	80067da <HAL_RCC_OscConfig+0x36e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	2b05      	cmp	r3, #5
 80067a6:	d10c      	bne.n	80067c2 <HAL_RCC_OscConfig+0x356>
 80067a8:	4b61      	ldr	r3, [pc, #388]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	4a60      	ldr	r2, [pc, #384]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80067ae:	f043 0304 	orr.w	r3, r3, #4
 80067b2:	6213      	str	r3, [r2, #32]
 80067b4:	4b5e      	ldr	r3, [pc, #376]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	4a5d      	ldr	r2, [pc, #372]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80067ba:	f043 0301 	orr.w	r3, r3, #1
 80067be:	6213      	str	r3, [r2, #32]
 80067c0:	e00b      	b.n	80067da <HAL_RCC_OscConfig+0x36e>
 80067c2:	4b5b      	ldr	r3, [pc, #364]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	4a5a      	ldr	r2, [pc, #360]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	6213      	str	r3, [r2, #32]
 80067ce:	4b58      	ldr	r3, [pc, #352]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	4a57      	ldr	r2, [pc, #348]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80067d4:	f023 0304 	bic.w	r3, r3, #4
 80067d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d015      	beq.n	800680e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067e2:	f7ff f9ff 	bl	8005be4 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e8:	e00a      	b.n	8006800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ea:	f7ff f9fb 	bl	8005be4 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e0b1      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006800:	4b4b      	ldr	r3, [pc, #300]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0ee      	beq.n	80067ea <HAL_RCC_OscConfig+0x37e>
 800680c:	e014      	b.n	8006838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800680e:	f7ff f9e9 	bl	8005be4 <HAL_GetTick>
 8006812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006814:	e00a      	b.n	800682c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006816:	f7ff f9e5 	bl	8005be4 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	f241 3288 	movw	r2, #5000	; 0x1388
 8006824:	4293      	cmp	r3, r2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e09b      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800682c:	4b40      	ldr	r3, [pc, #256]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1ee      	bne.n	8006816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d105      	bne.n	800684a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800683e:	4b3c      	ldr	r3, [pc, #240]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	4a3b      	ldr	r2, [pc, #236]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8087 	beq.w	8006962 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006854:	4b36      	ldr	r3, [pc, #216]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f003 030c 	and.w	r3, r3, #12
 800685c:	2b08      	cmp	r3, #8
 800685e:	d061      	beq.n	8006924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d146      	bne.n	80068f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006868:	4b33      	ldr	r3, [pc, #204]	; (8006938 <HAL_RCC_OscConfig+0x4cc>)
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800686e:	f7ff f9b9 	bl	8005be4 <HAL_GetTick>
 8006872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006874:	e008      	b.n	8006888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006876:	f7ff f9b5 	bl	8005be4 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e06d      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006888:	4b29      	ldr	r3, [pc, #164]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1f0      	bne.n	8006876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689c:	d108      	bne.n	80068b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800689e:	4b24      	ldr	r3, [pc, #144]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	4921      	ldr	r1, [pc, #132]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068b0:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a19      	ldr	r1, [r3, #32]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	430b      	orrs	r3, r1
 80068c2:	491b      	ldr	r1, [pc, #108]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068c8:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <HAL_RCC_OscConfig+0x4cc>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ce:	f7ff f989 	bl	8005be4 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068d4:	e008      	b.n	80068e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068d6:	f7ff f985 	bl	8005be4 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e03d      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f0      	beq.n	80068d6 <HAL_RCC_OscConfig+0x46a>
 80068f4:	e035      	b.n	8006962 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f6:	4b10      	ldr	r3, [pc, #64]	; (8006938 <HAL_RCC_OscConfig+0x4cc>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fc:	f7ff f972 	bl	8005be4 <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006904:	f7ff f96e 	bl	8005be4 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e026      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <HAL_RCC_OscConfig+0x4c4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0x498>
 8006922:	e01e      	b.n	8006962 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d107      	bne.n	800693c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e019      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
 8006930:	40021000 	.word	0x40021000
 8006934:	40007000 	.word	0x40007000
 8006938:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800693c:	4b0b      	ldr	r3, [pc, #44]	; (800696c <HAL_RCC_OscConfig+0x500>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	429a      	cmp	r2, r3
 800694e:	d106      	bne.n	800695e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695a:	429a      	cmp	r2, r3
 800695c:	d001      	beq.n	8006962 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40021000 	.word	0x40021000

08006970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0d0      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006984:	4b6a      	ldr	r3, [pc, #424]	; (8006b30 <HAL_RCC_ClockConfig+0x1c0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d910      	bls.n	80069b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006992:	4b67      	ldr	r3, [pc, #412]	; (8006b30 <HAL_RCC_ClockConfig+0x1c0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f023 0207 	bic.w	r2, r3, #7
 800699a:	4965      	ldr	r1, [pc, #404]	; (8006b30 <HAL_RCC_ClockConfig+0x1c0>)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	4313      	orrs	r3, r2
 80069a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069a2:	4b63      	ldr	r3, [pc, #396]	; (8006b30 <HAL_RCC_ClockConfig+0x1c0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d001      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0b8      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d020      	beq.n	8006a02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d005      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069cc:	4b59      	ldr	r3, [pc, #356]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4a58      	ldr	r2, [pc, #352]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 80069d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80069d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069e4:	4b53      	ldr	r3, [pc, #332]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a52      	ldr	r2, [pc, #328]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80069ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069f0:	4b50      	ldr	r3, [pc, #320]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	494d      	ldr	r1, [pc, #308]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d040      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d107      	bne.n	8006a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a16:	4b47      	ldr	r3, [pc, #284]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d115      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e07f      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d107      	bne.n	8006a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a2e:	4b41      	ldr	r3, [pc, #260]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e073      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a3e:	4b3d      	ldr	r3, [pc, #244]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e06b      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a4e:	4b39      	ldr	r3, [pc, #228]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f023 0203 	bic.w	r2, r3, #3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4936      	ldr	r1, [pc, #216]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a60:	f7ff f8c0 	bl	8005be4 <HAL_GetTick>
 8006a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a66:	e00a      	b.n	8006a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a68:	f7ff f8bc 	bl	8005be4 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e053      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a7e:	4b2d      	ldr	r3, [pc, #180]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f003 020c 	and.w	r2, r3, #12
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d1eb      	bne.n	8006a68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <HAL_RCC_ClockConfig+0x1c0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d210      	bcs.n	8006ac0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9e:	4b24      	ldr	r3, [pc, #144]	; (8006b30 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f023 0207 	bic.w	r2, r3, #7
 8006aa6:	4922      	ldr	r1, [pc, #136]	; (8006b30 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aae:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d001      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e032      	b.n	8006b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d008      	beq.n	8006ade <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	4916      	ldr	r1, [pc, #88]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d009      	beq.n	8006afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006aea:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	490e      	ldr	r1, [pc, #56]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006afe:	f000 f821 	bl	8006b44 <HAL_RCC_GetSysClockFreq>
 8006b02:	4602      	mov	r2, r0
 8006b04:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	091b      	lsrs	r3, r3, #4
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	490a      	ldr	r1, [pc, #40]	; (8006b38 <HAL_RCC_ClockConfig+0x1c8>)
 8006b10:	5ccb      	ldrb	r3, [r1, r3]
 8006b12:	fa22 f303 	lsr.w	r3, r2, r3
 8006b16:	4a09      	ldr	r2, [pc, #36]	; (8006b3c <HAL_RCC_ClockConfig+0x1cc>)
 8006b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b1a:	4b09      	ldr	r3, [pc, #36]	; (8006b40 <HAL_RCC_ClockConfig+0x1d0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff f81e 	bl	8005b60 <HAL_InitTick>

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40022000 	.word	0x40022000
 8006b34:	40021000 	.word	0x40021000
 8006b38:	0800c94c 	.word	0x0800c94c
 8006b3c:	20000134 	.word	0x20000134
 8006b40:	20000138 	.word	0x20000138

08006b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	2300      	movs	r3, #0
 8006b58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 030c 	and.w	r3, r3, #12
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d002      	beq.n	8006b74 <HAL_RCC_GetSysClockFreq+0x30>
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d003      	beq.n	8006b7a <HAL_RCC_GetSysClockFreq+0x36>
 8006b72:	e027      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b74:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8006b76:	613b      	str	r3, [r7, #16]
      break;
 8006b78:	e027      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	0c9b      	lsrs	r3, r3, #18
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	4a17      	ldr	r2, [pc, #92]	; (8006be0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006b84:	5cd3      	ldrb	r3, [r2, r3]
 8006b86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d010      	beq.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b92:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	0c5b      	lsrs	r3, r3, #17
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	4a11      	ldr	r2, [pc, #68]	; (8006be4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006b9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ba0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a0d      	ldr	r2, [pc, #52]	; (8006bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8006ba6:	fb03 f202 	mul.w	r2, r3, r2
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	e004      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a0c      	ldr	r2, [pc, #48]	; (8006be8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006bb8:	fb02 f303 	mul.w	r3, r2, r3
 8006bbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	613b      	str	r3, [r7, #16]
      break;
 8006bc2:	e002      	b.n	8006bca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <HAL_RCC_GetSysClockFreq+0x98>)
 8006bc6:	613b      	str	r3, [r7, #16]
      break;
 8006bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bca:	693b      	ldr	r3, [r7, #16]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	371c      	adds	r7, #28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	007a1200 	.word	0x007a1200
 8006be0:	0800c964 	.word	0x0800c964
 8006be4:	0800c974 	.word	0x0800c974
 8006be8:	003d0900 	.word	0x003d0900

08006bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bf0:	4b02      	ldr	r3, [pc, #8]	; (8006bfc <HAL_RCC_GetHCLKFreq+0x10>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr
 8006bfc:	20000134 	.word	0x20000134

08006c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c04:	f7ff fff2 	bl	8006bec <HAL_RCC_GetHCLKFreq>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	4903      	ldr	r1, [pc, #12]	; (8006c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c16:	5ccb      	ldrb	r3, [r1, r3]
 8006c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40021000 	.word	0x40021000
 8006c24:	0800c95c 	.word	0x0800c95c

08006c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c2c:	f7ff ffde 	bl	8006bec <HAL_RCC_GetHCLKFreq>
 8006c30:	4602      	mov	r2, r0
 8006c32:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	0adb      	lsrs	r3, r3, #11
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	4903      	ldr	r1, [pc, #12]	; (8006c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c3e:	5ccb      	ldrb	r3, [r1, r3]
 8006c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	0800c95c 	.word	0x0800c95c

08006c50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c58:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <RCC_Delay+0x34>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a0a      	ldr	r2, [pc, #40]	; (8006c88 <RCC_Delay+0x38>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	0a5b      	lsrs	r3, r3, #9
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c6c:	bf00      	nop
  }
  while (Delay --);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	1e5a      	subs	r2, r3, #1
 8006c72:	60fa      	str	r2, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f9      	bne.n	8006c6c <RCC_Delay+0x1c>
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr
 8006c84:	20000134 	.word	0x20000134
 8006c88:	10624dd3 	.word	0x10624dd3

08006c8c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_SRAM_Init+0x1c>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca6:	d101      	bne.n	8006cac <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e038      	b.n	8006d1e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d106      	bne.n	8006cc6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f7fe fb2b 	bl	800531c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	4619      	mov	r1, r3
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	f001 f993 	bl	8007ffc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	f001 f9f5 	bl	80080d0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6858      	ldr	r0, [r3, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	f001 fa20 	bl	8008138 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	6892      	ldr	r2, [r2, #8]
 8006d00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	6892      	ldr	r2, [r2, #8]
 8006d0c:	f041 0101 	orr.w	r1, r1, #1
 8006d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e041      	b.n	8006dbc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d106      	bne.n	8006d52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7fe fdb5 	bl	80058bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3304      	adds	r3, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f000 f955 	bl	8007014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d001      	beq.n	8006ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e044      	b.n	8006e66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1d      	ldr	r2, [pc, #116]	; (8006e70 <HAL_TIM_Base_Start_IT+0xac>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d018      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x6c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <HAL_TIM_Base_Start_IT+0xb0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d013      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x6c>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e10:	d00e      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x6c>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a18      	ldr	r2, [pc, #96]	; (8006e78 <HAL_TIM_Base_Start_IT+0xb4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d009      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x6c>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <HAL_TIM_Base_Start_IT+0xb8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d004      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x6c>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a15      	ldr	r2, [pc, #84]	; (8006e80 <HAL_TIM_Base_Start_IT+0xbc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d111      	bne.n	8006e54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b06      	cmp	r3, #6
 8006e40:	d010      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0201 	orr.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e52:	e007      	b.n	8006e64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr
 8006e70:	40012c00 	.word	0x40012c00
 8006e74:	40013400 	.word	0x40013400
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00

08006e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e0b4      	b.n	800700a <HAL_TIM_ConfigClockSource+0x186>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed8:	d03e      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0xd4>
 8006eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ede:	f200 8087 	bhi.w	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee6:	f000 8086 	beq.w	8006ff6 <HAL_TIM_ConfigClockSource+0x172>
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eee:	d87f      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef0:	2b70      	cmp	r3, #112	; 0x70
 8006ef2:	d01a      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0xa6>
 8006ef4:	2b70      	cmp	r3, #112	; 0x70
 8006ef6:	d87b      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef8:	2b60      	cmp	r3, #96	; 0x60
 8006efa:	d050      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x11a>
 8006efc:	2b60      	cmp	r3, #96	; 0x60
 8006efe:	d877      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f00:	2b50      	cmp	r3, #80	; 0x50
 8006f02:	d03c      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0xfa>
 8006f04:	2b50      	cmp	r3, #80	; 0x50
 8006f06:	d873      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f08:	2b40      	cmp	r3, #64	; 0x40
 8006f0a:	d058      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x13a>
 8006f0c:	2b40      	cmp	r3, #64	; 0x40
 8006f0e:	d86f      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f10:	2b30      	cmp	r3, #48	; 0x30
 8006f12:	d064      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f14:	2b30      	cmp	r3, #48	; 0x30
 8006f16:	d86b      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d060      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d867      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d05c      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d05a      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f28:	e062      	b.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f3a:	f000 f95c 	bl	80071f6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	609a      	str	r2, [r3, #8]
      break;
 8006f56:	e04f      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f68:	f000 f945 	bl	80071f6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f7a:	609a      	str	r2, [r3, #8]
      break;
 8006f7c:	e03c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f000 f8bc 	bl	8007108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2150      	movs	r1, #80	; 0x50
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f913 	bl	80071c2 <TIM_ITRx_SetConfig>
      break;
 8006f9c:	e02c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006faa:	461a      	mov	r2, r3
 8006fac:	f000 f8da 	bl	8007164 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2160      	movs	r1, #96	; 0x60
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f903 	bl	80071c2 <TIM_ITRx_SetConfig>
      break;
 8006fbc:	e01c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f000 f89c 	bl	8007108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2140      	movs	r1, #64	; 0x40
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 f8f3 	bl	80071c2 <TIM_ITRx_SetConfig>
      break;
 8006fdc:	e00c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f000 f8ea 	bl	80071c2 <TIM_ITRx_SetConfig>
      break;
 8006fee:	e003      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff4:	e000      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a33      	ldr	r2, [pc, #204]	; (80070f4 <TIM_Base_SetConfig+0xe0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d013      	beq.n	8007054 <TIM_Base_SetConfig+0x40>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a32      	ldr	r2, [pc, #200]	; (80070f8 <TIM_Base_SetConfig+0xe4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00f      	beq.n	8007054 <TIM_Base_SetConfig+0x40>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800703a:	d00b      	beq.n	8007054 <TIM_Base_SetConfig+0x40>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a2f      	ldr	r2, [pc, #188]	; (80070fc <TIM_Base_SetConfig+0xe8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d007      	beq.n	8007054 <TIM_Base_SetConfig+0x40>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a2e      	ldr	r2, [pc, #184]	; (8007100 <TIM_Base_SetConfig+0xec>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_Base_SetConfig+0x40>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <TIM_Base_SetConfig+0xf0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d108      	bne.n	8007066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a22      	ldr	r2, [pc, #136]	; (80070f4 <TIM_Base_SetConfig+0xe0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <TIM_Base_SetConfig+0x82>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a21      	ldr	r2, [pc, #132]	; (80070f8 <TIM_Base_SetConfig+0xe4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00f      	beq.n	8007096 <TIM_Base_SetConfig+0x82>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707c:	d00b      	beq.n	8007096 <TIM_Base_SetConfig+0x82>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1e      	ldr	r2, [pc, #120]	; (80070fc <TIM_Base_SetConfig+0xe8>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d007      	beq.n	8007096 <TIM_Base_SetConfig+0x82>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a1d      	ldr	r2, [pc, #116]	; (8007100 <TIM_Base_SetConfig+0xec>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d003      	beq.n	8007096 <TIM_Base_SetConfig+0x82>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a1c      	ldr	r2, [pc, #112]	; (8007104 <TIM_Base_SetConfig+0xf0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d108      	bne.n	80070a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a09      	ldr	r2, [pc, #36]	; (80070f4 <TIM_Base_SetConfig+0xe0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d003      	beq.n	80070dc <TIM_Base_SetConfig+0xc8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a08      	ldr	r2, [pc, #32]	; (80070f8 <TIM_Base_SetConfig+0xe4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d103      	bne.n	80070e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	615a      	str	r2, [r3, #20]
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40013400 	.word	0x40013400
 80070fc:	40000400 	.word	0x40000400
 8007100:	40000800 	.word	0x40000800
 8007104:	40000c00 	.word	0x40000c00

08007108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	f023 0201 	bic.w	r2, r3, #1
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f023 030a 	bic.w	r3, r3, #10
 8007144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f023 0210 	bic.w	r2, r3, #16
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800718e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	031b      	lsls	r3, r3, #12
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	621a      	str	r2, [r3, #32]
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	bc80      	pop	{r7}
 80071c0:	4770      	bx	lr

080071c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	f043 0307 	orr.w	r3, r3, #7
 80071e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	609a      	str	r2, [r3, #8]
}
 80071ec:	bf00      	nop
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bc80      	pop	{r7}
 80071f4:	4770      	bx	lr

080071f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b087      	sub	sp, #28
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007210:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	021a      	lsls	r2, r3, #8
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	431a      	orrs	r2, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	4313      	orrs	r3, r2
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	609a      	str	r2, [r3, #8]
}
 800722a:	bf00      	nop
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	bc80      	pop	{r7}
 8007232:	4770      	bx	lr

08007234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007248:	2302      	movs	r3, #2
 800724a:	e050      	b.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a19      	ldr	r2, [pc, #100]	; (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a2:	d00e      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a15      	ldr	r2, [pc, #84]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a14      	ldr	r2, [pc, #80]	; (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a12      	ldr	r2, [pc, #72]	; (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d10c      	bne.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr
 80072f8:	40012c00 	.word	0x40012c00
 80072fc:	40013400 	.word	0x40013400
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00

0800730c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e042      	b.n	80073a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fe fb2a 	bl	800598c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2224      	movs	r2, #36	; 0x24
 800733c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800734e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fdc5 	bl	8007ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695a      	ldr	r2, [r3, #20]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08a      	sub	sp, #40	; 0x28
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	4613      	mov	r3, r2
 80073ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d16d      	bne.n	80074a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <HAL_UART_Transmit+0x2c>
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e066      	b.n	80074aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2221      	movs	r2, #33	; 0x21
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073ea:	f7fe fbfb 	bl	8005be4 <HAL_GetTick>
 80073ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	88fa      	ldrh	r2, [r7, #6]
 80073f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	88fa      	ldrh	r2, [r7, #6]
 80073fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007404:	d108      	bne.n	8007418 <HAL_UART_Transmit+0x6c>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d104      	bne.n	8007418 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	61bb      	str	r3, [r7, #24]
 8007416:	e003      	b.n	8007420 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800741c:	2300      	movs	r3, #0
 800741e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007420:	e02a      	b.n	8007478 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2200      	movs	r2, #0
 800742a:	2180      	movs	r1, #128	; 0x80
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fb14 	bl	8007a5a <UART_WaitOnFlagUntilTimeout>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e036      	b.n	80074aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10b      	bne.n	800745a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007450:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	3302      	adds	r3, #2
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	e007      	b.n	800746a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	781a      	ldrb	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	3301      	adds	r3, #1
 8007468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1cf      	bne.n	8007422 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2200      	movs	r2, #0
 800748a:	2140      	movs	r1, #64	; 0x40
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 fae4 	bl	8007a5a <UART_WaitOnFlagUntilTimeout>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e006      	b.n	80074aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	e000      	b.n	80074aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
  }
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	4613      	mov	r3, r2
 80074be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d112      	bne.n	80074f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <HAL_UART_Receive_IT+0x26>
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e00b      	b.n	80074f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	461a      	mov	r2, r3
 80074e6:	68b9      	ldr	r1, [r7, #8]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fb24 	bl	8007b36 <UART_Start_Receive_IT>
 80074ee:	4603      	mov	r3, r0
 80074f0:	e000      	b.n	80074f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80074f2:	2302      	movs	r3, #2
  }
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b0ba      	sub	sp, #232	; 0xe8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007522:	2300      	movs	r3, #0
 8007524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007528:	2300      	movs	r3, #0
 800752a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800752e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800753a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10f      	bne.n	8007562 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b00      	cmp	r3, #0
 800754c:	d009      	beq.n	8007562 <HAL_UART_IRQHandler+0x66>
 800754e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fc01 	bl	8007d62 <UART_Receive_IT>
      return;
 8007560:	e25b      	b.n	8007a1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 80de 	beq.w	8007728 <HAL_UART_IRQHandler+0x22c>
 800756c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	d106      	bne.n	8007586 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800757c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80d1 	beq.w	8007728 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <HAL_UART_IRQHandler+0xae>
 8007592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759a:	2b00      	cmp	r3, #0
 800759c:	d005      	beq.n	80075aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a2:	f043 0201 	orr.w	r2, r3, #1
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <HAL_UART_IRQHandler+0xd2>
 80075b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c6:	f043 0202 	orr.w	r2, r3, #2
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00b      	beq.n	80075f2 <HAL_UART_IRQHandler+0xf6>
 80075da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d005      	beq.n	80075f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ea:	f043 0204 	orr.w	r2, r3, #4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f6:	f003 0308 	and.w	r3, r3, #8
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d011      	beq.n	8007622 <HAL_UART_IRQHandler+0x126>
 80075fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d105      	bne.n	8007616 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800760a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	f043 0208 	orr.w	r2, r3, #8
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 81f2 	beq.w	8007a10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b00      	cmp	r3, #0
 8007636:	d008      	beq.n	800764a <HAL_UART_IRQHandler+0x14e>
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fb8c 	bl	8007d62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <HAL_UART_IRQHandler+0x17a>
 800766e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007672:	2b00      	cmp	r3, #0
 8007674:	d04f      	beq.n	8007716 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa96 	bl	8007ba8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d041      	beq.n	800770e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3314      	adds	r3, #20
 8007690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3314      	adds	r3, #20
 80076b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1d9      	bne.n	800768a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d013      	beq.n	8007706 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	4a7e      	ldr	r2, [pc, #504]	; (80078dc <HAL_UART_IRQHandler+0x3e0>)
 80076e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe fbf0 	bl	8005ed0 <HAL_DMA_Abort_IT>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d016      	beq.n	8007724 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007704:	e00e      	b.n	8007724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f993 	bl	8007a32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770c:	e00a      	b.n	8007724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f98f 	bl	8007a32 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	e006      	b.n	8007724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f98b 	bl	8007a32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007722:	e175      	b.n	8007a10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007724:	bf00      	nop
    return;
 8007726:	e173      	b.n	8007a10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	2b01      	cmp	r3, #1
 800772e:	f040 814f 	bne.w	80079d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007736:	f003 0310 	and.w	r3, r3, #16
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 8148 	beq.w	80079d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 8141 	beq.w	80079d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 80b6 	beq.w	80078e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 8145 	beq.w	8007a14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800778e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007792:	429a      	cmp	r2, r3
 8007794:	f080 813e 	bcs.w	8007a14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800779e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	f000 8088 	beq.w	80078bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	330c      	adds	r3, #12
 80077d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1d9      	bne.n	80077ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3314      	adds	r3, #20
 80077fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800780a:	f023 0301 	bic.w	r3, r3, #1
 800780e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3314      	adds	r3, #20
 8007818:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800781c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007820:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007824:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800782e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e1      	bne.n	80077f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3314      	adds	r3, #20
 800783a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800784a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3314      	adds	r3, #20
 8007854:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007858:	66fa      	str	r2, [r7, #108]	; 0x6c
 800785a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800785e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e3      	bne.n	8007834 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800788a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800788c:	f023 0310 	bic.w	r3, r3, #16
 8007890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800789e:	65ba      	str	r2, [r7, #88]	; 0x58
 80078a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e3      	bne.n	800787a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe facf 	bl	8005e5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f8b6 	bl	8007a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078d8:	e09c      	b.n	8007a14 <HAL_UART_IRQHandler+0x518>
 80078da:	bf00      	nop
 80078dc:	08007c6d 	.word	0x08007c6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 808e 	beq.w	8007a18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80078fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 8089 	beq.w	8007a18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	330c      	adds	r3, #12
 800790c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800791c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	330c      	adds	r3, #12
 8007926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800792a:	647a      	str	r2, [r7, #68]	; 0x44
 800792c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e3      	bne.n	8007906 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3314      	adds	r3, #20
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	623b      	str	r3, [r7, #32]
   return(result);
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3314      	adds	r3, #20
 800795e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007962:	633a      	str	r2, [r7, #48]	; 0x30
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e3      	bne.n	800793e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	60fb      	str	r3, [r7, #12]
   return(result);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0310 	bic.w	r3, r3, #16
 800799a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	330c      	adds	r3, #12
 80079a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079a8:	61fa      	str	r2, [r7, #28]
 80079aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	69b9      	ldr	r1, [r7, #24]
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	617b      	str	r3, [r7, #20]
   return(result);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e3      	bne.n	8007984 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f83b 	bl	8007a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079ce:	e023      	b.n	8007a18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <HAL_UART_IRQHandler+0x4f4>
 80079dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f953 	bl	8007c94 <UART_Transmit_IT>
    return;
 80079ee:	e014      	b.n	8007a1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00e      	beq.n	8007a1a <HAL_UART_IRQHandler+0x51e>
 80079fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d008      	beq.n	8007a1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f992 	bl	8007d32 <UART_EndTransmit_IT>
    return;
 8007a0e:	e004      	b.n	8007a1a <HAL_UART_IRQHandler+0x51e>
    return;
 8007a10:	bf00      	nop
 8007a12:	e002      	b.n	8007a1a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a14:	bf00      	nop
 8007a16:	e000      	b.n	8007a1a <HAL_UART_IRQHandler+0x51e>
      return;
 8007a18:	bf00      	nop
  }
}
 8007a1a:	37e8      	adds	r7, #232	; 0xe8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr

08007a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr

08007a5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b090      	sub	sp, #64	; 0x40
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	4613      	mov	r3, r2
 8007a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a6a:	e050      	b.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a72:	d04c      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8007a7a:	f7fe f8b3 	bl	8005be4 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d241      	bcs.n	8007b0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	330c      	adds	r3, #12
 8007aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007aaa:	637a      	str	r2, [r7, #52]	; 0x34
 8007aac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e5      	bne.n	8007a8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3314      	adds	r3, #20
 8007ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f023 0301 	bic.w	r3, r3, #1
 8007ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3314      	adds	r3, #20
 8007adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ade:	623a      	str	r2, [r7, #32]
 8007ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	69f9      	ldr	r1, [r7, #28]
 8007ae4:	6a3a      	ldr	r2, [r7, #32]
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e5      	bne.n	8007abe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e00f      	b.n	8007b2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4013      	ands	r3, r2
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	bf0c      	ite	eq
 8007b1e:	2301      	moveq	r3, #1
 8007b20:	2300      	movne	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d09f      	beq.n	8007a6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3740      	adds	r7, #64	; 0x40
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	4613      	mov	r3, r2
 8007b42:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	88fa      	ldrh	r2, [r7, #6]
 8007b4e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	88fa      	ldrh	r2, [r7, #6]
 8007b54:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2222      	movs	r2, #34	; 0x22
 8007b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d007      	beq.n	8007b7c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b7a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695a      	ldr	r2, [r3, #20]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0220 	orr.w	r2, r2, #32
 8007b9a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr

08007ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b095      	sub	sp, #84	; 0x54
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bd0:	643a      	str	r2, [r7, #64]	; 0x40
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e5      	bne.n	8007bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3314      	adds	r3, #20
 8007bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f023 0301 	bic.w	r3, r3, #1
 8007bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3314      	adds	r3, #20
 8007c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e5      	bne.n	8007be4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d119      	bne.n	8007c54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f023 0310 	bic.w	r3, r3, #16
 8007c36:	647b      	str	r3, [r7, #68]	; 0x44
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	330c      	adds	r3, #12
 8007c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c40:	61ba      	str	r2, [r7, #24]
 8007c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6979      	ldr	r1, [r7, #20]
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	e841 2300 	strex	r3, r2, [r1]
 8007c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e5      	bne.n	8007c20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c62:	bf00      	nop
 8007c64:	3754      	adds	r7, #84	; 0x54
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr

08007c6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff fed3 	bl	8007a32 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b21      	cmp	r3, #33	; 0x21
 8007ca6:	d13e      	bne.n	8007d26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb0:	d114      	bne.n	8007cdc <UART_Transmit_IT+0x48>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d110      	bne.n	8007cdc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	1c9a      	adds	r2, r3, #2
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	621a      	str	r2, [r3, #32]
 8007cda:	e008      	b.n	8007cee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	1c59      	adds	r1, r3, #1
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	6211      	str	r1, [r2, #32]
 8007ce6:	781a      	ldrb	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10f      	bne.n	8007d22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	e000      	b.n	8007d28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d26:	2302      	movs	r3, #2
  }
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bc80      	pop	{r7}
 8007d30:	4770      	bx	lr

08007d32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff fe64 	bl	8007a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b08c      	sub	sp, #48	; 0x30
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b22      	cmp	r3, #34	; 0x22
 8007d74:	f040 80ae 	bne.w	8007ed4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d80:	d117      	bne.n	8007db2 <UART_Receive_IT+0x50>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d113      	bne.n	8007db2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	1c9a      	adds	r2, r3, #2
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	629a      	str	r2, [r3, #40]	; 0x28
 8007db0:	e026      	b.n	8007e00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007db8:	2300      	movs	r3, #0
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc4:	d007      	beq.n	8007dd6 <UART_Receive_IT+0x74>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10a      	bne.n	8007de4 <UART_Receive_IT+0x82>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e008      	b.n	8007df6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d15d      	bne.n	8007ed0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0220 	bic.w	r2, r2, #32
 8007e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68da      	ldr	r2, [r3, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695a      	ldr	r2, [r3, #20]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0201 	bic.w	r2, r2, #1
 8007e42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d135      	bne.n	8007ec6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f023 0310 	bic.w	r3, r3, #16
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	330c      	adds	r3, #12
 8007e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e80:	623a      	str	r2, [r7, #32]
 8007e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	69f9      	ldr	r1, [r7, #28]
 8007e86:	6a3a      	ldr	r2, [r7, #32]
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e5      	bne.n	8007e60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0310 	and.w	r3, r3, #16
 8007e9e:	2b10      	cmp	r3, #16
 8007ea0:	d10a      	bne.n	8007eb8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff fdc0 	bl	8007a44 <HAL_UARTEx_RxEventCallback>
 8007ec4:	e002      	b.n	8007ecc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fd fdb4 	bl	8005a34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	e002      	b.n	8007ed6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	e000      	b.n	8007ed6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ed4:	2302      	movs	r3, #2
  }
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3730      	adds	r7, #48	; 0x30
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007f1a:	f023 030c 	bic.w	r3, r3, #12
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6812      	ldr	r2, [r2, #0]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	430b      	orrs	r3, r1
 8007f26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	699a      	ldr	r2, [r3, #24]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a2c      	ldr	r2, [pc, #176]	; (8007ff4 <UART_SetConfig+0x114>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d103      	bne.n	8007f50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007f48:	f7fe fe6e 	bl	8006c28 <HAL_RCC_GetPCLK2Freq>
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	e002      	b.n	8007f56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007f50:	f7fe fe56 	bl	8006c00 <HAL_RCC_GetPCLK1Freq>
 8007f54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	009a      	lsls	r2, r3, #2
 8007f60:	441a      	add	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6c:	4a22      	ldr	r2, [pc, #136]	; (8007ff8 <UART_SetConfig+0x118>)
 8007f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f72:	095b      	lsrs	r3, r3, #5
 8007f74:	0119      	lsls	r1, r3, #4
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009a      	lsls	r2, r3, #2
 8007f80:	441a      	add	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <UART_SetConfig+0x118>)
 8007f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	2064      	movs	r0, #100	; 0x64
 8007f96:	fb00 f303 	mul.w	r3, r0, r3
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	3332      	adds	r3, #50	; 0x32
 8007fa0:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <UART_SetConfig+0x118>)
 8007fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa6:	095b      	lsrs	r3, r3, #5
 8007fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fac:	4419      	add	r1, r3
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009a      	lsls	r2, r3, #2
 8007fb8:	441a      	add	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <UART_SetConfig+0x118>)
 8007fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8007fca:	095b      	lsrs	r3, r3, #5
 8007fcc:	2064      	movs	r0, #100	; 0x64
 8007fce:	fb00 f303 	mul.w	r3, r0, r3
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	011b      	lsls	r3, r3, #4
 8007fd6:	3332      	adds	r3, #50	; 0x32
 8007fd8:	4a07      	ldr	r2, [pc, #28]	; (8007ff8 <UART_SetConfig+0x118>)
 8007fda:	fba2 2303 	umull	r2, r3, r2, r3
 8007fde:	095b      	lsrs	r3, r3, #5
 8007fe0:	f003 020f 	and.w	r2, r3, #15
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	440a      	add	r2, r1
 8007fea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	40013800 	.word	0x40013800
 8007ff8:	51eb851f 	.word	0x51eb851f

08007ffc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	f023 0101 	bic.w	r1, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	2b08      	cmp	r3, #8
 8008024:	d102      	bne.n	800802c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008026:	2340      	movs	r3, #64	; 0x40
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	e001      	b.n	8008030 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800803c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008042:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008048:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800804e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008054:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800805a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8008060:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8008066:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800806c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4313      	orrs	r3, r2
 800807e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800808a:	4b10      	ldr	r3, [pc, #64]	; (80080cc <FSMC_NORSRAM_Init+0xd0>)
 800808c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008094:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800809c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	43db      	mvns	r3, r3
 80080ac:	ea02 0103 	and.w	r1, r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	4319      	orrs	r1, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	0008fb7f 	.word	0x0008fb7f

080080d0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	431a      	orrs	r2, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	021b      	lsls	r3, r3, #8
 80080fc:	431a      	orrs	r2, r3
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	431a      	orrs	r2, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	3b01      	subs	r3, #1
 800810c:	051b      	lsls	r3, r3, #20
 800810e:	431a      	orrs	r2, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	3b02      	subs	r3, #2
 8008116:	061b      	lsls	r3, r3, #24
 8008118:	431a      	orrs	r2, r3
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	4313      	orrs	r3, r2
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	3201      	adds	r2, #1
 8008124:	4319      	orrs	r1, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	bc80      	pop	{r7}
 8008136:	4770      	bx	lr

08008138 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800814c:	d11d      	bne.n	800818a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008156:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008158:	4013      	ands	r3, r2
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	6811      	ldr	r1, [r2, #0]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	6852      	ldr	r2, [r2, #4]
 8008162:	0112      	lsls	r2, r2, #4
 8008164:	4311      	orrs	r1, r2
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	6892      	ldr	r2, [r2, #8]
 800816a:	0212      	lsls	r2, r2, #8
 800816c:	4311      	orrs	r1, r2
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	6992      	ldr	r2, [r2, #24]
 8008172:	4311      	orrs	r1, r2
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	68d2      	ldr	r2, [r2, #12]
 8008178:	0412      	lsls	r2, r2, #16
 800817a:	430a      	orrs	r2, r1
 800817c:	ea43 0102 	orr.w	r1, r3, r2
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008188:	e005      	b.n	8008196 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	bc80      	pop	{r7}
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	cff00000 	.word	0xcff00000

080081a8 <std>:
 80081a8:	2300      	movs	r3, #0
 80081aa:	b510      	push	{r4, lr}
 80081ac:	4604      	mov	r4, r0
 80081ae:	e9c0 3300 	strd	r3, r3, [r0]
 80081b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081b6:	6083      	str	r3, [r0, #8]
 80081b8:	8181      	strh	r1, [r0, #12]
 80081ba:	6643      	str	r3, [r0, #100]	; 0x64
 80081bc:	81c2      	strh	r2, [r0, #14]
 80081be:	6183      	str	r3, [r0, #24]
 80081c0:	4619      	mov	r1, r3
 80081c2:	2208      	movs	r2, #8
 80081c4:	305c      	adds	r0, #92	; 0x5c
 80081c6:	f000 f9ff 	bl	80085c8 <memset>
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <std+0x58>)
 80081cc:	6224      	str	r4, [r4, #32]
 80081ce:	6263      	str	r3, [r4, #36]	; 0x24
 80081d0:	4b0c      	ldr	r3, [pc, #48]	; (8008204 <std+0x5c>)
 80081d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80081d4:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <std+0x60>)
 80081d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081d8:	4b0c      	ldr	r3, [pc, #48]	; (800820c <std+0x64>)
 80081da:	6323      	str	r3, [r4, #48]	; 0x30
 80081dc:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <std+0x68>)
 80081de:	429c      	cmp	r4, r3
 80081e0:	d006      	beq.n	80081f0 <std+0x48>
 80081e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80081e6:	4294      	cmp	r4, r2
 80081e8:	d002      	beq.n	80081f0 <std+0x48>
 80081ea:	33d0      	adds	r3, #208	; 0xd0
 80081ec:	429c      	cmp	r4, r3
 80081ee:	d105      	bne.n	80081fc <std+0x54>
 80081f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f8:	f000 ba5e 	b.w	80086b8 <__retarget_lock_init_recursive>
 80081fc:	bd10      	pop	{r4, pc}
 80081fe:	bf00      	nop
 8008200:	08008419 	.word	0x08008419
 8008204:	0800843b 	.word	0x0800843b
 8008208:	08008473 	.word	0x08008473
 800820c:	08008497 	.word	0x08008497
 8008210:	2000037c 	.word	0x2000037c

08008214 <stdio_exit_handler>:
 8008214:	4a02      	ldr	r2, [pc, #8]	; (8008220 <stdio_exit_handler+0xc>)
 8008216:	4903      	ldr	r1, [pc, #12]	; (8008224 <stdio_exit_handler+0x10>)
 8008218:	4803      	ldr	r0, [pc, #12]	; (8008228 <stdio_exit_handler+0x14>)
 800821a:	f000 b869 	b.w	80082f0 <_fwalk_sglue>
 800821e:	bf00      	nop
 8008220:	20000140 	.word	0x20000140
 8008224:	08008f59 	.word	0x08008f59
 8008228:	2000014c 	.word	0x2000014c

0800822c <cleanup_stdio>:
 800822c:	6841      	ldr	r1, [r0, #4]
 800822e:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <cleanup_stdio+0x34>)
 8008230:	b510      	push	{r4, lr}
 8008232:	4299      	cmp	r1, r3
 8008234:	4604      	mov	r4, r0
 8008236:	d001      	beq.n	800823c <cleanup_stdio+0x10>
 8008238:	f000 fe8e 	bl	8008f58 <_fflush_r>
 800823c:	68a1      	ldr	r1, [r4, #8]
 800823e:	4b09      	ldr	r3, [pc, #36]	; (8008264 <cleanup_stdio+0x38>)
 8008240:	4299      	cmp	r1, r3
 8008242:	d002      	beq.n	800824a <cleanup_stdio+0x1e>
 8008244:	4620      	mov	r0, r4
 8008246:	f000 fe87 	bl	8008f58 <_fflush_r>
 800824a:	68e1      	ldr	r1, [r4, #12]
 800824c:	4b06      	ldr	r3, [pc, #24]	; (8008268 <cleanup_stdio+0x3c>)
 800824e:	4299      	cmp	r1, r3
 8008250:	d004      	beq.n	800825c <cleanup_stdio+0x30>
 8008252:	4620      	mov	r0, r4
 8008254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008258:	f000 be7e 	b.w	8008f58 <_fflush_r>
 800825c:	bd10      	pop	{r4, pc}
 800825e:	bf00      	nop
 8008260:	2000037c 	.word	0x2000037c
 8008264:	200003e4 	.word	0x200003e4
 8008268:	2000044c 	.word	0x2000044c

0800826c <global_stdio_init.part.0>:
 800826c:	b510      	push	{r4, lr}
 800826e:	4b0b      	ldr	r3, [pc, #44]	; (800829c <global_stdio_init.part.0+0x30>)
 8008270:	4c0b      	ldr	r4, [pc, #44]	; (80082a0 <global_stdio_init.part.0+0x34>)
 8008272:	4a0c      	ldr	r2, [pc, #48]	; (80082a4 <global_stdio_init.part.0+0x38>)
 8008274:	4620      	mov	r0, r4
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	2104      	movs	r1, #4
 800827a:	2200      	movs	r2, #0
 800827c:	f7ff ff94 	bl	80081a8 <std>
 8008280:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008284:	2201      	movs	r2, #1
 8008286:	2109      	movs	r1, #9
 8008288:	f7ff ff8e 	bl	80081a8 <std>
 800828c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008290:	2202      	movs	r2, #2
 8008292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008296:	2112      	movs	r1, #18
 8008298:	f7ff bf86 	b.w	80081a8 <std>
 800829c:	200004b4 	.word	0x200004b4
 80082a0:	2000037c 	.word	0x2000037c
 80082a4:	08008215 	.word	0x08008215

080082a8 <__sfp_lock_acquire>:
 80082a8:	4801      	ldr	r0, [pc, #4]	; (80082b0 <__sfp_lock_acquire+0x8>)
 80082aa:	f000 ba06 	b.w	80086ba <__retarget_lock_acquire_recursive>
 80082ae:	bf00      	nop
 80082b0:	200004bd 	.word	0x200004bd

080082b4 <__sfp_lock_release>:
 80082b4:	4801      	ldr	r0, [pc, #4]	; (80082bc <__sfp_lock_release+0x8>)
 80082b6:	f000 ba01 	b.w	80086bc <__retarget_lock_release_recursive>
 80082ba:	bf00      	nop
 80082bc:	200004bd 	.word	0x200004bd

080082c0 <__sinit>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	4604      	mov	r4, r0
 80082c4:	f7ff fff0 	bl	80082a8 <__sfp_lock_acquire>
 80082c8:	6a23      	ldr	r3, [r4, #32]
 80082ca:	b11b      	cbz	r3, 80082d4 <__sinit+0x14>
 80082cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082d0:	f7ff bff0 	b.w	80082b4 <__sfp_lock_release>
 80082d4:	4b04      	ldr	r3, [pc, #16]	; (80082e8 <__sinit+0x28>)
 80082d6:	6223      	str	r3, [r4, #32]
 80082d8:	4b04      	ldr	r3, [pc, #16]	; (80082ec <__sinit+0x2c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1f5      	bne.n	80082cc <__sinit+0xc>
 80082e0:	f7ff ffc4 	bl	800826c <global_stdio_init.part.0>
 80082e4:	e7f2      	b.n	80082cc <__sinit+0xc>
 80082e6:	bf00      	nop
 80082e8:	0800822d 	.word	0x0800822d
 80082ec:	200004b4 	.word	0x200004b4

080082f0 <_fwalk_sglue>:
 80082f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f4:	4607      	mov	r7, r0
 80082f6:	4688      	mov	r8, r1
 80082f8:	4614      	mov	r4, r2
 80082fa:	2600      	movs	r6, #0
 80082fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008300:	f1b9 0901 	subs.w	r9, r9, #1
 8008304:	d505      	bpl.n	8008312 <_fwalk_sglue+0x22>
 8008306:	6824      	ldr	r4, [r4, #0]
 8008308:	2c00      	cmp	r4, #0
 800830a:	d1f7      	bne.n	80082fc <_fwalk_sglue+0xc>
 800830c:	4630      	mov	r0, r6
 800830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008312:	89ab      	ldrh	r3, [r5, #12]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d907      	bls.n	8008328 <_fwalk_sglue+0x38>
 8008318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800831c:	3301      	adds	r3, #1
 800831e:	d003      	beq.n	8008328 <_fwalk_sglue+0x38>
 8008320:	4629      	mov	r1, r5
 8008322:	4638      	mov	r0, r7
 8008324:	47c0      	blx	r8
 8008326:	4306      	orrs	r6, r0
 8008328:	3568      	adds	r5, #104	; 0x68
 800832a:	e7e9      	b.n	8008300 <_fwalk_sglue+0x10>

0800832c <iprintf>:
 800832c:	b40f      	push	{r0, r1, r2, r3}
 800832e:	b507      	push	{r0, r1, r2, lr}
 8008330:	4906      	ldr	r1, [pc, #24]	; (800834c <iprintf+0x20>)
 8008332:	ab04      	add	r3, sp, #16
 8008334:	6808      	ldr	r0, [r1, #0]
 8008336:	f853 2b04 	ldr.w	r2, [r3], #4
 800833a:	6881      	ldr	r1, [r0, #8]
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	f000 fadb 	bl	80088f8 <_vfiprintf_r>
 8008342:	b003      	add	sp, #12
 8008344:	f85d eb04 	ldr.w	lr, [sp], #4
 8008348:	b004      	add	sp, #16
 800834a:	4770      	bx	lr
 800834c:	20000198 	.word	0x20000198

08008350 <putchar>:
 8008350:	4b02      	ldr	r3, [pc, #8]	; (800835c <putchar+0xc>)
 8008352:	4601      	mov	r1, r0
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	6882      	ldr	r2, [r0, #8]
 8008358:	f000 be87 	b.w	800906a <_putc_r>
 800835c:	20000198 	.word	0x20000198

08008360 <_puts_r>:
 8008360:	6a03      	ldr	r3, [r0, #32]
 8008362:	b570      	push	{r4, r5, r6, lr}
 8008364:	4605      	mov	r5, r0
 8008366:	460e      	mov	r6, r1
 8008368:	6884      	ldr	r4, [r0, #8]
 800836a:	b90b      	cbnz	r3, 8008370 <_puts_r+0x10>
 800836c:	f7ff ffa8 	bl	80082c0 <__sinit>
 8008370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008372:	07db      	lsls	r3, r3, #31
 8008374:	d405      	bmi.n	8008382 <_puts_r+0x22>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	0598      	lsls	r0, r3, #22
 800837a:	d402      	bmi.n	8008382 <_puts_r+0x22>
 800837c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800837e:	f000 f99c 	bl	80086ba <__retarget_lock_acquire_recursive>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	0719      	lsls	r1, r3, #28
 8008386:	d513      	bpl.n	80083b0 <_puts_r+0x50>
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	b18b      	cbz	r3, 80083b0 <_puts_r+0x50>
 800838c:	3e01      	subs	r6, #1
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008394:	3b01      	subs	r3, #1
 8008396:	60a3      	str	r3, [r4, #8]
 8008398:	b9e9      	cbnz	r1, 80083d6 <_puts_r+0x76>
 800839a:	2b00      	cmp	r3, #0
 800839c:	da2e      	bge.n	80083fc <_puts_r+0x9c>
 800839e:	4622      	mov	r2, r4
 80083a0:	210a      	movs	r1, #10
 80083a2:	4628      	mov	r0, r5
 80083a4:	f000 f87b 	bl	800849e <__swbuf_r>
 80083a8:	3001      	adds	r0, #1
 80083aa:	d007      	beq.n	80083bc <_puts_r+0x5c>
 80083ac:	250a      	movs	r5, #10
 80083ae:	e007      	b.n	80083c0 <_puts_r+0x60>
 80083b0:	4621      	mov	r1, r4
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 f8b0 	bl	8008518 <__swsetup_r>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d0e7      	beq.n	800838c <_puts_r+0x2c>
 80083bc:	f04f 35ff 	mov.w	r5, #4294967295
 80083c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083c2:	07da      	lsls	r2, r3, #31
 80083c4:	d405      	bmi.n	80083d2 <_puts_r+0x72>
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	059b      	lsls	r3, r3, #22
 80083ca:	d402      	bmi.n	80083d2 <_puts_r+0x72>
 80083cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ce:	f000 f975 	bl	80086bc <__retarget_lock_release_recursive>
 80083d2:	4628      	mov	r0, r5
 80083d4:	bd70      	pop	{r4, r5, r6, pc}
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da04      	bge.n	80083e4 <_puts_r+0x84>
 80083da:	69a2      	ldr	r2, [r4, #24]
 80083dc:	429a      	cmp	r2, r3
 80083de:	dc06      	bgt.n	80083ee <_puts_r+0x8e>
 80083e0:	290a      	cmp	r1, #10
 80083e2:	d004      	beq.n	80083ee <_puts_r+0x8e>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	6022      	str	r2, [r4, #0]
 80083ea:	7019      	strb	r1, [r3, #0]
 80083ec:	e7cf      	b.n	800838e <_puts_r+0x2e>
 80083ee:	4622      	mov	r2, r4
 80083f0:	4628      	mov	r0, r5
 80083f2:	f000 f854 	bl	800849e <__swbuf_r>
 80083f6:	3001      	adds	r0, #1
 80083f8:	d1c9      	bne.n	800838e <_puts_r+0x2e>
 80083fa:	e7df      	b.n	80083bc <_puts_r+0x5c>
 80083fc:	250a      	movs	r5, #10
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	6022      	str	r2, [r4, #0]
 8008404:	701d      	strb	r5, [r3, #0]
 8008406:	e7db      	b.n	80083c0 <_puts_r+0x60>

08008408 <puts>:
 8008408:	4b02      	ldr	r3, [pc, #8]	; (8008414 <puts+0xc>)
 800840a:	4601      	mov	r1, r0
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	f7ff bfa7 	b.w	8008360 <_puts_r>
 8008412:	bf00      	nop
 8008414:	20000198 	.word	0x20000198

08008418 <__sread>:
 8008418:	b510      	push	{r4, lr}
 800841a:	460c      	mov	r4, r1
 800841c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008420:	f000 f8fc 	bl	800861c <_read_r>
 8008424:	2800      	cmp	r0, #0
 8008426:	bfab      	itete	ge
 8008428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800842a:	89a3      	ldrhlt	r3, [r4, #12]
 800842c:	181b      	addge	r3, r3, r0
 800842e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008432:	bfac      	ite	ge
 8008434:	6563      	strge	r3, [r4, #84]	; 0x54
 8008436:	81a3      	strhlt	r3, [r4, #12]
 8008438:	bd10      	pop	{r4, pc}

0800843a <__swrite>:
 800843a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800843e:	461f      	mov	r7, r3
 8008440:	898b      	ldrh	r3, [r1, #12]
 8008442:	4605      	mov	r5, r0
 8008444:	05db      	lsls	r3, r3, #23
 8008446:	460c      	mov	r4, r1
 8008448:	4616      	mov	r6, r2
 800844a:	d505      	bpl.n	8008458 <__swrite+0x1e>
 800844c:	2302      	movs	r3, #2
 800844e:	2200      	movs	r2, #0
 8008450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008454:	f000 f8d0 	bl	80085f8 <_lseek_r>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	4632      	mov	r2, r6
 800845c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	4628      	mov	r0, r5
 8008464:	463b      	mov	r3, r7
 8008466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800846a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800846e:	f000 b8e7 	b.w	8008640 <_write_r>

08008472 <__sseek>:
 8008472:	b510      	push	{r4, lr}
 8008474:	460c      	mov	r4, r1
 8008476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847a:	f000 f8bd 	bl	80085f8 <_lseek_r>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	bf15      	itete	ne
 8008484:	6560      	strne	r0, [r4, #84]	; 0x54
 8008486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800848a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800848e:	81a3      	strheq	r3, [r4, #12]
 8008490:	bf18      	it	ne
 8008492:	81a3      	strhne	r3, [r4, #12]
 8008494:	bd10      	pop	{r4, pc}

08008496 <__sclose>:
 8008496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800849a:	f000 b89d 	b.w	80085d8 <_close_r>

0800849e <__swbuf_r>:
 800849e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a0:	460e      	mov	r6, r1
 80084a2:	4614      	mov	r4, r2
 80084a4:	4605      	mov	r5, r0
 80084a6:	b118      	cbz	r0, 80084b0 <__swbuf_r+0x12>
 80084a8:	6a03      	ldr	r3, [r0, #32]
 80084aa:	b90b      	cbnz	r3, 80084b0 <__swbuf_r+0x12>
 80084ac:	f7ff ff08 	bl	80082c0 <__sinit>
 80084b0:	69a3      	ldr	r3, [r4, #24]
 80084b2:	60a3      	str	r3, [r4, #8]
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	071a      	lsls	r2, r3, #28
 80084b8:	d525      	bpl.n	8008506 <__swbuf_r+0x68>
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	b31b      	cbz	r3, 8008506 <__swbuf_r+0x68>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	6922      	ldr	r2, [r4, #16]
 80084c2:	b2f6      	uxtb	r6, r6
 80084c4:	1a98      	subs	r0, r3, r2
 80084c6:	6963      	ldr	r3, [r4, #20]
 80084c8:	4637      	mov	r7, r6
 80084ca:	4283      	cmp	r3, r0
 80084cc:	dc04      	bgt.n	80084d8 <__swbuf_r+0x3a>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4628      	mov	r0, r5
 80084d2:	f000 fd41 	bl	8008f58 <_fflush_r>
 80084d6:	b9e0      	cbnz	r0, 8008512 <__swbuf_r+0x74>
 80084d8:	68a3      	ldr	r3, [r4, #8]
 80084da:	3b01      	subs	r3, #1
 80084dc:	60a3      	str	r3, [r4, #8]
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	6022      	str	r2, [r4, #0]
 80084e4:	701e      	strb	r6, [r3, #0]
 80084e6:	6962      	ldr	r2, [r4, #20]
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d004      	beq.n	80084f8 <__swbuf_r+0x5a>
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	07db      	lsls	r3, r3, #31
 80084f2:	d506      	bpl.n	8008502 <__swbuf_r+0x64>
 80084f4:	2e0a      	cmp	r6, #10
 80084f6:	d104      	bne.n	8008502 <__swbuf_r+0x64>
 80084f8:	4621      	mov	r1, r4
 80084fa:	4628      	mov	r0, r5
 80084fc:	f000 fd2c 	bl	8008f58 <_fflush_r>
 8008500:	b938      	cbnz	r0, 8008512 <__swbuf_r+0x74>
 8008502:	4638      	mov	r0, r7
 8008504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008506:	4621      	mov	r1, r4
 8008508:	4628      	mov	r0, r5
 800850a:	f000 f805 	bl	8008518 <__swsetup_r>
 800850e:	2800      	cmp	r0, #0
 8008510:	d0d5      	beq.n	80084be <__swbuf_r+0x20>
 8008512:	f04f 37ff 	mov.w	r7, #4294967295
 8008516:	e7f4      	b.n	8008502 <__swbuf_r+0x64>

08008518 <__swsetup_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4b2a      	ldr	r3, [pc, #168]	; (80085c4 <__swsetup_r+0xac>)
 800851c:	4605      	mov	r5, r0
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	460c      	mov	r4, r1
 8008522:	b118      	cbz	r0, 800852c <__swsetup_r+0x14>
 8008524:	6a03      	ldr	r3, [r0, #32]
 8008526:	b90b      	cbnz	r3, 800852c <__swsetup_r+0x14>
 8008528:	f7ff feca 	bl	80082c0 <__sinit>
 800852c:	89a3      	ldrh	r3, [r4, #12]
 800852e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008532:	0718      	lsls	r0, r3, #28
 8008534:	d422      	bmi.n	800857c <__swsetup_r+0x64>
 8008536:	06d9      	lsls	r1, r3, #27
 8008538:	d407      	bmi.n	800854a <__swsetup_r+0x32>
 800853a:	2309      	movs	r3, #9
 800853c:	602b      	str	r3, [r5, #0]
 800853e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008542:	f04f 30ff 	mov.w	r0, #4294967295
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	e034      	b.n	80085b4 <__swsetup_r+0x9c>
 800854a:	0758      	lsls	r0, r3, #29
 800854c:	d512      	bpl.n	8008574 <__swsetup_r+0x5c>
 800854e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008550:	b141      	cbz	r1, 8008564 <__swsetup_r+0x4c>
 8008552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008556:	4299      	cmp	r1, r3
 8008558:	d002      	beq.n	8008560 <__swsetup_r+0x48>
 800855a:	4628      	mov	r0, r5
 800855c:	f000 f8b0 	bl	80086c0 <_free_r>
 8008560:	2300      	movs	r3, #0
 8008562:	6363      	str	r3, [r4, #52]	; 0x34
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800856a:	81a3      	strh	r3, [r4, #12]
 800856c:	2300      	movs	r3, #0
 800856e:	6063      	str	r3, [r4, #4]
 8008570:	6923      	ldr	r3, [r4, #16]
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	89a3      	ldrh	r3, [r4, #12]
 8008576:	f043 0308 	orr.w	r3, r3, #8
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	b94b      	cbnz	r3, 8008594 <__swsetup_r+0x7c>
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800858a:	d003      	beq.n	8008594 <__swsetup_r+0x7c>
 800858c:	4621      	mov	r1, r4
 800858e:	4628      	mov	r0, r5
 8008590:	f000 fd2f 	bl	8008ff2 <__smakebuf_r>
 8008594:	89a0      	ldrh	r0, [r4, #12]
 8008596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800859a:	f010 0301 	ands.w	r3, r0, #1
 800859e:	d00a      	beq.n	80085b6 <__swsetup_r+0x9e>
 80085a0:	2300      	movs	r3, #0
 80085a2:	60a3      	str	r3, [r4, #8]
 80085a4:	6963      	ldr	r3, [r4, #20]
 80085a6:	425b      	negs	r3, r3
 80085a8:	61a3      	str	r3, [r4, #24]
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	b943      	cbnz	r3, 80085c0 <__swsetup_r+0xa8>
 80085ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085b2:	d1c4      	bne.n	800853e <__swsetup_r+0x26>
 80085b4:	bd38      	pop	{r3, r4, r5, pc}
 80085b6:	0781      	lsls	r1, r0, #30
 80085b8:	bf58      	it	pl
 80085ba:	6963      	ldrpl	r3, [r4, #20]
 80085bc:	60a3      	str	r3, [r4, #8]
 80085be:	e7f4      	b.n	80085aa <__swsetup_r+0x92>
 80085c0:	2000      	movs	r0, #0
 80085c2:	e7f7      	b.n	80085b4 <__swsetup_r+0x9c>
 80085c4:	20000198 	.word	0x20000198

080085c8 <memset>:
 80085c8:	4603      	mov	r3, r0
 80085ca:	4402      	add	r2, r0
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d100      	bne.n	80085d2 <memset+0xa>
 80085d0:	4770      	bx	lr
 80085d2:	f803 1b01 	strb.w	r1, [r3], #1
 80085d6:	e7f9      	b.n	80085cc <memset+0x4>

080085d8 <_close_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	2300      	movs	r3, #0
 80085dc:	4d05      	ldr	r5, [pc, #20]	; (80085f4 <_close_r+0x1c>)
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	602b      	str	r3, [r5, #0]
 80085e4:	f7fd f8ab 	bl	800573e <_close>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_close_r+0x1a>
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_close_r+0x1a>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	200004b8 	.word	0x200004b8

080085f8 <_lseek_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	2200      	movs	r2, #0
 8008602:	4d05      	ldr	r5, [pc, #20]	; (8008618 <_lseek_r+0x20>)
 8008604:	602a      	str	r2, [r5, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	f7fd f8bd 	bl	8005786 <_lseek>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d102      	bne.n	8008616 <_lseek_r+0x1e>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	b103      	cbz	r3, 8008616 <_lseek_r+0x1e>
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	200004b8 	.word	0x200004b8

0800861c <_read_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	4604      	mov	r4, r0
 8008620:	4608      	mov	r0, r1
 8008622:	4611      	mov	r1, r2
 8008624:	2200      	movs	r2, #0
 8008626:	4d05      	ldr	r5, [pc, #20]	; (800863c <_read_r+0x20>)
 8008628:	602a      	str	r2, [r5, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	f7fd f84e 	bl	80056cc <_read>
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	d102      	bne.n	800863a <_read_r+0x1e>
 8008634:	682b      	ldr	r3, [r5, #0]
 8008636:	b103      	cbz	r3, 800863a <_read_r+0x1e>
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	bd38      	pop	{r3, r4, r5, pc}
 800863c:	200004b8 	.word	0x200004b8

08008640 <_write_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	4611      	mov	r1, r2
 8008648:	2200      	movs	r2, #0
 800864a:	4d05      	ldr	r5, [pc, #20]	; (8008660 <_write_r+0x20>)
 800864c:	602a      	str	r2, [r5, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	f7fd f859 	bl	8005706 <_write>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d102      	bne.n	800865e <_write_r+0x1e>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b103      	cbz	r3, 800865e <_write_r+0x1e>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	200004b8 	.word	0x200004b8

08008664 <__errno>:
 8008664:	4b01      	ldr	r3, [pc, #4]	; (800866c <__errno+0x8>)
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20000198 	.word	0x20000198

08008670 <__libc_init_array>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	2600      	movs	r6, #0
 8008674:	4d0c      	ldr	r5, [pc, #48]	; (80086a8 <__libc_init_array+0x38>)
 8008676:	4c0d      	ldr	r4, [pc, #52]	; (80086ac <__libc_init_array+0x3c>)
 8008678:	1b64      	subs	r4, r4, r5
 800867a:	10a4      	asrs	r4, r4, #2
 800867c:	42a6      	cmp	r6, r4
 800867e:	d109      	bne.n	8008694 <__libc_init_array+0x24>
 8008680:	f000 fd68 	bl	8009154 <_init>
 8008684:	2600      	movs	r6, #0
 8008686:	4d0a      	ldr	r5, [pc, #40]	; (80086b0 <__libc_init_array+0x40>)
 8008688:	4c0a      	ldr	r4, [pc, #40]	; (80086b4 <__libc_init_array+0x44>)
 800868a:	1b64      	subs	r4, r4, r5
 800868c:	10a4      	asrs	r4, r4, #2
 800868e:	42a6      	cmp	r6, r4
 8008690:	d105      	bne.n	800869e <__libc_init_array+0x2e>
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	f855 3b04 	ldr.w	r3, [r5], #4
 8008698:	4798      	blx	r3
 800869a:	3601      	adds	r6, #1
 800869c:	e7ee      	b.n	800867c <__libc_init_array+0xc>
 800869e:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a2:	4798      	blx	r3
 80086a4:	3601      	adds	r6, #1
 80086a6:	e7f2      	b.n	800868e <__libc_init_array+0x1e>
 80086a8:	0800c9ac 	.word	0x0800c9ac
 80086ac:	0800c9ac 	.word	0x0800c9ac
 80086b0:	0800c9ac 	.word	0x0800c9ac
 80086b4:	0800c9b0 	.word	0x0800c9b0

080086b8 <__retarget_lock_init_recursive>:
 80086b8:	4770      	bx	lr

080086ba <__retarget_lock_acquire_recursive>:
 80086ba:	4770      	bx	lr

080086bc <__retarget_lock_release_recursive>:
 80086bc:	4770      	bx	lr
	...

080086c0 <_free_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4605      	mov	r5, r0
 80086c4:	2900      	cmp	r1, #0
 80086c6:	d040      	beq.n	800874a <_free_r+0x8a>
 80086c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086cc:	1f0c      	subs	r4, r1, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	bfb8      	it	lt
 80086d2:	18e4      	addlt	r4, r4, r3
 80086d4:	f000 f8dc 	bl	8008890 <__malloc_lock>
 80086d8:	4a1c      	ldr	r2, [pc, #112]	; (800874c <_free_r+0x8c>)
 80086da:	6813      	ldr	r3, [r2, #0]
 80086dc:	b933      	cbnz	r3, 80086ec <_free_r+0x2c>
 80086de:	6063      	str	r3, [r4, #4]
 80086e0:	6014      	str	r4, [r2, #0]
 80086e2:	4628      	mov	r0, r5
 80086e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086e8:	f000 b8d8 	b.w	800889c <__malloc_unlock>
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d908      	bls.n	8008702 <_free_r+0x42>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	1821      	adds	r1, r4, r0
 80086f4:	428b      	cmp	r3, r1
 80086f6:	bf01      	itttt	eq
 80086f8:	6819      	ldreq	r1, [r3, #0]
 80086fa:	685b      	ldreq	r3, [r3, #4]
 80086fc:	1809      	addeq	r1, r1, r0
 80086fe:	6021      	streq	r1, [r4, #0]
 8008700:	e7ed      	b.n	80086de <_free_r+0x1e>
 8008702:	461a      	mov	r2, r3
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	b10b      	cbz	r3, 800870c <_free_r+0x4c>
 8008708:	42a3      	cmp	r3, r4
 800870a:	d9fa      	bls.n	8008702 <_free_r+0x42>
 800870c:	6811      	ldr	r1, [r2, #0]
 800870e:	1850      	adds	r0, r2, r1
 8008710:	42a0      	cmp	r0, r4
 8008712:	d10b      	bne.n	800872c <_free_r+0x6c>
 8008714:	6820      	ldr	r0, [r4, #0]
 8008716:	4401      	add	r1, r0
 8008718:	1850      	adds	r0, r2, r1
 800871a:	4283      	cmp	r3, r0
 800871c:	6011      	str	r1, [r2, #0]
 800871e:	d1e0      	bne.n	80086e2 <_free_r+0x22>
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	4408      	add	r0, r1
 8008726:	6010      	str	r0, [r2, #0]
 8008728:	6053      	str	r3, [r2, #4]
 800872a:	e7da      	b.n	80086e2 <_free_r+0x22>
 800872c:	d902      	bls.n	8008734 <_free_r+0x74>
 800872e:	230c      	movs	r3, #12
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	e7d6      	b.n	80086e2 <_free_r+0x22>
 8008734:	6820      	ldr	r0, [r4, #0]
 8008736:	1821      	adds	r1, r4, r0
 8008738:	428b      	cmp	r3, r1
 800873a:	bf01      	itttt	eq
 800873c:	6819      	ldreq	r1, [r3, #0]
 800873e:	685b      	ldreq	r3, [r3, #4]
 8008740:	1809      	addeq	r1, r1, r0
 8008742:	6021      	streq	r1, [r4, #0]
 8008744:	6063      	str	r3, [r4, #4]
 8008746:	6054      	str	r4, [r2, #4]
 8008748:	e7cb      	b.n	80086e2 <_free_r+0x22>
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	200004c0 	.word	0x200004c0

08008750 <sbrk_aligned>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	4e0e      	ldr	r6, [pc, #56]	; (800878c <sbrk_aligned+0x3c>)
 8008754:	460c      	mov	r4, r1
 8008756:	6831      	ldr	r1, [r6, #0]
 8008758:	4605      	mov	r5, r0
 800875a:	b911      	cbnz	r1, 8008762 <sbrk_aligned+0x12>
 800875c:	f000 fcdc 	bl	8009118 <_sbrk_r>
 8008760:	6030      	str	r0, [r6, #0]
 8008762:	4621      	mov	r1, r4
 8008764:	4628      	mov	r0, r5
 8008766:	f000 fcd7 	bl	8009118 <_sbrk_r>
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	d00a      	beq.n	8008784 <sbrk_aligned+0x34>
 800876e:	1cc4      	adds	r4, r0, #3
 8008770:	f024 0403 	bic.w	r4, r4, #3
 8008774:	42a0      	cmp	r0, r4
 8008776:	d007      	beq.n	8008788 <sbrk_aligned+0x38>
 8008778:	1a21      	subs	r1, r4, r0
 800877a:	4628      	mov	r0, r5
 800877c:	f000 fccc 	bl	8009118 <_sbrk_r>
 8008780:	3001      	adds	r0, #1
 8008782:	d101      	bne.n	8008788 <sbrk_aligned+0x38>
 8008784:	f04f 34ff 	mov.w	r4, #4294967295
 8008788:	4620      	mov	r0, r4
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	200004c4 	.word	0x200004c4

08008790 <_malloc_r>:
 8008790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008794:	1ccd      	adds	r5, r1, #3
 8008796:	f025 0503 	bic.w	r5, r5, #3
 800879a:	3508      	adds	r5, #8
 800879c:	2d0c      	cmp	r5, #12
 800879e:	bf38      	it	cc
 80087a0:	250c      	movcc	r5, #12
 80087a2:	2d00      	cmp	r5, #0
 80087a4:	4607      	mov	r7, r0
 80087a6:	db01      	blt.n	80087ac <_malloc_r+0x1c>
 80087a8:	42a9      	cmp	r1, r5
 80087aa:	d905      	bls.n	80087b8 <_malloc_r+0x28>
 80087ac:	230c      	movs	r3, #12
 80087ae:	2600      	movs	r6, #0
 80087b0:	603b      	str	r3, [r7, #0]
 80087b2:	4630      	mov	r0, r6
 80087b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800888c <_malloc_r+0xfc>
 80087bc:	f000 f868 	bl	8008890 <__malloc_lock>
 80087c0:	f8d8 3000 	ldr.w	r3, [r8]
 80087c4:	461c      	mov	r4, r3
 80087c6:	bb5c      	cbnz	r4, 8008820 <_malloc_r+0x90>
 80087c8:	4629      	mov	r1, r5
 80087ca:	4638      	mov	r0, r7
 80087cc:	f7ff ffc0 	bl	8008750 <sbrk_aligned>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	4604      	mov	r4, r0
 80087d4:	d155      	bne.n	8008882 <_malloc_r+0xf2>
 80087d6:	f8d8 4000 	ldr.w	r4, [r8]
 80087da:	4626      	mov	r6, r4
 80087dc:	2e00      	cmp	r6, #0
 80087de:	d145      	bne.n	800886c <_malloc_r+0xdc>
 80087e0:	2c00      	cmp	r4, #0
 80087e2:	d048      	beq.n	8008876 <_malloc_r+0xe6>
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	4631      	mov	r1, r6
 80087e8:	4638      	mov	r0, r7
 80087ea:	eb04 0903 	add.w	r9, r4, r3
 80087ee:	f000 fc93 	bl	8009118 <_sbrk_r>
 80087f2:	4581      	cmp	r9, r0
 80087f4:	d13f      	bne.n	8008876 <_malloc_r+0xe6>
 80087f6:	6821      	ldr	r1, [r4, #0]
 80087f8:	4638      	mov	r0, r7
 80087fa:	1a6d      	subs	r5, r5, r1
 80087fc:	4629      	mov	r1, r5
 80087fe:	f7ff ffa7 	bl	8008750 <sbrk_aligned>
 8008802:	3001      	adds	r0, #1
 8008804:	d037      	beq.n	8008876 <_malloc_r+0xe6>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	442b      	add	r3, r5
 800880a:	6023      	str	r3, [r4, #0]
 800880c:	f8d8 3000 	ldr.w	r3, [r8]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d038      	beq.n	8008886 <_malloc_r+0xf6>
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	42a2      	cmp	r2, r4
 8008818:	d12b      	bne.n	8008872 <_malloc_r+0xe2>
 800881a:	2200      	movs	r2, #0
 800881c:	605a      	str	r2, [r3, #4]
 800881e:	e00f      	b.n	8008840 <_malloc_r+0xb0>
 8008820:	6822      	ldr	r2, [r4, #0]
 8008822:	1b52      	subs	r2, r2, r5
 8008824:	d41f      	bmi.n	8008866 <_malloc_r+0xd6>
 8008826:	2a0b      	cmp	r2, #11
 8008828:	d917      	bls.n	800885a <_malloc_r+0xca>
 800882a:	1961      	adds	r1, r4, r5
 800882c:	42a3      	cmp	r3, r4
 800882e:	6025      	str	r5, [r4, #0]
 8008830:	bf18      	it	ne
 8008832:	6059      	strne	r1, [r3, #4]
 8008834:	6863      	ldr	r3, [r4, #4]
 8008836:	bf08      	it	eq
 8008838:	f8c8 1000 	streq.w	r1, [r8]
 800883c:	5162      	str	r2, [r4, r5]
 800883e:	604b      	str	r3, [r1, #4]
 8008840:	4638      	mov	r0, r7
 8008842:	f104 060b 	add.w	r6, r4, #11
 8008846:	f000 f829 	bl	800889c <__malloc_unlock>
 800884a:	f026 0607 	bic.w	r6, r6, #7
 800884e:	1d23      	adds	r3, r4, #4
 8008850:	1af2      	subs	r2, r6, r3
 8008852:	d0ae      	beq.n	80087b2 <_malloc_r+0x22>
 8008854:	1b9b      	subs	r3, r3, r6
 8008856:	50a3      	str	r3, [r4, r2]
 8008858:	e7ab      	b.n	80087b2 <_malloc_r+0x22>
 800885a:	42a3      	cmp	r3, r4
 800885c:	6862      	ldr	r2, [r4, #4]
 800885e:	d1dd      	bne.n	800881c <_malloc_r+0x8c>
 8008860:	f8c8 2000 	str.w	r2, [r8]
 8008864:	e7ec      	b.n	8008840 <_malloc_r+0xb0>
 8008866:	4623      	mov	r3, r4
 8008868:	6864      	ldr	r4, [r4, #4]
 800886a:	e7ac      	b.n	80087c6 <_malloc_r+0x36>
 800886c:	4634      	mov	r4, r6
 800886e:	6876      	ldr	r6, [r6, #4]
 8008870:	e7b4      	b.n	80087dc <_malloc_r+0x4c>
 8008872:	4613      	mov	r3, r2
 8008874:	e7cc      	b.n	8008810 <_malloc_r+0x80>
 8008876:	230c      	movs	r3, #12
 8008878:	4638      	mov	r0, r7
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	f000 f80e 	bl	800889c <__malloc_unlock>
 8008880:	e797      	b.n	80087b2 <_malloc_r+0x22>
 8008882:	6025      	str	r5, [r4, #0]
 8008884:	e7dc      	b.n	8008840 <_malloc_r+0xb0>
 8008886:	605b      	str	r3, [r3, #4]
 8008888:	deff      	udf	#255	; 0xff
 800888a:	bf00      	nop
 800888c:	200004c0 	.word	0x200004c0

08008890 <__malloc_lock>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__malloc_lock+0x8>)
 8008892:	f7ff bf12 	b.w	80086ba <__retarget_lock_acquire_recursive>
 8008896:	bf00      	nop
 8008898:	200004bc 	.word	0x200004bc

0800889c <__malloc_unlock>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__malloc_unlock+0x8>)
 800889e:	f7ff bf0d 	b.w	80086bc <__retarget_lock_release_recursive>
 80088a2:	bf00      	nop
 80088a4:	200004bc 	.word	0x200004bc

080088a8 <__sfputc_r>:
 80088a8:	6893      	ldr	r3, [r2, #8]
 80088aa:	b410      	push	{r4}
 80088ac:	3b01      	subs	r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	6093      	str	r3, [r2, #8]
 80088b2:	da07      	bge.n	80088c4 <__sfputc_r+0x1c>
 80088b4:	6994      	ldr	r4, [r2, #24]
 80088b6:	42a3      	cmp	r3, r4
 80088b8:	db01      	blt.n	80088be <__sfputc_r+0x16>
 80088ba:	290a      	cmp	r1, #10
 80088bc:	d102      	bne.n	80088c4 <__sfputc_r+0x1c>
 80088be:	bc10      	pop	{r4}
 80088c0:	f7ff bded 	b.w	800849e <__swbuf_r>
 80088c4:	6813      	ldr	r3, [r2, #0]
 80088c6:	1c58      	adds	r0, r3, #1
 80088c8:	6010      	str	r0, [r2, #0]
 80088ca:	7019      	strb	r1, [r3, #0]
 80088cc:	4608      	mov	r0, r1
 80088ce:	bc10      	pop	{r4}
 80088d0:	4770      	bx	lr

080088d2 <__sfputs_r>:
 80088d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d4:	4606      	mov	r6, r0
 80088d6:	460f      	mov	r7, r1
 80088d8:	4614      	mov	r4, r2
 80088da:	18d5      	adds	r5, r2, r3
 80088dc:	42ac      	cmp	r4, r5
 80088de:	d101      	bne.n	80088e4 <__sfputs_r+0x12>
 80088e0:	2000      	movs	r0, #0
 80088e2:	e007      	b.n	80088f4 <__sfputs_r+0x22>
 80088e4:	463a      	mov	r2, r7
 80088e6:	4630      	mov	r0, r6
 80088e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ec:	f7ff ffdc 	bl	80088a8 <__sfputc_r>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d1f3      	bne.n	80088dc <__sfputs_r+0xa>
 80088f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088f8 <_vfiprintf_r>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	460d      	mov	r5, r1
 80088fe:	4614      	mov	r4, r2
 8008900:	4698      	mov	r8, r3
 8008902:	4606      	mov	r6, r0
 8008904:	b09d      	sub	sp, #116	; 0x74
 8008906:	b118      	cbz	r0, 8008910 <_vfiprintf_r+0x18>
 8008908:	6a03      	ldr	r3, [r0, #32]
 800890a:	b90b      	cbnz	r3, 8008910 <_vfiprintf_r+0x18>
 800890c:	f7ff fcd8 	bl	80082c0 <__sinit>
 8008910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008912:	07d9      	lsls	r1, r3, #31
 8008914:	d405      	bmi.n	8008922 <_vfiprintf_r+0x2a>
 8008916:	89ab      	ldrh	r3, [r5, #12]
 8008918:	059a      	lsls	r2, r3, #22
 800891a:	d402      	bmi.n	8008922 <_vfiprintf_r+0x2a>
 800891c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800891e:	f7ff fecc 	bl	80086ba <__retarget_lock_acquire_recursive>
 8008922:	89ab      	ldrh	r3, [r5, #12]
 8008924:	071b      	lsls	r3, r3, #28
 8008926:	d501      	bpl.n	800892c <_vfiprintf_r+0x34>
 8008928:	692b      	ldr	r3, [r5, #16]
 800892a:	b99b      	cbnz	r3, 8008954 <_vfiprintf_r+0x5c>
 800892c:	4629      	mov	r1, r5
 800892e:	4630      	mov	r0, r6
 8008930:	f7ff fdf2 	bl	8008518 <__swsetup_r>
 8008934:	b170      	cbz	r0, 8008954 <_vfiprintf_r+0x5c>
 8008936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008938:	07dc      	lsls	r4, r3, #31
 800893a:	d504      	bpl.n	8008946 <_vfiprintf_r+0x4e>
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	b01d      	add	sp, #116	; 0x74
 8008942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008946:	89ab      	ldrh	r3, [r5, #12]
 8008948:	0598      	lsls	r0, r3, #22
 800894a:	d4f7      	bmi.n	800893c <_vfiprintf_r+0x44>
 800894c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800894e:	f7ff feb5 	bl	80086bc <__retarget_lock_release_recursive>
 8008952:	e7f3      	b.n	800893c <_vfiprintf_r+0x44>
 8008954:	2300      	movs	r3, #0
 8008956:	9309      	str	r3, [sp, #36]	; 0x24
 8008958:	2320      	movs	r3, #32
 800895a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800895e:	2330      	movs	r3, #48	; 0x30
 8008960:	f04f 0901 	mov.w	r9, #1
 8008964:	f8cd 800c 	str.w	r8, [sp, #12]
 8008968:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008b18 <_vfiprintf_r+0x220>
 800896c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008970:	4623      	mov	r3, r4
 8008972:	469a      	mov	sl, r3
 8008974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008978:	b10a      	cbz	r2, 800897e <_vfiprintf_r+0x86>
 800897a:	2a25      	cmp	r2, #37	; 0x25
 800897c:	d1f9      	bne.n	8008972 <_vfiprintf_r+0x7a>
 800897e:	ebba 0b04 	subs.w	fp, sl, r4
 8008982:	d00b      	beq.n	800899c <_vfiprintf_r+0xa4>
 8008984:	465b      	mov	r3, fp
 8008986:	4622      	mov	r2, r4
 8008988:	4629      	mov	r1, r5
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff ffa1 	bl	80088d2 <__sfputs_r>
 8008990:	3001      	adds	r0, #1
 8008992:	f000 80a9 	beq.w	8008ae8 <_vfiprintf_r+0x1f0>
 8008996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008998:	445a      	add	r2, fp
 800899a:	9209      	str	r2, [sp, #36]	; 0x24
 800899c:	f89a 3000 	ldrb.w	r3, [sl]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 80a1 	beq.w	8008ae8 <_vfiprintf_r+0x1f0>
 80089a6:	2300      	movs	r3, #0
 80089a8:	f04f 32ff 	mov.w	r2, #4294967295
 80089ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b0:	f10a 0a01 	add.w	sl, sl, #1
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	9307      	str	r3, [sp, #28]
 80089b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089bc:	931a      	str	r3, [sp, #104]	; 0x68
 80089be:	4654      	mov	r4, sl
 80089c0:	2205      	movs	r2, #5
 80089c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c6:	4854      	ldr	r0, [pc, #336]	; (8008b18 <_vfiprintf_r+0x220>)
 80089c8:	f000 fbb6 	bl	8009138 <memchr>
 80089cc:	9a04      	ldr	r2, [sp, #16]
 80089ce:	b9d8      	cbnz	r0, 8008a08 <_vfiprintf_r+0x110>
 80089d0:	06d1      	lsls	r1, r2, #27
 80089d2:	bf44      	itt	mi
 80089d4:	2320      	movmi	r3, #32
 80089d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089da:	0713      	lsls	r3, r2, #28
 80089dc:	bf44      	itt	mi
 80089de:	232b      	movmi	r3, #43	; 0x2b
 80089e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089e4:	f89a 3000 	ldrb.w	r3, [sl]
 80089e8:	2b2a      	cmp	r3, #42	; 0x2a
 80089ea:	d015      	beq.n	8008a18 <_vfiprintf_r+0x120>
 80089ec:	4654      	mov	r4, sl
 80089ee:	2000      	movs	r0, #0
 80089f0:	f04f 0c0a 	mov.w	ip, #10
 80089f4:	9a07      	ldr	r2, [sp, #28]
 80089f6:	4621      	mov	r1, r4
 80089f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089fc:	3b30      	subs	r3, #48	; 0x30
 80089fe:	2b09      	cmp	r3, #9
 8008a00:	d94d      	bls.n	8008a9e <_vfiprintf_r+0x1a6>
 8008a02:	b1b0      	cbz	r0, 8008a32 <_vfiprintf_r+0x13a>
 8008a04:	9207      	str	r2, [sp, #28]
 8008a06:	e014      	b.n	8008a32 <_vfiprintf_r+0x13a>
 8008a08:	eba0 0308 	sub.w	r3, r0, r8
 8008a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a10:	4313      	orrs	r3, r2
 8008a12:	46a2      	mov	sl, r4
 8008a14:	9304      	str	r3, [sp, #16]
 8008a16:	e7d2      	b.n	80089be <_vfiprintf_r+0xc6>
 8008a18:	9b03      	ldr	r3, [sp, #12]
 8008a1a:	1d19      	adds	r1, r3, #4
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	9103      	str	r1, [sp, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bfbb      	ittet	lt
 8008a24:	425b      	neglt	r3, r3
 8008a26:	f042 0202 	orrlt.w	r2, r2, #2
 8008a2a:	9307      	strge	r3, [sp, #28]
 8008a2c:	9307      	strlt	r3, [sp, #28]
 8008a2e:	bfb8      	it	lt
 8008a30:	9204      	strlt	r2, [sp, #16]
 8008a32:	7823      	ldrb	r3, [r4, #0]
 8008a34:	2b2e      	cmp	r3, #46	; 0x2e
 8008a36:	d10c      	bne.n	8008a52 <_vfiprintf_r+0x15a>
 8008a38:	7863      	ldrb	r3, [r4, #1]
 8008a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a3c:	d134      	bne.n	8008aa8 <_vfiprintf_r+0x1b0>
 8008a3e:	9b03      	ldr	r3, [sp, #12]
 8008a40:	3402      	adds	r4, #2
 8008a42:	1d1a      	adds	r2, r3, #4
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	9203      	str	r2, [sp, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bfb8      	it	lt
 8008a4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a50:	9305      	str	r3, [sp, #20]
 8008a52:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b1c <_vfiprintf_r+0x224>
 8008a56:	2203      	movs	r2, #3
 8008a58:	4650      	mov	r0, sl
 8008a5a:	7821      	ldrb	r1, [r4, #0]
 8008a5c:	f000 fb6c 	bl	8009138 <memchr>
 8008a60:	b138      	cbz	r0, 8008a72 <_vfiprintf_r+0x17a>
 8008a62:	2240      	movs	r2, #64	; 0x40
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	eba0 000a 	sub.w	r0, r0, sl
 8008a6a:	4082      	lsls	r2, r0
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	3401      	adds	r4, #1
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a76:	2206      	movs	r2, #6
 8008a78:	4829      	ldr	r0, [pc, #164]	; (8008b20 <_vfiprintf_r+0x228>)
 8008a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a7e:	f000 fb5b 	bl	8009138 <memchr>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d03f      	beq.n	8008b06 <_vfiprintf_r+0x20e>
 8008a86:	4b27      	ldr	r3, [pc, #156]	; (8008b24 <_vfiprintf_r+0x22c>)
 8008a88:	bb1b      	cbnz	r3, 8008ad2 <_vfiprintf_r+0x1da>
 8008a8a:	9b03      	ldr	r3, [sp, #12]
 8008a8c:	3307      	adds	r3, #7
 8008a8e:	f023 0307 	bic.w	r3, r3, #7
 8008a92:	3308      	adds	r3, #8
 8008a94:	9303      	str	r3, [sp, #12]
 8008a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a98:	443b      	add	r3, r7
 8008a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9c:	e768      	b.n	8008970 <_vfiprintf_r+0x78>
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa6:	e7a6      	b.n	80089f6 <_vfiprintf_r+0xfe>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f04f 0c0a 	mov.w	ip, #10
 8008aae:	4619      	mov	r1, r3
 8008ab0:	3401      	adds	r4, #1
 8008ab2:	9305      	str	r3, [sp, #20]
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aba:	3a30      	subs	r2, #48	; 0x30
 8008abc:	2a09      	cmp	r2, #9
 8008abe:	d903      	bls.n	8008ac8 <_vfiprintf_r+0x1d0>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0c6      	beq.n	8008a52 <_vfiprintf_r+0x15a>
 8008ac4:	9105      	str	r1, [sp, #20]
 8008ac6:	e7c4      	b.n	8008a52 <_vfiprintf_r+0x15a>
 8008ac8:	4604      	mov	r4, r0
 8008aca:	2301      	movs	r3, #1
 8008acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ad0:	e7f0      	b.n	8008ab4 <_vfiprintf_r+0x1bc>
 8008ad2:	ab03      	add	r3, sp, #12
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	462a      	mov	r2, r5
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <_vfiprintf_r+0x230>)
 8008adc:	a904      	add	r1, sp, #16
 8008ade:	f3af 8000 	nop.w
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	1c78      	adds	r0, r7, #1
 8008ae6:	d1d6      	bne.n	8008a96 <_vfiprintf_r+0x19e>
 8008ae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aea:	07d9      	lsls	r1, r3, #31
 8008aec:	d405      	bmi.n	8008afa <_vfiprintf_r+0x202>
 8008aee:	89ab      	ldrh	r3, [r5, #12]
 8008af0:	059a      	lsls	r2, r3, #22
 8008af2:	d402      	bmi.n	8008afa <_vfiprintf_r+0x202>
 8008af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008af6:	f7ff fde1 	bl	80086bc <__retarget_lock_release_recursive>
 8008afa:	89ab      	ldrh	r3, [r5, #12]
 8008afc:	065b      	lsls	r3, r3, #25
 8008afe:	f53f af1d 	bmi.w	800893c <_vfiprintf_r+0x44>
 8008b02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b04:	e71c      	b.n	8008940 <_vfiprintf_r+0x48>
 8008b06:	ab03      	add	r3, sp, #12
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	462a      	mov	r2, r5
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <_vfiprintf_r+0x230>)
 8008b10:	a904      	add	r1, sp, #16
 8008b12:	f000 f87d 	bl	8008c10 <_printf_i>
 8008b16:	e7e4      	b.n	8008ae2 <_vfiprintf_r+0x1ea>
 8008b18:	0800c976 	.word	0x0800c976
 8008b1c:	0800c97c 	.word	0x0800c97c
 8008b20:	0800c980 	.word	0x0800c980
 8008b24:	00000000 	.word	0x00000000
 8008b28:	080088d3 	.word	0x080088d3

08008b2c <_printf_common>:
 8008b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	4616      	mov	r6, r2
 8008b32:	4699      	mov	r9, r3
 8008b34:	688a      	ldr	r2, [r1, #8]
 8008b36:	690b      	ldr	r3, [r1, #16]
 8008b38:	4607      	mov	r7, r0
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	bfb8      	it	lt
 8008b3e:	4613      	movlt	r3, r2
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b46:	460c      	mov	r4, r1
 8008b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b4c:	b10a      	cbz	r2, 8008b52 <_printf_common+0x26>
 8008b4e:	3301      	adds	r3, #1
 8008b50:	6033      	str	r3, [r6, #0]
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	0699      	lsls	r1, r3, #26
 8008b56:	bf42      	ittt	mi
 8008b58:	6833      	ldrmi	r3, [r6, #0]
 8008b5a:	3302      	addmi	r3, #2
 8008b5c:	6033      	strmi	r3, [r6, #0]
 8008b5e:	6825      	ldr	r5, [r4, #0]
 8008b60:	f015 0506 	ands.w	r5, r5, #6
 8008b64:	d106      	bne.n	8008b74 <_printf_common+0x48>
 8008b66:	f104 0a19 	add.w	sl, r4, #25
 8008b6a:	68e3      	ldr	r3, [r4, #12]
 8008b6c:	6832      	ldr	r2, [r6, #0]
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	42ab      	cmp	r3, r5
 8008b72:	dc2b      	bgt.n	8008bcc <_printf_common+0xa0>
 8008b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b78:	1e13      	subs	r3, r2, #0
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	bf18      	it	ne
 8008b7e:	2301      	movne	r3, #1
 8008b80:	0692      	lsls	r2, r2, #26
 8008b82:	d430      	bmi.n	8008be6 <_printf_common+0xba>
 8008b84:	4649      	mov	r1, r9
 8008b86:	4638      	mov	r0, r7
 8008b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b8c:	47c0      	blx	r8
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d023      	beq.n	8008bda <_printf_common+0xae>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	6922      	ldr	r2, [r4, #16]
 8008b96:	f003 0306 	and.w	r3, r3, #6
 8008b9a:	2b04      	cmp	r3, #4
 8008b9c:	bf14      	ite	ne
 8008b9e:	2500      	movne	r5, #0
 8008ba0:	6833      	ldreq	r3, [r6, #0]
 8008ba2:	f04f 0600 	mov.w	r6, #0
 8008ba6:	bf08      	it	eq
 8008ba8:	68e5      	ldreq	r5, [r4, #12]
 8008baa:	f104 041a 	add.w	r4, r4, #26
 8008bae:	bf08      	it	eq
 8008bb0:	1aed      	subeq	r5, r5, r3
 8008bb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008bb6:	bf08      	it	eq
 8008bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	bfc4      	itt	gt
 8008bc0:	1a9b      	subgt	r3, r3, r2
 8008bc2:	18ed      	addgt	r5, r5, r3
 8008bc4:	42b5      	cmp	r5, r6
 8008bc6:	d11a      	bne.n	8008bfe <_printf_common+0xd2>
 8008bc8:	2000      	movs	r0, #0
 8008bca:	e008      	b.n	8008bde <_printf_common+0xb2>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	4652      	mov	r2, sl
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	47c0      	blx	r8
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d103      	bne.n	8008be2 <_printf_common+0xb6>
 8008bda:	f04f 30ff 	mov.w	r0, #4294967295
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	3501      	adds	r5, #1
 8008be4:	e7c1      	b.n	8008b6a <_printf_common+0x3e>
 8008be6:	2030      	movs	r0, #48	; 0x30
 8008be8:	18e1      	adds	r1, r4, r3
 8008bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bf4:	4422      	add	r2, r4
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bfc:	e7c2      	b.n	8008b84 <_printf_common+0x58>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4622      	mov	r2, r4
 8008c02:	4649      	mov	r1, r9
 8008c04:	4638      	mov	r0, r7
 8008c06:	47c0      	blx	r8
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d0e6      	beq.n	8008bda <_printf_common+0xae>
 8008c0c:	3601      	adds	r6, #1
 8008c0e:	e7d9      	b.n	8008bc4 <_printf_common+0x98>

08008c10 <_printf_i>:
 8008c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c14:	7e0f      	ldrb	r7, [r1, #24]
 8008c16:	4691      	mov	r9, r2
 8008c18:	2f78      	cmp	r7, #120	; 0x78
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	469a      	mov	sl, r3
 8008c20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c26:	d807      	bhi.n	8008c38 <_printf_i+0x28>
 8008c28:	2f62      	cmp	r7, #98	; 0x62
 8008c2a:	d80a      	bhi.n	8008c42 <_printf_i+0x32>
 8008c2c:	2f00      	cmp	r7, #0
 8008c2e:	f000 80d5 	beq.w	8008ddc <_printf_i+0x1cc>
 8008c32:	2f58      	cmp	r7, #88	; 0x58
 8008c34:	f000 80c1 	beq.w	8008dba <_printf_i+0x1aa>
 8008c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c40:	e03a      	b.n	8008cb8 <_printf_i+0xa8>
 8008c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c46:	2b15      	cmp	r3, #21
 8008c48:	d8f6      	bhi.n	8008c38 <_printf_i+0x28>
 8008c4a:	a101      	add	r1, pc, #4	; (adr r1, 8008c50 <_printf_i+0x40>)
 8008c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c50:	08008ca9 	.word	0x08008ca9
 8008c54:	08008cbd 	.word	0x08008cbd
 8008c58:	08008c39 	.word	0x08008c39
 8008c5c:	08008c39 	.word	0x08008c39
 8008c60:	08008c39 	.word	0x08008c39
 8008c64:	08008c39 	.word	0x08008c39
 8008c68:	08008cbd 	.word	0x08008cbd
 8008c6c:	08008c39 	.word	0x08008c39
 8008c70:	08008c39 	.word	0x08008c39
 8008c74:	08008c39 	.word	0x08008c39
 8008c78:	08008c39 	.word	0x08008c39
 8008c7c:	08008dc3 	.word	0x08008dc3
 8008c80:	08008ce9 	.word	0x08008ce9
 8008c84:	08008d7d 	.word	0x08008d7d
 8008c88:	08008c39 	.word	0x08008c39
 8008c8c:	08008c39 	.word	0x08008c39
 8008c90:	08008de5 	.word	0x08008de5
 8008c94:	08008c39 	.word	0x08008c39
 8008c98:	08008ce9 	.word	0x08008ce9
 8008c9c:	08008c39 	.word	0x08008c39
 8008ca0:	08008c39 	.word	0x08008c39
 8008ca4:	08008d85 	.word	0x08008d85
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	1d1a      	adds	r2, r3, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	602a      	str	r2, [r5, #0]
 8008cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e0a0      	b.n	8008dfe <_printf_i+0x1ee>
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	682b      	ldr	r3, [r5, #0]
 8008cc0:	0607      	lsls	r7, r0, #24
 8008cc2:	f103 0104 	add.w	r1, r3, #4
 8008cc6:	6029      	str	r1, [r5, #0]
 8008cc8:	d501      	bpl.n	8008cce <_printf_i+0xbe>
 8008cca:	681e      	ldr	r6, [r3, #0]
 8008ccc:	e003      	b.n	8008cd6 <_printf_i+0xc6>
 8008cce:	0646      	lsls	r6, r0, #25
 8008cd0:	d5fb      	bpl.n	8008cca <_printf_i+0xba>
 8008cd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008cd6:	2e00      	cmp	r6, #0
 8008cd8:	da03      	bge.n	8008ce2 <_printf_i+0xd2>
 8008cda:	232d      	movs	r3, #45	; 0x2d
 8008cdc:	4276      	negs	r6, r6
 8008cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce2:	230a      	movs	r3, #10
 8008ce4:	4859      	ldr	r0, [pc, #356]	; (8008e4c <_printf_i+0x23c>)
 8008ce6:	e012      	b.n	8008d0e <_printf_i+0xfe>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	6820      	ldr	r0, [r4, #0]
 8008cec:	1d19      	adds	r1, r3, #4
 8008cee:	6029      	str	r1, [r5, #0]
 8008cf0:	0605      	lsls	r5, r0, #24
 8008cf2:	d501      	bpl.n	8008cf8 <_printf_i+0xe8>
 8008cf4:	681e      	ldr	r6, [r3, #0]
 8008cf6:	e002      	b.n	8008cfe <_printf_i+0xee>
 8008cf8:	0641      	lsls	r1, r0, #25
 8008cfa:	d5fb      	bpl.n	8008cf4 <_printf_i+0xe4>
 8008cfc:	881e      	ldrh	r6, [r3, #0]
 8008cfe:	2f6f      	cmp	r7, #111	; 0x6f
 8008d00:	bf0c      	ite	eq
 8008d02:	2308      	moveq	r3, #8
 8008d04:	230a      	movne	r3, #10
 8008d06:	4851      	ldr	r0, [pc, #324]	; (8008e4c <_printf_i+0x23c>)
 8008d08:	2100      	movs	r1, #0
 8008d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d0e:	6865      	ldr	r5, [r4, #4]
 8008d10:	2d00      	cmp	r5, #0
 8008d12:	bfa8      	it	ge
 8008d14:	6821      	ldrge	r1, [r4, #0]
 8008d16:	60a5      	str	r5, [r4, #8]
 8008d18:	bfa4      	itt	ge
 8008d1a:	f021 0104 	bicge.w	r1, r1, #4
 8008d1e:	6021      	strge	r1, [r4, #0]
 8008d20:	b90e      	cbnz	r6, 8008d26 <_printf_i+0x116>
 8008d22:	2d00      	cmp	r5, #0
 8008d24:	d04b      	beq.n	8008dbe <_printf_i+0x1ae>
 8008d26:	4615      	mov	r5, r2
 8008d28:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d2c:	fb03 6711 	mls	r7, r3, r1, r6
 8008d30:	5dc7      	ldrb	r7, [r0, r7]
 8008d32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d36:	4637      	mov	r7, r6
 8008d38:	42bb      	cmp	r3, r7
 8008d3a:	460e      	mov	r6, r1
 8008d3c:	d9f4      	bls.n	8008d28 <_printf_i+0x118>
 8008d3e:	2b08      	cmp	r3, #8
 8008d40:	d10b      	bne.n	8008d5a <_printf_i+0x14a>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	07de      	lsls	r6, r3, #31
 8008d46:	d508      	bpl.n	8008d5a <_printf_i+0x14a>
 8008d48:	6923      	ldr	r3, [r4, #16]
 8008d4a:	6861      	ldr	r1, [r4, #4]
 8008d4c:	4299      	cmp	r1, r3
 8008d4e:	bfde      	ittt	le
 8008d50:	2330      	movle	r3, #48	; 0x30
 8008d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d5a:	1b52      	subs	r2, r2, r5
 8008d5c:	6122      	str	r2, [r4, #16]
 8008d5e:	464b      	mov	r3, r9
 8008d60:	4621      	mov	r1, r4
 8008d62:	4640      	mov	r0, r8
 8008d64:	f8cd a000 	str.w	sl, [sp]
 8008d68:	aa03      	add	r2, sp, #12
 8008d6a:	f7ff fedf 	bl	8008b2c <_printf_common>
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d14a      	bne.n	8008e08 <_printf_i+0x1f8>
 8008d72:	f04f 30ff 	mov.w	r0, #4294967295
 8008d76:	b004      	add	sp, #16
 8008d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	f043 0320 	orr.w	r3, r3, #32
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	2778      	movs	r7, #120	; 0x78
 8008d86:	4832      	ldr	r0, [pc, #200]	; (8008e50 <_printf_i+0x240>)
 8008d88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	6829      	ldr	r1, [r5, #0]
 8008d90:	061f      	lsls	r7, r3, #24
 8008d92:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d96:	d402      	bmi.n	8008d9e <_printf_i+0x18e>
 8008d98:	065f      	lsls	r7, r3, #25
 8008d9a:	bf48      	it	mi
 8008d9c:	b2b6      	uxthmi	r6, r6
 8008d9e:	07df      	lsls	r7, r3, #31
 8008da0:	bf48      	it	mi
 8008da2:	f043 0320 	orrmi.w	r3, r3, #32
 8008da6:	6029      	str	r1, [r5, #0]
 8008da8:	bf48      	it	mi
 8008daa:	6023      	strmi	r3, [r4, #0]
 8008dac:	b91e      	cbnz	r6, 8008db6 <_printf_i+0x1a6>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	f023 0320 	bic.w	r3, r3, #32
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	2310      	movs	r3, #16
 8008db8:	e7a6      	b.n	8008d08 <_printf_i+0xf8>
 8008dba:	4824      	ldr	r0, [pc, #144]	; (8008e4c <_printf_i+0x23c>)
 8008dbc:	e7e4      	b.n	8008d88 <_printf_i+0x178>
 8008dbe:	4615      	mov	r5, r2
 8008dc0:	e7bd      	b.n	8008d3e <_printf_i+0x12e>
 8008dc2:	682b      	ldr	r3, [r5, #0]
 8008dc4:	6826      	ldr	r6, [r4, #0]
 8008dc6:	1d18      	adds	r0, r3, #4
 8008dc8:	6961      	ldr	r1, [r4, #20]
 8008dca:	6028      	str	r0, [r5, #0]
 8008dcc:	0635      	lsls	r5, r6, #24
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	d501      	bpl.n	8008dd6 <_printf_i+0x1c6>
 8008dd2:	6019      	str	r1, [r3, #0]
 8008dd4:	e002      	b.n	8008ddc <_printf_i+0x1cc>
 8008dd6:	0670      	lsls	r0, r6, #25
 8008dd8:	d5fb      	bpl.n	8008dd2 <_printf_i+0x1c2>
 8008dda:	8019      	strh	r1, [r3, #0]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4615      	mov	r5, r2
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	e7bc      	b.n	8008d5e <_printf_i+0x14e>
 8008de4:	682b      	ldr	r3, [r5, #0]
 8008de6:	2100      	movs	r1, #0
 8008de8:	1d1a      	adds	r2, r3, #4
 8008dea:	602a      	str	r2, [r5, #0]
 8008dec:	681d      	ldr	r5, [r3, #0]
 8008dee:	6862      	ldr	r2, [r4, #4]
 8008df0:	4628      	mov	r0, r5
 8008df2:	f000 f9a1 	bl	8009138 <memchr>
 8008df6:	b108      	cbz	r0, 8008dfc <_printf_i+0x1ec>
 8008df8:	1b40      	subs	r0, r0, r5
 8008dfa:	6060      	str	r0, [r4, #4]
 8008dfc:	6863      	ldr	r3, [r4, #4]
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	2300      	movs	r3, #0
 8008e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e06:	e7aa      	b.n	8008d5e <_printf_i+0x14e>
 8008e08:	462a      	mov	r2, r5
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	47d0      	blx	sl
 8008e12:	3001      	adds	r0, #1
 8008e14:	d0ad      	beq.n	8008d72 <_printf_i+0x162>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	079b      	lsls	r3, r3, #30
 8008e1a:	d413      	bmi.n	8008e44 <_printf_i+0x234>
 8008e1c:	68e0      	ldr	r0, [r4, #12]
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	4298      	cmp	r0, r3
 8008e22:	bfb8      	it	lt
 8008e24:	4618      	movlt	r0, r3
 8008e26:	e7a6      	b.n	8008d76 <_printf_i+0x166>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	4640      	mov	r0, r8
 8008e30:	47d0      	blx	sl
 8008e32:	3001      	adds	r0, #1
 8008e34:	d09d      	beq.n	8008d72 <_printf_i+0x162>
 8008e36:	3501      	adds	r5, #1
 8008e38:	68e3      	ldr	r3, [r4, #12]
 8008e3a:	9903      	ldr	r1, [sp, #12]
 8008e3c:	1a5b      	subs	r3, r3, r1
 8008e3e:	42ab      	cmp	r3, r5
 8008e40:	dcf2      	bgt.n	8008e28 <_printf_i+0x218>
 8008e42:	e7eb      	b.n	8008e1c <_printf_i+0x20c>
 8008e44:	2500      	movs	r5, #0
 8008e46:	f104 0619 	add.w	r6, r4, #25
 8008e4a:	e7f5      	b.n	8008e38 <_printf_i+0x228>
 8008e4c:	0800c987 	.word	0x0800c987
 8008e50:	0800c998 	.word	0x0800c998

08008e54 <__sflush_r>:
 8008e54:	898a      	ldrh	r2, [r1, #12]
 8008e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e58:	4605      	mov	r5, r0
 8008e5a:	0710      	lsls	r0, r2, #28
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	d457      	bmi.n	8008f10 <__sflush_r+0xbc>
 8008e60:	684b      	ldr	r3, [r1, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	dc04      	bgt.n	8008e70 <__sflush_r+0x1c>
 8008e66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dc01      	bgt.n	8008e70 <__sflush_r+0x1c>
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e72:	2e00      	cmp	r6, #0
 8008e74:	d0fa      	beq.n	8008e6c <__sflush_r+0x18>
 8008e76:	2300      	movs	r3, #0
 8008e78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e7c:	682f      	ldr	r7, [r5, #0]
 8008e7e:	6a21      	ldr	r1, [r4, #32]
 8008e80:	602b      	str	r3, [r5, #0]
 8008e82:	d032      	beq.n	8008eea <__sflush_r+0x96>
 8008e84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	075a      	lsls	r2, r3, #29
 8008e8a:	d505      	bpl.n	8008e98 <__sflush_r+0x44>
 8008e8c:	6863      	ldr	r3, [r4, #4]
 8008e8e:	1ac0      	subs	r0, r0, r3
 8008e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e92:	b10b      	cbz	r3, 8008e98 <__sflush_r+0x44>
 8008e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e96:	1ac0      	subs	r0, r0, r3
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	6a21      	ldr	r1, [r4, #32]
 8008ea2:	47b0      	blx	r6
 8008ea4:	1c43      	adds	r3, r0, #1
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	d106      	bne.n	8008eb8 <__sflush_r+0x64>
 8008eaa:	6829      	ldr	r1, [r5, #0]
 8008eac:	291d      	cmp	r1, #29
 8008eae:	d82b      	bhi.n	8008f08 <__sflush_r+0xb4>
 8008eb0:	4a28      	ldr	r2, [pc, #160]	; (8008f54 <__sflush_r+0x100>)
 8008eb2:	410a      	asrs	r2, r1
 8008eb4:	07d6      	lsls	r6, r2, #31
 8008eb6:	d427      	bmi.n	8008f08 <__sflush_r+0xb4>
 8008eb8:	2200      	movs	r2, #0
 8008eba:	6062      	str	r2, [r4, #4]
 8008ebc:	6922      	ldr	r2, [r4, #16]
 8008ebe:	04d9      	lsls	r1, r3, #19
 8008ec0:	6022      	str	r2, [r4, #0]
 8008ec2:	d504      	bpl.n	8008ece <__sflush_r+0x7a>
 8008ec4:	1c42      	adds	r2, r0, #1
 8008ec6:	d101      	bne.n	8008ecc <__sflush_r+0x78>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b903      	cbnz	r3, 8008ece <__sflush_r+0x7a>
 8008ecc:	6560      	str	r0, [r4, #84]	; 0x54
 8008ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ed0:	602f      	str	r7, [r5, #0]
 8008ed2:	2900      	cmp	r1, #0
 8008ed4:	d0ca      	beq.n	8008e6c <__sflush_r+0x18>
 8008ed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eda:	4299      	cmp	r1, r3
 8008edc:	d002      	beq.n	8008ee4 <__sflush_r+0x90>
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f7ff fbee 	bl	80086c0 <_free_r>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	6360      	str	r0, [r4, #52]	; 0x34
 8008ee8:	e7c1      	b.n	8008e6e <__sflush_r+0x1a>
 8008eea:	2301      	movs	r3, #1
 8008eec:	4628      	mov	r0, r5
 8008eee:	47b0      	blx	r6
 8008ef0:	1c41      	adds	r1, r0, #1
 8008ef2:	d1c8      	bne.n	8008e86 <__sflush_r+0x32>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0c5      	beq.n	8008e86 <__sflush_r+0x32>
 8008efa:	2b1d      	cmp	r3, #29
 8008efc:	d001      	beq.n	8008f02 <__sflush_r+0xae>
 8008efe:	2b16      	cmp	r3, #22
 8008f00:	d101      	bne.n	8008f06 <__sflush_r+0xb2>
 8008f02:	602f      	str	r7, [r5, #0]
 8008f04:	e7b2      	b.n	8008e6c <__sflush_r+0x18>
 8008f06:	89a3      	ldrh	r3, [r4, #12]
 8008f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	e7ae      	b.n	8008e6e <__sflush_r+0x1a>
 8008f10:	690f      	ldr	r7, [r1, #16]
 8008f12:	2f00      	cmp	r7, #0
 8008f14:	d0aa      	beq.n	8008e6c <__sflush_r+0x18>
 8008f16:	0793      	lsls	r3, r2, #30
 8008f18:	bf18      	it	ne
 8008f1a:	2300      	movne	r3, #0
 8008f1c:	680e      	ldr	r6, [r1, #0]
 8008f1e:	bf08      	it	eq
 8008f20:	694b      	ldreq	r3, [r1, #20]
 8008f22:	1bf6      	subs	r6, r6, r7
 8008f24:	600f      	str	r7, [r1, #0]
 8008f26:	608b      	str	r3, [r1, #8]
 8008f28:	2e00      	cmp	r6, #0
 8008f2a:	dd9f      	ble.n	8008e6c <__sflush_r+0x18>
 8008f2c:	4633      	mov	r3, r6
 8008f2e:	463a      	mov	r2, r7
 8008f30:	4628      	mov	r0, r5
 8008f32:	6a21      	ldr	r1, [r4, #32]
 8008f34:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008f38:	47e0      	blx	ip
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	dc06      	bgt.n	8008f4c <__sflush_r+0xf8>
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	e790      	b.n	8008e6e <__sflush_r+0x1a>
 8008f4c:	4407      	add	r7, r0
 8008f4e:	1a36      	subs	r6, r6, r0
 8008f50:	e7ea      	b.n	8008f28 <__sflush_r+0xd4>
 8008f52:	bf00      	nop
 8008f54:	dfbffffe 	.word	0xdfbffffe

08008f58 <_fflush_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	690b      	ldr	r3, [r1, #16]
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	460c      	mov	r4, r1
 8008f60:	b913      	cbnz	r3, 8008f68 <_fflush_r+0x10>
 8008f62:	2500      	movs	r5, #0
 8008f64:	4628      	mov	r0, r5
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	b118      	cbz	r0, 8008f72 <_fflush_r+0x1a>
 8008f6a:	6a03      	ldr	r3, [r0, #32]
 8008f6c:	b90b      	cbnz	r3, 8008f72 <_fflush_r+0x1a>
 8008f6e:	f7ff f9a7 	bl	80082c0 <__sinit>
 8008f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f3      	beq.n	8008f62 <_fflush_r+0xa>
 8008f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f7c:	07d0      	lsls	r0, r2, #31
 8008f7e:	d404      	bmi.n	8008f8a <_fflush_r+0x32>
 8008f80:	0599      	lsls	r1, r3, #22
 8008f82:	d402      	bmi.n	8008f8a <_fflush_r+0x32>
 8008f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f86:	f7ff fb98 	bl	80086ba <__retarget_lock_acquire_recursive>
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	f7ff ff61 	bl	8008e54 <__sflush_r>
 8008f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f94:	4605      	mov	r5, r0
 8008f96:	07da      	lsls	r2, r3, #31
 8008f98:	d4e4      	bmi.n	8008f64 <_fflush_r+0xc>
 8008f9a:	89a3      	ldrh	r3, [r4, #12]
 8008f9c:	059b      	lsls	r3, r3, #22
 8008f9e:	d4e1      	bmi.n	8008f64 <_fflush_r+0xc>
 8008fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fa2:	f7ff fb8b 	bl	80086bc <__retarget_lock_release_recursive>
 8008fa6:	e7dd      	b.n	8008f64 <_fflush_r+0xc>

08008fa8 <__swhatbuf_r>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	460c      	mov	r4, r1
 8008fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb0:	4615      	mov	r5, r2
 8008fb2:	2900      	cmp	r1, #0
 8008fb4:	461e      	mov	r6, r3
 8008fb6:	b096      	sub	sp, #88	; 0x58
 8008fb8:	da0c      	bge.n	8008fd4 <__swhatbuf_r+0x2c>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008fc2:	bf0c      	ite	eq
 8008fc4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008fc8:	2340      	movne	r3, #64	; 0x40
 8008fca:	2000      	movs	r0, #0
 8008fcc:	6031      	str	r1, [r6, #0]
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	b016      	add	sp, #88	; 0x58
 8008fd2:	bd70      	pop	{r4, r5, r6, pc}
 8008fd4:	466a      	mov	r2, sp
 8008fd6:	f000 f87d 	bl	80090d4 <_fstat_r>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	dbed      	blt.n	8008fba <__swhatbuf_r+0x12>
 8008fde:	9901      	ldr	r1, [sp, #4]
 8008fe0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008fe4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008fe8:	4259      	negs	r1, r3
 8008fea:	4159      	adcs	r1, r3
 8008fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff0:	e7eb      	b.n	8008fca <__swhatbuf_r+0x22>

08008ff2 <__smakebuf_r>:
 8008ff2:	898b      	ldrh	r3, [r1, #12]
 8008ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ff6:	079d      	lsls	r5, r3, #30
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	d507      	bpl.n	800900e <__smakebuf_r+0x1c>
 8008ffe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009002:	6023      	str	r3, [r4, #0]
 8009004:	6123      	str	r3, [r4, #16]
 8009006:	2301      	movs	r3, #1
 8009008:	6163      	str	r3, [r4, #20]
 800900a:	b002      	add	sp, #8
 800900c:	bd70      	pop	{r4, r5, r6, pc}
 800900e:	466a      	mov	r2, sp
 8009010:	ab01      	add	r3, sp, #4
 8009012:	f7ff ffc9 	bl	8008fa8 <__swhatbuf_r>
 8009016:	9900      	ldr	r1, [sp, #0]
 8009018:	4605      	mov	r5, r0
 800901a:	4630      	mov	r0, r6
 800901c:	f7ff fbb8 	bl	8008790 <_malloc_r>
 8009020:	b948      	cbnz	r0, 8009036 <__smakebuf_r+0x44>
 8009022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009026:	059a      	lsls	r2, r3, #22
 8009028:	d4ef      	bmi.n	800900a <__smakebuf_r+0x18>
 800902a:	f023 0303 	bic.w	r3, r3, #3
 800902e:	f043 0302 	orr.w	r3, r3, #2
 8009032:	81a3      	strh	r3, [r4, #12]
 8009034:	e7e3      	b.n	8008ffe <__smakebuf_r+0xc>
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	6020      	str	r0, [r4, #0]
 800903a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	9b00      	ldr	r3, [sp, #0]
 8009042:	6120      	str	r0, [r4, #16]
 8009044:	6163      	str	r3, [r4, #20]
 8009046:	9b01      	ldr	r3, [sp, #4]
 8009048:	b15b      	cbz	r3, 8009062 <__smakebuf_r+0x70>
 800904a:	4630      	mov	r0, r6
 800904c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009050:	f000 f852 	bl	80090f8 <_isatty_r>
 8009054:	b128      	cbz	r0, 8009062 <__smakebuf_r+0x70>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f023 0303 	bic.w	r3, r3, #3
 800905c:	f043 0301 	orr.w	r3, r3, #1
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	431d      	orrs	r5, r3
 8009066:	81a5      	strh	r5, [r4, #12]
 8009068:	e7cf      	b.n	800900a <__smakebuf_r+0x18>

0800906a <_putc_r>:
 800906a:	b570      	push	{r4, r5, r6, lr}
 800906c:	460d      	mov	r5, r1
 800906e:	4614      	mov	r4, r2
 8009070:	4606      	mov	r6, r0
 8009072:	b118      	cbz	r0, 800907c <_putc_r+0x12>
 8009074:	6a03      	ldr	r3, [r0, #32]
 8009076:	b90b      	cbnz	r3, 800907c <_putc_r+0x12>
 8009078:	f7ff f922 	bl	80082c0 <__sinit>
 800907c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800907e:	07d8      	lsls	r0, r3, #31
 8009080:	d405      	bmi.n	800908e <_putc_r+0x24>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	0599      	lsls	r1, r3, #22
 8009086:	d402      	bmi.n	800908e <_putc_r+0x24>
 8009088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800908a:	f7ff fb16 	bl	80086ba <__retarget_lock_acquire_recursive>
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	3b01      	subs	r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	60a3      	str	r3, [r4, #8]
 8009096:	da05      	bge.n	80090a4 <_putc_r+0x3a>
 8009098:	69a2      	ldr	r2, [r4, #24]
 800909a:	4293      	cmp	r3, r2
 800909c:	db12      	blt.n	80090c4 <_putc_r+0x5a>
 800909e:	b2eb      	uxtb	r3, r5
 80090a0:	2b0a      	cmp	r3, #10
 80090a2:	d00f      	beq.n	80090c4 <_putc_r+0x5a>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	1c5a      	adds	r2, r3, #1
 80090a8:	6022      	str	r2, [r4, #0]
 80090aa:	701d      	strb	r5, [r3, #0]
 80090ac:	b2ed      	uxtb	r5, r5
 80090ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090b0:	07da      	lsls	r2, r3, #31
 80090b2:	d405      	bmi.n	80090c0 <_putc_r+0x56>
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	059b      	lsls	r3, r3, #22
 80090b8:	d402      	bmi.n	80090c0 <_putc_r+0x56>
 80090ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090bc:	f7ff fafe 	bl	80086bc <__retarget_lock_release_recursive>
 80090c0:	4628      	mov	r0, r5
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	4629      	mov	r1, r5
 80090c6:	4622      	mov	r2, r4
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7ff f9e8 	bl	800849e <__swbuf_r>
 80090ce:	4605      	mov	r5, r0
 80090d0:	e7ed      	b.n	80090ae <_putc_r+0x44>
	...

080090d4 <_fstat_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	2300      	movs	r3, #0
 80090d8:	4d06      	ldr	r5, [pc, #24]	; (80090f4 <_fstat_r+0x20>)
 80090da:	4604      	mov	r4, r0
 80090dc:	4608      	mov	r0, r1
 80090de:	4611      	mov	r1, r2
 80090e0:	602b      	str	r3, [r5, #0]
 80090e2:	f7fc fb37 	bl	8005754 <_fstat>
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	d102      	bne.n	80090f0 <_fstat_r+0x1c>
 80090ea:	682b      	ldr	r3, [r5, #0]
 80090ec:	b103      	cbz	r3, 80090f0 <_fstat_r+0x1c>
 80090ee:	6023      	str	r3, [r4, #0]
 80090f0:	bd38      	pop	{r3, r4, r5, pc}
 80090f2:	bf00      	nop
 80090f4:	200004b8 	.word	0x200004b8

080090f8 <_isatty_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	2300      	movs	r3, #0
 80090fc:	4d05      	ldr	r5, [pc, #20]	; (8009114 <_isatty_r+0x1c>)
 80090fe:	4604      	mov	r4, r0
 8009100:	4608      	mov	r0, r1
 8009102:	602b      	str	r3, [r5, #0]
 8009104:	f7fc fb35 	bl	8005772 <_isatty>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_isatty_r+0x1a>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_isatty_r+0x1a>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	200004b8 	.word	0x200004b8

08009118 <_sbrk_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	2300      	movs	r3, #0
 800911c:	4d05      	ldr	r5, [pc, #20]	; (8009134 <_sbrk_r+0x1c>)
 800911e:	4604      	mov	r4, r0
 8009120:	4608      	mov	r0, r1
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	f7fc fb3c 	bl	80057a0 <_sbrk>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_sbrk_r+0x1a>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_sbrk_r+0x1a>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	200004b8 	.word	0x200004b8

08009138 <memchr>:
 8009138:	4603      	mov	r3, r0
 800913a:	b510      	push	{r4, lr}
 800913c:	b2c9      	uxtb	r1, r1
 800913e:	4402      	add	r2, r0
 8009140:	4293      	cmp	r3, r2
 8009142:	4618      	mov	r0, r3
 8009144:	d101      	bne.n	800914a <memchr+0x12>
 8009146:	2000      	movs	r0, #0
 8009148:	e003      	b.n	8009152 <memchr+0x1a>
 800914a:	7804      	ldrb	r4, [r0, #0]
 800914c:	3301      	adds	r3, #1
 800914e:	428c      	cmp	r4, r1
 8009150:	d1f6      	bne.n	8009140 <memchr+0x8>
 8009152:	bd10      	pop	{r4, pc}

08009154 <_init>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	bf00      	nop
 8009158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915a:	bc08      	pop	{r3}
 800915c:	469e      	mov	lr, r3
 800915e:	4770      	bx	lr

08009160 <_fini>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	bf00      	nop
 8009164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009166:	bc08      	pop	{r3}
 8009168:	469e      	mov	lr, r3
 800916a:	4770      	bx	lr
